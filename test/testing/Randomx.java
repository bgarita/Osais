package testing;

//import interfase.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.util.Random;
import javax.swing.JDialog;

public class Randomx extends JDialog implements Runnable {
    Thread hilo;
    boolean cronometroActivo;
    String stopTime = "00:03:00:000";

    public Randomx(String Delegado) {
        setTitle("Cronómetro");
        initComponents();
        this.txtNumber.setText(Delegado);
        this.setLocationRelativeTo(null);
        // Debe iniciar con el botón detener deshabilitado y habilitarlo
        // cuando el usuario haya presionado el botón Iniciar.
        this.btnDetener.setEnabled(false);
    }

    public void setStopTime(String stopTime) {
        this.stopTime = stopTime;
    }  // end setStopTime

    @Override
    public void run() {
        Integer horas = 0, minutos = 0, segundos = 0, milesimas = 0;
        //min es minutos, seg es segundos y mil es milesimas de segundo
        String hor = "", min = "", seg = "", mil = "";
        try {
            //Mientras cronometroActivo sea verdadero entonces seguirá
            //aumentando el tiempo.
            while (cronometroActivo) {
                Thread.sleep(8);
                //Incrementamos 15 milesimas de segundo
                milesimas += 8;

                //Cuando llega a 1000 osea 1 segundo aumenta 1 segundo
                //y las milesimas de segundo de nuevo a 0
                if (milesimas == 1000) {
                    milesimas = 0;
                    segundos += 1;
                    //Si los segundos llegan a 60 entonces aumenta 1 los minutos
                    //y los segundos vuelven a 0
                    if (segundos == 60) {
                        segundos = 0;
                        minutos++;

                        // Si los minutos llegan a 60 se debe aumenta 1 a las horas
                        if (minutos == 60) {
                            horas++;
                            minutos = 0;
                        } // end if
                    } // end if
                } // end if

                if (horas < 10) {
                    hor = "0" + horas;
                } else {
                    hor = horas.toString();
                } // end if

                if (minutos < 10) {
                    min = "0" + minutos;
                } else {
                    min = minutos.toString();
                } // end if

                if (segundos < 10) {
                    seg = "0" + segundos;
                } else {
                    seg = segundos.toString();
                } // end if

                if (milesimas < 10) {
                    mil = "00" + milesimas;
                } else if (milesimas < 100) {
                    mil = "0" + milesimas;
                } else {
                    mil = milesimas.toString();
                } // end if

                //Colocamos en la etiqueta la información
                tiempo.setText(hor + ":" + min + ":" + seg + ":" + mil);
                txtNumber.setText(random(25,1) + "");

                //Detener cronometro
                if (tiempo.getText().trim().equals(this.stopTime)) {
                    Font f = new Font("Arial", Font.BOLD, 40);
                    txtNumber.setText("Su tiempo ha vencido, gracias.");
                    txtNumber.setForeground(Color.GREEN);
                    txtNumber.setFont(f);
                    return;
                } // end if
            } // end while
        } catch (Exception e) {
            System.out.println(e.getMessage());
        } // end try-catch

    }
    //Esto es para el boton iniciar y reiniciar

    public void ejecutarCronometro() {
        if (btnIniciar.getText().equals("Iniciar")) {
            iniciarCronometro();
        } // end if
    }

    public void iniciarCronometro() {
        cronometroActivo = true;
        hilo = new Thread(this);
        hilo.start();
    } // end iniciarCronometro

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tiempo = new javax.swing.JLabel();
        btnIniciar = new javax.swing.JButton();
        txtNumber = new javax.swing.JTextField();
        btnDetener = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Tiempo para elegir un número");
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);

        tiempo.setBackground(new java.awt.Color(255, 255, 153));
        tiempo.setFont(new java.awt.Font("Helvetica", 1, 150)); // NOI18N
        tiempo.setForeground(new java.awt.Color(0, 0, 255));
        tiempo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tiempo.setText("00:00:00:000");
        tiempo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tiempo.setOpaque(true);

        btnIniciar.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnIniciar.setForeground(new java.awt.Color(0, 102, 51));
        btnIniciar.setText("Iniciar");
        btnIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarActionPerformed(evt);
            }
        });
        btnIniciar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnIniciarKeyPressed(evt);
            }
        });

        txtNumber.setEditable(false);
        txtNumber.setBackground(new java.awt.Color(255, 255, 153));
        txtNumber.setFont(new java.awt.Font("Tahoma", 1, 150)); // NOI18N
        txtNumber.setForeground(java.awt.Color.blue);
        txtNumber.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        btnDetener.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnDetener.setForeground(java.awt.Color.red);
        btnDetener.setText("Detener");
        btnDetener.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetenerActionPerformed(evt);
            }
        });
        btnDetener.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnDetenerKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnIniciar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnDetener, javax.swing.GroupLayout.DEFAULT_SIZE, 938, Short.MAX_VALUE)
            .addComponent(txtNumber, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(tiempo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnIniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tiempo, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDetener, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarActionPerformed
        btnIniciar.setEnabled(false);
        btnDetener.setEnabled(true);
        ejecutarCronometro();
        // Traslado el focus al botón que detiene la ejecución para que
        // el usuario pueda utilizar el teclado en vez del Mouse
        this.btnDetener.requestFocusInWindow();
    }//GEN-LAST:event_btnIniciarActionPerformed

    private void btnDetenerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetenerActionPerformed
        cronometroActivo = false;
        btnIniciar.setEnabled(true);
        btnDetener.setEnabled(false);
    }//GEN-LAST:event_btnDetenerActionPerformed

    private void btnIniciarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnIniciarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnIniciarActionPerformed(null);
        } // end if
    }//GEN-LAST:event_btnIniciarKeyPressed

    /**
     * Bosco agregado 06/08/2013 Este evento permite al usuario ejecutar la
     * acción sin necesidad de usar el Mouse, basta con la tecla ENTER.
     *
     * @param evt
     */
    private void btnDetenerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnDetenerKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnDetenerActionPerformed(null);
        } // end if
    }//GEN-LAST:event_btnDetenerKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            //java.util.logging.Logger.getLogger(Cronometro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            //java.util.logging.Logger.getLogger(Cronometro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            //java.util.logging.Logger.getLogger(Cronometro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            //java.util.logging.Logger.getLogger(Cronometro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new Randomx("").setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDetener;
    private javax.swing.JButton btnIniciar;
    private javax.swing.JLabel tiempo;
    private javax.swing.JTextField txtNumber;
    // End of variables declaration//GEN-END:variables

    private int random(int max, int min){
        Random rand = new Random();
        return rand.nextInt((max - min) + 1) + min;
    } // end randamo
}
