package interfase.otros;

import Exceptions.NotUniqueValueException;
import Mail.Bitacora;
import accesoDatos.CMD;
import accesoDatos.UtilBD;
import interfase.menus.Menu;
import interfase.transacciones.RegistroAsientos;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import logica.contabilidad.PeriodoContable;

/**
 *
 * @author bgarita 14/10/2020
 */
public class CierreContaAnual extends javax.swing.JFrame {

    private static final long serialVersionUID = 20L;
    private final Bitacora b = new Bitacora();
    private final Connection conn;
    private final PeriodoContable per;

    /**
     * Creates new form CierreConta
     */
    public CierreContaAnual() {
        initComponents();
        this.conn = Menu.CONEXION.getConnection();
        this.per = new PeriodoContable(conn);
        this.lblPeriodo.setText("Periodo a cerrar: " + per.getMesLetras() + ", " + per.getAño());
    } // end constructor

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        btnEjecutar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        lblPeriodo = new javax.swing.JLabel();
        btnGenerarAsiento = new javax.swing.JButton();
        btnIniciarEjercicio = new javax.swing.JButton();
        lblAsiento = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cierre contable");

        jTextPane1.setEditable(false);
        jTextPane1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTextPane1.setText("Este proceso traslada todos los movimientos del ejercicio contable a los acumulados anuales y limpia todas las cuentas de ingresos y gastos para iniciar un nuevo ejercicio contable.\nDurante el proceso se genera el asiento de cierre.\nEl tipo de asiento utilizado para este movimiento es el 99. El sistema lo asignará automáticamente por lo que hay que asegurarse de que el tipo esté creado.\n\n\nAsegúrese de:\n1.  Realizar un buen respaldo de la base de datos.\n2.  Que no haya más usuarios en el sistema.\n3.  Asegurarse de que el tipo de asiento 99 exista.");
        jScrollPane1.setViewportView(jTextPane1);

        btnEjecutar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnEjecutar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/24x24 png icons/Ejecutar32.png"))); // NOI18N
        btnEjecutar.setToolTipText("Ejecutar");
        btnEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEjecutarActionPerformed(evt);
            }
        });

        btnSalir.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZCLOSE.png"))); // NOI18N
        btnSalir.setToolTipText("Cerrar");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        lblPeriodo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblPeriodo.setForeground(new java.awt.Color(51, 51, 255));
        lblPeriodo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPeriodo.setText("Periodo a cerrar:");

        btnGenerarAsiento.setText("Generar asiento de cierre");
        btnGenerarAsiento.setToolTipText("Muestra el editor de asientos con los datos");
        btnGenerarAsiento.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGenerarAsiento.setMinimumSize(new java.awt.Dimension(155, 25));
        btnGenerarAsiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarAsientoActionPerformed(evt);
            }
        });

        btnIniciarEjercicio.setText("Iniciar ejercicio contable");

        lblAsiento.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblAsiento.setForeground(java.awt.Color.red);
        lblAsiento.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAsiento.setText(" ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPeriodo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnIniciarEjercicio)
                            .addComponent(btnGenerarAsiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 241, Short.MAX_VALUE)
                        .addComponent(btnEjecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSalir))
                    .addComponent(lblAsiento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnEjecutar, btnSalir});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnGenerarAsiento, btnIniciarEjercicio});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblPeriodo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblAsiento)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSalir)
                            .addComponent(btnEjecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnGenerarAsiento, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnIniciarEjercicio))))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnEjecutar, btnSalir});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnGenerarAsiento, btnIniciarEjercicio});

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEjecutarActionPerformed
        int resp
                = JOptionPane.showConfirmDialog(null,
                        "Se dispone a realizar el cierre anual de contabilidad.\n¿Está seguro?",
                        "Confirme por favor",
                        JOptionPane.YES_NO_OPTION);
        if (resp == JOptionPane.NO_OPTION) {
            return;
        } // end if


    }//GEN-LAST:event_btnEjecutarActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        try {
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
        dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnGenerarAsientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarAsientoActionPerformed
        String tipo_comp_descrip;   // Descripcipón que incluye el número de asiento y el tipo.
        String ctaCierre;           // Cuenta de cierre
        try {
            // Validaciones
            if (per.getMes() != 13) {
                JOptionPane.showMessageDialog(null,
                        "Error",
                        "El periodo en proceso no es el de cierre anual.",
                        JOptionPane.ERROR_MESSAGE);
                return;
            } // end if

            String temp = UtilBD.getDBString(conn, "cotipasient", "tipo_comp = 99", "descrip");
            tipo_comp_descrip = temp;

            if (temp == null || temp.trim().isEmpty()) {
                JOptionPane.showMessageDialog(null,
                        "El tipo de asiento 99 no existe.\n"
                        + "Éste es necesario para el asiento de cierre anual.\n"
                        + "Vaya al menú Mantenimiento y elija la opción de tipos de asiento,\n"
                        + "lo crea y luego intenta de nuevo.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            } // end if

            temp = UtilBD.getFieldValue(conn, "coasientoe", "no_comprob", "periodo", "13");

            if (temp != null && !temp.trim().isEmpty()) {
                // Bosco 17/10/2020
                // Todavía no existe un proceso de eliminación de asientos.
                // Hay que eliminar el asiento manualmente y recalcular los 
                // saldos en base al mes anterior al cierre.
                // Para esto hay que tomar los datos de la tabla hcocatalogo
                // filtrando por la fecha de cierre.
                // Ya existe un SP para esto: CALL ActualizarCatContaFechaAnterior('2010-12-31');
                JOptionPane.showMessageDialog(null,
                        "El asiento de cierre fue generado previamente.\n"
                        + "Si desea volver a generarlo debe eliminar el comprobante.\n \n"
                        + "NOTA: No lo anule porque entonces no podrá realizar el cierre.",
                        "Advertencia",
                        JOptionPane.WARNING_MESSAGE);
                return;
            } // end if

            // Obtener el mes en que se hace el cierre anual
            temp = UtilBD.getFieldValue(conn, "configcuentas", "mesCierreA", "mesactual", "13");
            int mesCierreAnual = Integer.parseInt(temp);

            // Si hay movimientos sin cerrar, el cierre no continúa
            // LOCATE FOR periodo <= nMescierrea AND YEAR(fecha_comp) = YEAR(aslcgpe.fecha_fi)
            boolean hayDatosSinCerrar = UtilBD.hayDatos(conn,
                    "coasientoe",
                    "periodo <= " + mesCierreAnual + " AND YEAR(fecha_comp) = " + per.getAño(),
                    "no_comprob");

            if (hayDatosSinCerrar) {
                JOptionPane.showMessageDialog(null,
                        "Existen movimientos del periodo sin cerrar.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            } // end if

            // Verificar que la cuenta de pérdidas y ganancias exista.
            String sqlSent
                    = "SELECT  "
                    + " configcuentas.ctaCierre, "
                    + "	vistacocatalogo.nom_cta  "
                    + "FROM configcuentas "
                    + "INNER JOIN vistacocatalogo ON configcuentas.ctaCierre = vistacocatalogo.cuenta";
            PreparedStatement ps = conn.prepareStatement(sqlSent,
                    ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet rs = CMD.select(ps);
            if (rs == null || !rs.first() || rs.getString(1).trim().isEmpty()) {
                JOptionPane.showMessageDialog(null,
                        "La cuenta de cierre no está definida.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                ps.close();
                return;
            } // end if
            ctaCierre = rs.getString(1).trim();
            ps.close();
            // Fin validaciones
        } catch (NotUniqueValueException | HeadlessException | NumberFormatException | SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return;
        } // end try-catch

        RegistroAsientos ra = new RegistroAsientos(conn);
        ra.setVisible(true);
        ra.setDescripA(lblAsiento);
        ra.setDescrip("Asiento de cierre anual");
        ra.setTipo(tipo_comp_descrip);
        ra.setComprobante("99999");
        ra.setFecha(per.getFecha_in());

        // Recorrer el catálogo de cuentas filtrando las cuentas de ingresos y gastos
        String sqlSent
                = "SELECT "
                + "	cuenta, "
                + "	ano_anter + (db_fecha - cr_fecha) AS monto, "
                + "	tipo_cta "
                + "FROM vistacocatalogo  "
                + "WHERE tipo_cta IN(4,5) "
                + "AND nivel = 1 "
                + "AND ABS(db_fecha - cr_fecha) > 0";
        try {
            String db_cr;
            double montoC = 0.00;
            
            PreparedStatement ps = conn.prepareStatement(
                    sqlSent, ResultSet.TYPE_SCROLL_SENSITIVE,
                    ResultSet.CONCUR_READ_ONLY);
            ResultSet rs = CMD.select(ps);
            while (rs != null && rs.next()) {
                ra.setCuenta(rs.getString("cuenta"));

                // En el asiento de cierre las cuentas de ingresos y gastos 
                // funcionan alrevez.
                // Los montos positivos van al HABER y los negativos al DEBE
                db_cr = rs.getDouble("monto") > 0 ? "C" : "D";
                ra.setMonto(Math.abs(rs.getDouble("monto")), db_cr);
                
                if (db_cr.equals("D")){
                    montoC += Math.abs(rs.getDouble("monto")); 
                } else {
                    montoC -= Math.abs(rs.getDouble("monto")); 
                }
                
                ra.agregarRegistro();
            } // end while
            ps.close();

            // Acá se agrega la cuenta de cierre
            db_cr = montoC > 0 ? "C" : "D";
            ra.setCuenta(ctaCierre);
            ra.setMonto(Math.abs(montoC), db_cr);
            ra.agregarRegistro();
            ra.guardarAsiento();
            ra.cerrarVentana();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
    }//GEN-LAST:event_btnGenerarAsientoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CierreContaAnual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CierreContaAnual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CierreContaAnual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CierreContaAnual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new CierreContaAnual().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEjecutar;
    private javax.swing.JButton btnGenerarAsiento;
    private javax.swing.JButton btnIniciarEjercicio;
    private javax.swing.JButton btnSalir;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JLabel lblAsiento;
    private javax.swing.JLabel lblPeriodo;
    // End of variables declaration//GEN-END:variables
}
