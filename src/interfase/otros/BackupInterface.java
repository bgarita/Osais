package interfase.otros;

import Exceptions.EmptyDataSourceException;
import Mail.Bitacora;
import accesoDatos.CMD;
import interfase.menus.Menu;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import logica.backup.BackupResoreJob;
import logica.utilitarios.Ut;

/**
 *
 * @author bosco
 */
public class BackupInterface extends javax.swing.JFrame implements Serializable {

    private static final long serialVersionUID = 21L;
    private Properties prop;
    private Properties prop2;
    private transient InputStream input;
    private transient InputStream input2;
    private String sourceFile;
    private String targetFile;
    private transient Connection conn;
    private final Bitacora b = new Bitacora();

    /**
     * Creates new form StartJob
     *
     * @param conn
     */
    public BackupInterface(Connection conn) {
        initComponents();
        this.lblProceso.setVisible(false);
        this.conn = conn;
        this.sourceFile = "backupDB.properties";
        this.targetFile = "destinoF.properties";
        this.prop = new Properties();
        this.prop2 = new Properties();
        try {
            this.input = new FileInputStream(sourceFile);   // Lectura
            this.input2 = new FileInputStream(targetFile);  // Lectura
        } catch (FileNotFoundException ex) {
            Logger.getLogger(BackupInterface.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            File f = new File(sourceFile);
            System.out.println(f.getAbsolutePath());
            f = new File(targetFile);
            System.out.println(f.getAbsolutePath());
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            dispose();
        } // end try-catch 

        try {
            /*
             Buscar en google http://www.mkyong.com/java/java-properties-file-examples/
             para crear los procesos de cargar el archivo de propiedades y para modificarlo.
             */
            loadProperties();
        } catch (IOException ex) {
            Logger.getLogger(BackupInterface.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            dispose();
        } // end try-catch

        loadDatabaseNames();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING:
     * Do NOT modify this code. The content of this method is always regenerated by the
     * Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSalir = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cboBD = new javax.swing.JComboBox<>();
        btnAgregar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        lblProceso = new javax.swing.JLabel();
        lblID = new javax.swing.JLabel();
        txtProp = new javax.swing.JTextField();
        lblBDSeleccionada = new javax.swing.JLabel();
        chkIncludeData = new javax.swing.JCheckBox();
        chkCompressFiles = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblConfig = new javax.swing.JTable();
        lblDestino = new javax.swing.JLabel();
        txtDestino = new javax.swing.JTextField();
        btnGuardar = new javax.swing.JButton();
        btnResp = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtFile = new javax.swing.JTextField();
        btnExaminar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        cboTargetDatabase = new javax.swing.JComboBox<>();
        chkNueva = new javax.swing.JCheckBox();
        txtTagetDatabase = new javax.swing.JTextField();
        btnRestaurar = new javax.swing.JButton();
        pgbAvance = new javax.swing.JProgressBar();
        lblBytes = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Respaldo de base de datos");

        btnSalir.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/24x24 png icons/Turn off.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.setMaximumSize(new java.awt.Dimension(135, 33));
        btnSalir.setMinimumSize(new java.awt.Dimension(135, 33));
        btnSalir.setPreferredSize(new java.awt.Dimension(135, 33));
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel1.setText("ID");

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel2.setText("Base de datos");

        cboBD.setToolTipText("Elija una base de datos");
        cboBD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboBDActionPerformed(evt);
            }
        });

        btnAgregar.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        btnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/24x24 png icons/Add.png"))); // NOI18N
        btnAgregar.setText("Agregar");
        btnAgregar.setMaximumSize(new java.awt.Dimension(135, 33));
        btnAgregar.setMinimumSize(new java.awt.Dimension(135, 33));
        btnAgregar.setPreferredSize(new java.awt.Dimension(135, 33));
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnEliminar.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/24x24 png icons/No-entry.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.setMaximumSize(new java.awt.Dimension(135, 33));
        btnEliminar.setMinimumSize(new java.awt.Dimension(135, 33));
        btnEliminar.setPreferredSize(new java.awt.Dimension(135, 33));
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        lblProceso.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/cd.gif"))); // NOI18N

        lblID.setForeground(new java.awt.Color(37, 0, 255));
        lblID.setText("0");

        lblBDSeleccionada.setForeground(new java.awt.Color(251, 10, 250));
        lblBDSeleccionada.setText(" ");

        chkIncludeData.setSelected(true);
        chkIncludeData.setText("Incluir datos");

        chkCompressFiles.setSelected(true);
        chkCompressFiles.setText("Comprimir archivos");

        tblConfig.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nombre", "Base de datos a respaldar", "Estado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblConfig.getTableHeader().setReorderingAllowed(false);
        tblConfig.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblConfigMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblConfig);
        if (tblConfig.getColumnModel().getColumnCount() > 0) {
            tblConfig.getColumnModel().getColumn(0).setPreferredWidth(200);
            tblConfig.getColumnModel().getColumn(0).setMaxWidth(300);
            tblConfig.getColumnModel().getColumn(1).setPreferredWidth(290);
            tblConfig.getColumnModel().getColumn(1).setMaxWidth(350);
        }

        lblDestino.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        lblDestino.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/24x24 png icons/CD.png"))); // NOI18N
        lblDestino.setText("Destino...");
        lblDestino.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblDestinoMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblDestinoMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblDestinoMouseExited(evt);
            }
        });

        txtDestino.setEditable(false);

        btnGuardar.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/24x24 png icons/Save.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.setMaximumSize(new java.awt.Dimension(135, 33));
        btnGuardar.setMinimumSize(new java.awt.Dimension(135, 33));
        btnGuardar.setPreferredSize(new java.awt.Dimension(135, 33));
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnResp.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        btnResp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/24x24 png icons/DiscoExterno.png"))); // NOI18N
        btnResp.setText("Respaldar");
        btnResp.setMaximumSize(new java.awt.Dimension(135, 33));
        btnResp.setMinimumSize(new java.awt.Dimension(135, 33));
        btnResp.setPreferredSize(new java.awt.Dimension(135, 33));
        btnResp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRespActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboBD, 0, 307, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblID)
                        .addGap(27, 27, 27)
                        .addComponent(txtProp)
                        .addGap(18, 18, 18)
                        .addComponent(lblBDSeleccionada, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(chkIncludeData)
                        .addGap(18, 18, 18)
                        .addComponent(chkCompressFiles)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblProceso, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(lblDestino)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDestino))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnResp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(cboBD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblID)
                            .addComponent(txtProp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBDSeleccionada))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkIncludeData)
                            .addComponent(chkCompressFiles)))
                    .addComponent(lblProceso))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDestino)
                    .addComponent(txtDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnResp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnGuardar, btnResp});

        jTabbedPane1.addTab("Respaldar", jPanel1);

        jLabel3.setText("Archivo");

        txtFile.setEditable(false);
        txtFile.setForeground(java.awt.Color.blue);

        btnExaminar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnExaminar.setText("Examinar...");
        btnExaminar.setMaximumSize(new java.awt.Dimension(95, 33));
        btnExaminar.setMinimumSize(new java.awt.Dimension(95, 33));
        btnExaminar.setPreferredSize(new java.awt.Dimension(95, 33));
        btnExaminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExaminarActionPerformed(evt);
            }
        });

        jLabel4.setText("Base de datos");

        cboTargetDatabase.setToolTipText("Elija una base de datos");
        cboTargetDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTargetDatabaseActionPerformed(evt);
            }
        });

        chkNueva.setText("Nueva");
        chkNueva.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chkNuevaMouseClicked(evt);
            }
        });

        txtTagetDatabase.setEditable(false);

        btnRestaurar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnRestaurar.setText("Restaurar");
        btnRestaurar.setMaximumSize(new java.awt.Dimension(95, 33));
        btnRestaurar.setMinimumSize(new java.awt.Dimension(95, 33));
        btnRestaurar.setPreferredSize(new java.awt.Dimension(95, 33));
        btnRestaurar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRestaurarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtFile)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(cboTargetDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(chkNueva)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTagetDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 272, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnExaminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRestaurar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(137, 137, 137)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExaminar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cboTargetDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkNueva)
                    .addComponent(txtTagetDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRestaurar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(118, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Restaurar", jPanel2);

        pgbAvance.setStringPainted(true);

        lblBytes.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        lblBytes.setForeground(java.awt.Color.red);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 863, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(lblBytes, javax.swing.GroupLayout.PREFERRED_SIZE, 584, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(pgbAvance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(pgbAvance, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblBytes, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(22, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSalir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(4, 4, 4))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        if (this.lblBDSeleccionada.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null,
                    "Primero debe elegir una base de datos en la lista desplegable.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if

        int id = Integer.parseInt(lblID.getText().trim());

        // Si el ID es negativo se trata de una línea nueva y por tanto se agrega
        // una nueva línea.
        if (id < 0) {
            int row = Ut.seekNull(tblConfig, 0);
            // Si esta función devuelve un -1 es porque no hay líneas vacías
            if (row < 0) {
                Ut.resizeTable(tblConfig, 1, "Filas");
                row = Ut.seekNull(tblConfig, 0);
            } // end if
            id = row;
        } // end if

        tblConfig.setValueAt(this.txtProp.getText().trim(), id, 0);
        tblConfig.setValueAt(lblBDSeleccionada.getText().trim(), id, 1);
        this.lblID.setText(id + "");
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void tblConfigMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblConfigMouseClicked
        if (tblConfig.getSelectedRow() < 0) {
            return;
        }

        lblID.setText(tblConfig.getSelectedRow() + "");
        txtProp.setText(
                tblConfig.getValueAt(tblConfig.getSelectedRow(), 0).toString());
        lblBDSeleccionada.setText(
                tblConfig.getValueAt(tblConfig.getSelectedRow(), 1).toString());
    }//GEN-LAST:event_tblConfigMouseClicked

    private void lblDestinoMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblDestinoMouseEntered
        lblDestino.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_lblDestinoMouseEntered

    private void lblDestinoMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblDestinoMouseExited
        lblDestino.setCursor(null);
    }//GEN-LAST:event_lblDestinoMouseExited

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        try {
            FileOutputStream output = new FileOutputStream(sourceFile);  // Escritura
            FileOutputStream output2 = new FileOutputStream(targetFile); // Escritura
            prop.clear();
            prop2.clear();
            for (int i = 0; i < this.tblConfig.getModel().getRowCount(); i++) {
                if (tblConfig.getValueAt(i, 0) == null) {
                    continue;
                } // end if
                prop.setProperty(
                        tblConfig.getValueAt(i, 0).toString(),
                        tblConfig.getValueAt(i, 1).toString());
            } // end for
            prop.store(output, null);
            output.close();

            prop2.setProperty("backup_folder", this.txtDestino.getText().trim());
            prop2.store(output2, "Carpeta donde quedarán los respaldos");
            output2.close();
        } catch (IOException ex) {
            Logger.getLogger(BackupInterface.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return;
        } // end try-catch

        JOptionPane.showMessageDialog(null,
                "Configuración guardada satisfactoriamente.",
                "Mensaje",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void lblDestinoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblDestinoMouseClicked
        JFileChooser selectorArchivo = new JFileChooser();
        selectorArchivo.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int resultado = selectorArchivo.showOpenDialog(selectorArchivo);

        // Si el usuario hizo clic en el botón Cancelar del cuadro de diálogo, regresar
        if (resultado == JFileChooser.CANCEL_OPTION) {
            return;
        } // end if

        // obtener la carpeta seleccionada
        File carpeta = selectorArchivo.getSelectedFile();
        this.txtDestino.setText(carpeta.getAbsolutePath());
    }//GEN-LAST:event_lblDestinoMouseClicked

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        if (this.lblBDSeleccionada.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null,
                    "Primero debe elegir una fila de la tabla",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if

        int is = Integer.parseInt(lblID.getText().trim());
        this.tblConfig.setValueAt(null, is, 0);
        this.tblConfig.setValueAt(null, is, 1);
        this.tblConfig.setValueAt(null, is, 2);
        this.lblID.setText("-1");
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnRespActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRespActionPerformed
        int rows = Ut.countNotNull(tblConfig, 0);
        if (rows == 0) {
            JOptionPane.showMessageDialog(null,
                    "No ha agregado bases de datos para respaldar.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if

        List<String> dataBases = new ArrayList<>();
        for (int i = 0; i < this.tblConfig.getModel().getRowCount(); i++) {
            if (tblConfig.getValueAt(i, 1) == null || tblConfig.getValueAt(i, 1).toString().trim().isEmpty()) {
                continue;
            } // end if
            dataBases.add(tblConfig.getValueAt(i, 1).toString().trim());
        } // end for

        BackupResoreJob bk = new BackupResoreJob();
        bk.setPassw(Menu.PASS);
        bk.setDataBases(dataBases);
        bk.setIncludeData(this.chkIncludeData.isSelected());
        bk.setCompressFiles(this.chkCompressFiles.isSelected());
        bk.setTargetFolder(this.txtDestino.getText().trim());
        bk.setLabel(this.lblBytes);
        bk.setPb(this.pgbAvance);
        bk.setTblConfig(this.tblConfig);
        bk.setLblProceso(this.lblProceso);
        bk.start();
    }//GEN-LAST:event_btnRespActionPerformed

    private void cboBDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboBDActionPerformed
        int index = this.cboBD.getSelectedIndex();
        if (index < 0) {
            return;
        } // end if

        this.lblID.setText("-1");
        this.lblBDSeleccionada.setText("");
        this.txtProp.setText("");
        this.txtProp.requestFocusInWindow();

        this.lblBDSeleccionada.setText(this.cboBD.getSelectedItem().toString());
    }//GEN-LAST:event_cboBDActionPerformed

    private void btnExaminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExaminarActionPerformed
        JFileChooser archivo = new JFileChooser();
        archivo.setFileSelectionMode(JFileChooser.FILES_ONLY);
        archivo.setCurrentDirectory(new File(this.txtDestino.getText().trim()));
        int boton = archivo.showOpenDialog(null);

        // Si el usuario hizo clic en el botón Cancelar del cuadro de diálogo, regresar
        if (boton == JFileChooser.CANCEL_OPTION) {
            return;
        } // end if

        // obtener el archivo seleccionado
        this.txtFile.setText(archivo.getSelectedFile().getAbsolutePath());
    }//GEN-LAST:event_btnExaminarActionPerformed

    private void cboTargetDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTargetDatabaseActionPerformed
        int index = this.cboTargetDatabase.getSelectedIndex();
        if (index < 0) {
            return;
        } // end if

        this.txtTagetDatabase.setText(this.cboTargetDatabase.getSelectedItem().toString());
    }//GEN-LAST:event_cboTargetDatabaseActionPerformed

    private void chkNuevaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chkNuevaMouseClicked
        this.txtTagetDatabase.setEditable(false);
        if (chkNueva.isSelected()) {
            this.txtTagetDatabase.setText("");
            this.txtTagetDatabase.setEditable(true);
            this.txtTagetDatabase.requestFocusInWindow();
        }
    }//GEN-LAST:event_chkNuevaMouseClicked

    private void btnRestaurarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRestaurarActionPerformed
        // Validaciones
        String newDatabase = this.txtTagetDatabase.getText().trim();
        boolean existe = Ut.seek(cboTargetDatabase, newDatabase);
        if (this.chkNueva.isSelected() && existe) {
            JOptionPane.showMessageDialog(null,
                    "El nombre de base de datos que escribió ya existe.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!this.chkNueva.isSelected() && !existe) {
            JOptionPane.showMessageDialog(null,
                    "El nombre de base de datos que escribió no existe. Elija una de la lista.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        
        BackupResoreJob bk = new BackupResoreJob();
        bk.setPassw(Menu.PASS);
        bk.setRestore(true);
        bk.setNewDB(this.chkNueva.isSelected());
        bk.setNewDatabase(newDatabase);
        bk.setFilePath(this.txtFile.getText().trim());
        
        bk.setLabel(this.lblBytes);
        bk.setPb(this.pgbAvance);
        bk.setLblProceso(this.lblProceso);
        bk.start();
    }//GEN-LAST:event_btnRestaurarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnExaminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnResp;
    private javax.swing.JButton btnRestaurar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JComboBox<String> cboBD;
    private javax.swing.JComboBox<String> cboTargetDatabase;
    private javax.swing.JCheckBox chkCompressFiles;
    private javax.swing.JCheckBox chkIncludeData;
    private javax.swing.JCheckBox chkNueva;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblBDSeleccionada;
    private javax.swing.JLabel lblBytes;
    private javax.swing.JLabel lblDestino;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblProceso;
    private javax.swing.JProgressBar pgbAvance;
    private javax.swing.JTable tblConfig;
    private javax.swing.JTextField txtDestino;
    private javax.swing.JTextField txtFile;
    private javax.swing.JTextField txtProp;
    private javax.swing.JTextField txtTagetDatabase;
    // End of variables declaration//GEN-END:variables

    private void loadProperties() throws IOException {
        prop.load(input);
        Enumeration<?> e = prop.propertyNames();
        while (e.hasMoreElements()) {
            String key = (String) e.nextElement();
            String value = prop.getProperty(key);
            this.lblID.setText("-1");
            this.txtProp.setText(key);
            this.lblBDSeleccionada.setText(value);
            this.btnAgregarActionPerformed(null);
        } // end while

        this.lblID.setText("-1");
        this.txtProp.setText("");
        this.lblBDSeleccionada.setText("");

        prop2.load(input2);
        if (prop2.isEmpty()) {
            return;
        } // end if
        this.txtDestino.setText(prop2.getProperty("backup_folder"));

        input.close();
        input2.close();
    } // end loadProperties

    public void setPgbAdvance(int value) {
        this.pgbAvance.setValue(this.pgbAvance.getValue() + value);
    } // end setPgbAdvance

    private void loadDatabaseNames() {
        String sqlSent
                = "Select  "
                + "	SCHEMA_NAME  "
                + "from information_schema.SCHEMATA "
                + "order by 1";

        PreparedStatement ps;
        ResultSet rs;

        try {
            ps = conn.prepareStatement(sqlSent,
                    ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs = CMD.select(ps);

            Ut.fillComboBox(cboBD, rs, 1, false);
            Ut.fillComboBox(cboTargetDatabase, rs, 1, false);
            ps.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } catch (EmptyDataSourceException ex) {
            Logger.getLogger(BackupInterface.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
    } // end loadDatabaseNames

    public void setConn(Connection conn) {
        this.conn = conn;
    }

}
