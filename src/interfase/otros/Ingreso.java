/*
 * Ingreso.java
 *
 * Created on 24/04/2009, 09:44:25 PM
 */
package interfase.otros;

import Exceptions.CurrencyExchangeException;
import Mail.Bitacora;
import accesoDatos.CMD;
import accesoDatos.DatabaseConnection;
import accesoDatos.UtilBD;
import interfase.mantenimiento.Tipocambio;
import interfase.menus.Menu;
import interfase.seguridad.CambioClave;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.SplashScreen;
import java.awt.geom.Rectangle2D;
import java.awt.geom.Rectangle2D.Double;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import logica.utilitarios.SQLInjectionException;
import logica.utilitarios.Ut;

/**
 *
 * @author Bosco Garita
 */
public class Ingreso extends javax.swing.JFrame {

    private static final long serialVersionUID = 2L;

    private DatabaseConnection conexion = null;
    private Connection conn = null;     // Conexión principal.
    private static SplashScreen mySplash;
    private static Double splashTextArea;
    private static Double splashProgressArea;
    private static Graphics2D splashGraphics;
    private Font font;
    private final String url;
    private final Bitacora b = new Bitacora();

    /**
     * Creates new form Ingreso
     *
     * @param url
     */
    public Ingreso(String url) {
        initComponents();
        // Una vez establecida la conexión se debe enviar el objeto de conección
        // al menú y éste a su vez debe enviarlo a cada form o programa que invoque.
        //conn = CONEXION.getConnection();
        splashInit();           // initialize splash overlay drawing parameters
        appInit();              // simulate what an application would do
        // before starting
        if (mySplash != null) {  // check if we really had a spash screen
            mySplash.close();   // if so we're now done with it
        } // end if
        this.url = url;
        Menu.url = url;
    } // end constructor

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtUser = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btnAceptar = new javax.swing.JButton();
        cmdCancelar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("OSAIS - Ingreso al sistema");
        setName("frameIngreso"); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Usuario:");

        txtUser.setColumns(16);
        txtUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUserActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Clave:");

        txtPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPasswordActionPerformed(evt);
            }
        });

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Security_key.png"))); // NOI18N
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        btnAceptar.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        btnAceptar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/llave.png"))); // NOI18N
        btnAceptar.setText("Aceptar");
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        cmdCancelar.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        cmdCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Salir.png"))); // NOI18N
        cmdCancelar.setText("Cancelar");
        cmdCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(btnAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(cmdCancelar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAceptar, cmdCancelar});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btnAceptar)
                .addComponent(cmdCancelar))
        );

        jSeparator1.setPreferredSize(new java.awt.Dimension(50, 5));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtPassword, txtUser});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelarActionPerformed
        System.exit(0);
    }//GEN-LAST:event_cmdCancelarActionPerformed

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        IngresoAcciones acciones
                = new IngresoAcciones(txtUser.getText().trim(), txtPassword.getPassword(), url);

        this.setCursor(null);
        boolean connected = acciones.setConnected();

        // Si no se logró establecer la conexión...
        if (!connected) {
            JOptionPane.showMessageDialog(null,
                    conexion.getErrorMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if
        conexion = acciones.getConexion();
        conn = acciones.getConn();

        boolean continuar = false;
        boolean disponible = true;
        if (!acciones.isSystemAvailable()) {
            String mensaje = acciones.getErrorMsg();
            disponible = false;
            if (acciones.getUser().equalsIgnoreCase("OWNER")
                    || acciones.getUser().equalsIgnoreCase("BGARITA")) {
                mensaje = """
                          El sistema se encuentra en una condici\u00f3n especial en
                          este momento.
                          Porfavor, \u00faselo para tareas administrativas \u00fanicamente.""";
                continuar = true;
            } // end if
            JOptionPane.showMessageDialog(
                    null,
                    mensaje,
                    continuar ? "Advertencia" : "Error",
                    continuar ? JOptionPane.WARNING_MESSAGE
                            : JOptionPane.ERROR_MESSAGE);
            if (!continuar) {
                return;
            } // end if
            acciones.cleanErrorMsg();
        }
        
        continuar = true;

        setVisible(false);
        
        acciones.validarIntervaloClaves();

        // Bosco agregado 23/02/2013
        // Hago una revisión del TC y si el usuario está autorizado a cambiar
        // este parámetro le presento la pantalla para que lo haga.
        Tipocambio tipoCambio;
        float tcDolar;

        try {
            tcDolar = UtilBD.tipoCambioDolar(conn);
        } catch (CurrencyExchangeException | SQLException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
            tcDolar = 0;
            String tituloM = "Advertencia";
            int tipoM = JOptionPane.WARNING_MESSAGE;

            if (ex instanceof SQLException) {
                continuar = false;
                tituloM = "Error";
                tipoM = JOptionPane.ERROR_MESSAGE;
            } // end if

            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    tituloM,
                    tipoM);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        } // end try-catch

        try {
            if (tcDolar == 0 && UtilBD.tienePermiso(conexion.getConnection(), "Tipocambio")) {
                try {
                    tipoCambio = new Tipocambio(conexion.getConnection());
                    tipoCambio.setVisible(true);
                    tipoCambio.setAlwaysOnTop(true);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null,
                            ex.getMessage(),
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                    continuar = false;
                    b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
                } // end try-catch
            } // end if
            // Fin Bosco agregado 23/02/2013
        } catch (Exception ex) {
            Logger.getLogger(Ingreso.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            continuar = false;
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        }

        if (!continuar) {
            dispose();
            System.exit(0);
            return;
        } // end if

        dispose();
        Menu.PASS = acciones.getUser();
        Menu.main(conexion, disponible, url);

        // Just to test
        String[] args = {};
        //MainFX.main(args); 
        //FXSwingMain.main(args);
    }//GEN-LAST:event_btnAceptarActionPerformed

    private void txtUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUserActionPerformed
        txtUser.transferFocus();
    }//GEN-LAST:event_txtUserActionPerformed

    private void txtPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPasswordActionPerformed
        txtPassword.transferFocus();
        btnAceptarActionPerformed(null);
    }//GEN-LAST:event_txtPasswordActionPerformed

//    /**
//    * @param args the command line arguments
//    */
//    public static void main(String args[]) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            @Override
//            public void run() {
//                new Ingreso().setVisible(true);
//            }
//        });
//    }
    /**
     * @param url
     */
    public static void main(final String url) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException | 
//                InstantiationException | 
//                IllegalAccessException | 
//                javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Ingreso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
        //</editor-fold>
        java.awt.EventQueue.invokeLater(() -> {
            new Ingreso(url).setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton cmdCancelar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables

    /**
     * Prepare the global variables for the other splash functions
     */
    private void splashInit() {
        mySplash = SplashScreen.getSplashScreen();
        if (mySplash != null) {   // if there are any problems displaying the splash this will be null
            Dimension ssDim = mySplash.getSize();
            int height = ssDim.height;
            int width = ssDim.width;
            // stake out some area for our status information
            splashTextArea
                    = new Rectangle2D.Double(15., height * 0.88, width * .45, 32.);
            splashProgressArea
                    = new Rectangle2D.Double(width * .55, height * .92, width * .4, 12);

            // create the Graphics environment for drawing status info
            splashGraphics = mySplash.createGraphics();
            font = new Font("Dialog", Font.PLAIN, 14);
            splashGraphics.setFont(font);

            // initialize the status info
            splashText("Cargando..");
            splashProgress(0);
        }
    } // end splashInit

    /**
     * Display text in status area of Splash. Note: no validation it will fit.
     *
     * @param str - text to be displayed
     */
    public static void splashText(String str) {
        if (mySplash != null && mySplash.isVisible()) {   // important to check here so no other methods need to know if there
            // really is a Splash being displayed

            // erase the last status text
            splashGraphics.setPaint(Color.LIGHT_GRAY);
            splashGraphics.fill(splashTextArea);

            // draw the text
            splashGraphics.setPaint(Color.BLACK);
            splashGraphics.drawString(
                    str, (int) (splashTextArea.getX() + 10),
                    (int) (splashTextArea.getY() + 15));

            // make sure it's displayed
            mySplash.update();
        }
    } // end splashText

    /**
     * Display a (very) basic progress bar
     *
     * @param pct how much of the progress bar to display 0-100
     */
    public static void splashProgress(int pct) {
        if (mySplash != null && mySplash.isVisible()) {

            // Note: 3 colors are used here to demonstrate steps
            // erase the old one
            splashGraphics.setPaint(Color.LIGHT_GRAY);
            splashGraphics.fill(splashProgressArea);

            // draw an outline
            splashGraphics.setPaint(Color.BLUE);
            splashGraphics.draw(splashProgressArea);

            // Calculate the width corresponding to the correct percentage
            int x = (int) splashProgressArea.getMinX();
            int y = (int) splashProgressArea.getMinY();
            int wid = (int) splashProgressArea.getWidth();
            int hgt = (int) splashProgressArea.getHeight();

            int doneWidth = Math.round(pct * wid / 100.f);
            doneWidth = Math.max(0, Math.min(doneWidth, wid - 1));  // limit 0-width

            // fill the done part one pixel smaller than the outline
            splashGraphics.setPaint(Color.GREEN);
            splashGraphics.fillRect(x, y + 1, doneWidth, hgt - 1);

            // make sure it's displayed
            mySplash.update();
        }
    }

    /**
     * just a stub to simulate a long initialization task that updates the text
     * and progress parts of the status in the Splash
     */
    private void appInit() {
        for (int i = 1; i <= 10; i++) {
            int pctDone = i * 10;
            splashText("Inicializando módulo #" + i);
            splashProgress(pctDone);
            try {
                Thread.sleep(100);
            } catch (InterruptedException ex) {
                // ignore it
            }
        } // end for
    } // end appInit

    private String getIP(String urlx) {
        String IP;
        int colon = urlx.indexOf(":");
        urlx = urlx.substring(0, colon);
        int lastSlash = urlx.lastIndexOf("/");
        urlx = urlx.substring(lastSlash + 1);
        IP = urlx;
        return IP;
    } // end getIP

    private void retryConnection(String usuario, String pass2, String urlx) {
        int lastDot = urlx.lastIndexOf(".");
        int colon = urlx.indexOf(":");
        String sinceColon = urlx.substring(colon);
        int lastIPNumber = Integer.parseInt(urlx.substring(lastDot + 1, colon));

        // Realizo 11 intentos de conexión hacia arriba
        for (int i = 0; i < 11; i++) {
            lastIPNumber++;
            urlx = urlx.substring(0, lastDot + 1) + lastIPNumber + sinceColon;

            //conexion = new DatabaseConnection(usuario,pass2);
            conexion = new DatabaseConnection(usuario, pass2, urlx);
            // Fin Bosco modificado 01/05/2011

            // Si ya hay conexión me saldo del ciclo
            if (conexion.isConnected()) {
                break;
            } // end if

            // Si no se conectó pero ya no es problema de IP...
            if (!conexion.isConnected()
                    && !conexion.getErrorMessage().contains("Communications link failure")) {
                return;
            } // end if
        } // end for

        // Aún no hay conexión realizo otros 11 intentos hacia abajo
        if (!conexion.isConnected()) {
            urlx = url;
            lastDot = urlx.lastIndexOf(".");
            lastIPNumber = Integer.parseInt(urlx.substring(lastDot + 1, colon));

            for (int i = 0; i < 11; i++) {
                lastIPNumber--;

                // Los IPs no pueden ser negativos
                if (lastIPNumber < 0) {
                    break;
                } // end if

                urlx = urlx.substring(0, lastDot + 1) + lastIPNumber + sinceColon;
                conexion = new DatabaseConnection(usuario, pass2, urlx);

                // Si ya hay conexión o el número es negativo me saldo del ciclo
                if (conexion.isConnected() || lastIPNumber < 0) {
                    break;
                } // end if
                // Si no se conectó pero ya no es problema de IP...
                if (!conexion.isConnected()
                        && !conexion.getErrorMessage().contains("Communications link failure")) {
                    return;
                } // end if
            } // end for
        } // end if

    } // end retryConnection
}
