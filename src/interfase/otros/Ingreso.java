/*
 * Ingreso.java
 *
 * Created on 24/04/2009, 09:44:25 PM
 */

package interfase.otros;

import accesoDatos.CMD;
import accesoDatos.DataBaseConnection;
import accesoDatos.UtilBD;
import interfase.mantenimiento.Tipocambio;
import interfase.menus.Menu;
import interfase.seguridad.CambioClave;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.SplashScreen;
import java.awt.geom.Rectangle2D;
import java.awt.geom.Rectangle2D.Double;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import Exceptions.CurrencyExchangeException;
import Mail.Bitacora;
import logica.utilitarios.SQLInjectionException;
import logica.utilitarios.Ut;


/**
 *
 * @author Bosco Garita
 */

public class Ingreso extends javax.swing.JFrame {
    private static final long serialVersionUID = 2L;

    DataBaseConnection conexion = null;
    private Connection conn = null;     // Conexión principal.
    private static SplashScreen mySplash;
    private static Double splashTextArea;
    private static Double splashProgressArea;
    private static Graphics2D splashGraphics;
    private Font font;
    private final String url;
    
    /** Creates new form Ingreso
     * @param url */
    public Ingreso(String url) {
        initComponents();
        // Una vez establecida la conexión se debe enviar el objeto de conección
        // al menú y éste a su vez debe enviarlo a cada form o programa que invoque.
        //conn = CONEXION.getConnection();
        splashInit();           // initialize splash overlay drawing parameters
        appInit();              // simulate what an application would do
                                // before starting
        if (mySplash != null){  // check if we really had a spash screen
            mySplash.close();   // if so we're now done with it
        } // end if
        this.url = url;
        Menu.url = url;
    } // end constructor
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtUser = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        cmdAceptar = new javax.swing.JButton();
        cmdCancelar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("OSAIS - Ingreso al sistema");
        setName("frameIngreso"); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Usuario:");

        txtUser.setColumns(16);
        txtUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUserActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Clave:");

        txtPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPasswordActionPerformed(evt);
            }
        });

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Login.jpeg"))); // NOI18N
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        cmdAceptar.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        cmdAceptar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/llave.png"))); // NOI18N
        cmdAceptar.setText("Aceptar");
        cmdAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAceptarActionPerformed(evt);
            }
        });

        cmdCancelar.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        cmdCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Salir.png"))); // NOI18N
        cmdCancelar.setText("Cancelar");
        cmdCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(cmdAceptar, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                .addGap(10, 10, 10)
                .addComponent(cmdCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(24, 24, 24))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(cmdAceptar)
                .addComponent(cmdCancelar))
        );

        jSeparator1.setPreferredSize(new java.awt.Dimension(50, 5));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtPassword, txtUser});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 35, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelarActionPerformed
        System.exit(0);
    }//GEN-LAST:event_cmdCancelarActionPerformed

    private void cmdAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAceptarActionPerformed
        // Bosco modificado 01/05/2011
        //        CONEXION = new DataBaseConnection(
        //                txtUser.getText().trim(),
        //                txtPassword.getText().trim());
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        String usuario = txtUser.getText().trim();
        char[] pass = txtPassword.getPassword();
        String pass2 = "";
        for (char p : pass){
            pass2 += p;
        } // end for
        //JOptionPane.showMessageDialog(rootPane, this.getClass().getName());
        
        String IP = getIP(url);
        //        if (Ut.jPing(IP)){
        //            System.out.println(IP);
        //        }
        // Si el url es un localhost no se requiere todo el procesamiento
        // para cambiar dinámicamente al IP.
        if (url.contains("localhost")){
            conexion = new DataBaseConnection(usuario,pass2,url);
        } else {
            //String IP = getIP(url);

            /*
                Si el ping no responde intento con 14 ips más. Esto lo hace el
                método retryConnection()
                El reintento de conectarse solo ha sido probado con urls que contienen
                número de puerto.
            NOTA: este jPing no está funcionando con mysql8.  Se debe comentar y
            habilitar //conexion = new DataBaseConnection(usuario,pass2,url);
            */
            
//            if (Ut.jPing(IP)){
//                CONEXION = new DataBaseConnection(usuario,pass2,url);
//            } else {
//                retryConnection(usuario,pass2,url);
//            } // end if
            conexion = new DataBaseConnection(usuario,pass2,url);
            // Si el error persiste intento nuevamente.  Pero solo si se trata de 
            // un problema con la IP.
            if (!conexion.isConnected() &&
                    conexion.getErrorMessage().contains("Communications link failure")){
                retryConnection(usuario,pass2,url);
            } // end if (!CONEXION.isConnected()) && ...
        } // end if (url.contains("localhost")) else ...
        
        this.setCursor(null);
        
        // Si no se logró establecer la conexión...
        if (!conexion.isConnected()){
            JOptionPane.showMessageDialog(null, 
                    conexion.getErrorMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if
        
        conn = conexion.getSharedConnection();
        // Fin Bosco modificado 17/03/2013

        // Verificar si el sistema está disponible
        boolean continuar = false;
        boolean disponible = true;
        ResultSet rs;
        PreparedStatement ps;
        try {
            ps = conn.prepareStatement("Select SistDisp from config", 
                    ResultSet.TYPE_SCROLL_SENSITIVE, 
                    ResultSet.CONCUR_READ_ONLY);
            rs = CMD.select(ps);
            if(Ut.goRecord(rs, Ut.FIRST)){
                continuar = rs.getBoolean("SistDisp");
            } // end if
        } catch (SQLException ex) {
            Logger.getLogger(Ingreso.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return;
        }
        
        String mensaje;
        
        
        if (!continuar){
            disponible = false;
            mensaje = "El sistema no está disponible en este momento.";
            if (usuario.equalsIgnoreCase("OWNER") ||
                    usuario.equalsIgnoreCase("BGARITA")){
                mensaje = "El sistema se encuentra en una condición especial en\n"
                        + "este momento.\n"
                        + "Porfavor, úselo para tareas administrativas únicamente.";
                continuar = true;
            } // end if
            JOptionPane.showMessageDialog(
                    null,
                    mensaje,
                    continuar ? "Advertencia":"Error",
                    continuar ? JOptionPane.WARNING_MESSAGE:
                        JOptionPane.ERROR_MESSAGE);
            if (!continuar){
                return;
            } // end if
        } // end if

        rs = null;
        setVisible(false);
        dispose();

        // Bosco agregado 06/11/2011
        // Valido el intervalo de cambio de claves.
        // Si es la primera vez que ingresa el usuario el campo
        // ultimaClave estará nulo lo cual provoca un número de mil días
        // y con esto se obliga a cambiar la clave.
        String sqlSent =
                "Select " +
                "   IfNull(Datediff(now(),ultimaClave),1000) as dias, " +
                "   (Select intervalo from paramusuario) as intervalo, " +
                "   activo " +
                "from saisystem.usuario " +
                "Where user = ?";

        try {
            // Bosco agregado 25/12/2011.  Control de inyección de código.
            if (Ut.isSQLInjection(conexion.getUserID())){
                dispose();
                System.exit(0);
            } // end if
            // Fin Bosco agregado 25/12/2011.
            ps.close();
            ps = conn.prepareStatement(sqlSent, 
                 ResultSet.TYPE_SCROLL_SENSITIVE, 
                 ResultSet.CONCUR_READ_ONLY);
            ps.setString(1, conexion.getUserID());
            rs = CMD.select(ps);
            if (!Ut.goRecord(rs, Ut.FIRST)){
                continuar = false;
            } // end if
        } catch (SQLInjectionException | SQLException ex) {
            Logger.getLogger(Ingreso.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            continuar = false;
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
        
        // Si la variable continuar es false es porque no se ha asignado el
        // usuario como usuario del sistema, solo de base de datos.
        if (!continuar){
            JOptionPane.showMessageDialog(null,
                    "Usted no puede ingresar a esta instancia." +
                    "\nSolicite al administrador que agregue su ID a la lista" +
                    "\nde usuarios autorizados.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            dispose();
            System.exit(0);
        } // end if

        int diasPCC = 0; // Días para cmabiar la clave
        
        try {
            // Valido si el usuario está activo
            if (!rs.getString("activo").equals("S")){
                JOptionPane.showMessageDialog(null,
                        "Usted no puede ingresar al sistema." +
                        "\nSolicite al administrador que le active su usuario.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                continuar = false;
                dispose();
                System.exit(0);
            } // end if
            diasPCC = rs.getInt("intervalo") - rs.getInt("dias");
        } catch (SQLException | HeadlessException ex) {
            Logger.getLogger(Ingreso.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    "No se puede calcular la fecha de vencimiento de su clave.\n" +
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            continuar = false;
            dispose();
            System.exit(0);
        } // end try-catch

        // Si ya no quedan días, obligo al usuario a cambiar su clave.
        if (diasPCC <= 0){
            JOptionPane.showMessageDialog(this,
                    "Su contraseña ha expirado.\n" +
                    "Debe cambiarla en este momento.",
                    "Seguridad",
                    JOptionPane.ERROR_MESSAGE);
            CambioClave cambioClave =
                    new CambioClave(
                    new javax.swing.JFrame(),
                    true, conn,
                    conexion.getUserID(),true);
            try {
                // Verifico si efectivamente cambió la clave o no.
                ps = conn.prepareStatement(sqlSent, 
                    ResultSet.TYPE_SCROLL_SENSITIVE, 
                    ResultSet.CONCUR_READ_ONLY);
                ps.setString(1, conexion.getUserID());
                
                rs = CMD.select(ps);
                
                if (continuar && !Ut.goRecord(rs, Ut.FIRST)){
                    continuar = false;
                } // end if

                diasPCC = rs.getInt("intervalo") - rs.getInt("dias");
                
                if (diasPCC < 0){
                    continuar = false;
                } // end if
            } catch (SQLException ex) {
                Logger.getLogger(Ingreso.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
                new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
                continuar = false;
            }
            
        } else if (diasPCC > 0 && diasPCC <= 5) {
            JOptionPane.showMessageDialog(this,
                    "Su contraseña expira en " + diasPCC + " días." +
                    "\nVaya al menú Admin y cámbiela.",
                    "Advertencia",
                    JOptionPane.WARNING_MESSAGE);
        } // end if
        // Fin Bosco agregado 06/11/2011
        
        // Bosco agregado 23/02/2013
        // Hago una revisión del TC y si el usuario está autorizado a cambiar
        // este parámetro le presento la pantalla para que lo haga.
        Tipocambio Tipoc;
        float tc;
        
        try {
            tc = UtilBD.tipoCambioDolar(conn);
        } catch (CurrencyExchangeException | SQLException ex) {
            Logger.getLogger(Ingreso.class.getName()).log(Level.SEVERE, null, ex);
            tc = 0;
            String tituloM = "Advertencia";
            int tipoM = JOptionPane.WARNING_MESSAGE;
            
            if (ex instanceof SQLException){
                continuar = false;
                tituloM = "Error";
                tipoM = JOptionPane.ERROR_MESSAGE;
            } // end if
            
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(), 
                    tituloM, 
                    tipoM);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
        try {
            if (tc == 0 && UtilBD.tienePermiso(conexion.getConnection(),"Tipocambio")){
                try{
                    Tipoc = new Tipocambio(conexion.getConnection());
                    Tipoc.setVisible(true);
                    Tipoc.setAlwaysOnTop(true);
                } catch(SQLException ex){
                    JOptionPane.showMessageDialog(null, 
                            ex.getMessage(), 
                            "Error", 
                            JOptionPane.ERROR_MESSAGE);
                    continuar = false;
                    new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
                } // end try-catch
            } // end if
            // Fin Bosco agregado 23/02/2013
        } catch (Exception ex) {
            Logger.getLogger(Ingreso.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            continuar = false;
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
        
        if (!continuar){
            dispose();
            System.exit(0);
            return;
        } // end if
        
        Menu.main(conexion, disponible, url);
    }//GEN-LAST:event_cmdAceptarActionPerformed

    private void txtUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUserActionPerformed
        txtUser.transferFocus();
    }//GEN-LAST:event_txtUserActionPerformed

    private void txtPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPasswordActionPerformed
        txtPassword.transferFocus();
        cmdAceptarActionPerformed(null);
    }//GEN-LAST:event_txtPasswordActionPerformed

//    /**
//    * @param args the command line arguments
//    */
//    public static void main(String args[]) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            @Override
//            public void run() {
//                new Ingreso().setVisible(true);
//            }
//        });
//    }
    /**
     * @param url
    */
    public static void main(final String url) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException | 
//                InstantiationException | 
//                IllegalAccessException | 
//                javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Ingreso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
        //</editor-fold>
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Ingreso(url).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdAceptar;
    private javax.swing.JButton cmdCancelar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables

    /**
     * Prepare the global variables for the other splash functions
     */
    private void splashInit()
    {
        mySplash = SplashScreen.getSplashScreen();
        if (mySplash != null)
        {   // if there are any problems displaying the splash this will be null
            Dimension ssDim = mySplash.getSize();
            int height = ssDim.height;
            int width = ssDim.width;
            // stake out some area for our status information
            splashTextArea =
                    new Rectangle2D.Double(15., height*0.88, width * .45, 32.);
            splashProgressArea =
                    new Rectangle2D.Double(width * .55, height*.92, width*.4, 12 );

            // create the Graphics environment for drawing status info
            splashGraphics = mySplash.createGraphics();
            font = new Font("Dialog", Font.PLAIN, 14);
            splashGraphics.setFont(font);

            // initialize the status info
            splashText("Cargando..");
            splashProgress(0);
        }
    } // end splashInit


    /**
     * Display text in status area of Splash.  Note: no validation it will fit.
     * @param str - text to be displayed
     */
    public static void splashText(String str)
    {
        if (mySplash != null && mySplash.isVisible())
        {   // important to check here so no other methods need to know if there
            // really is a Splash being displayed

            // erase the last status text
            splashGraphics.setPaint(Color.LIGHT_GRAY);
            splashGraphics.fill(splashTextArea);

            // draw the text
            splashGraphics.setPaint(Color.BLACK);
            splashGraphics.drawString(
                    str, (int)(splashTextArea.getX() + 10),
                    (int)(splashTextArea.getY() + 15));

            // make sure it's displayed
            mySplash.update();
        }
    } // end splashText

        /**
     * Display a (very) basic progress bar
     * @param pct how much of the progress bar to display 0-100
     */
    public static void splashProgress(int pct)
    {
        if (mySplash != null && mySplash.isVisible())
        {

            // Note: 3 colors are used here to demonstrate steps
            // erase the old one
            splashGraphics.setPaint(Color.LIGHT_GRAY);
            splashGraphics.fill(splashProgressArea);

            // draw an outline
            splashGraphics.setPaint(Color.BLUE);
            splashGraphics.draw(splashProgressArea);

            // Calculate the width corresponding to the correct percentage
            int x = (int) splashProgressArea.getMinX();
            int y = (int) splashProgressArea.getMinY();
            int wid = (int) splashProgressArea.getWidth();
            int hgt = (int) splashProgressArea.getHeight();

            int doneWidth = Math.round(pct*wid/100.f);
            doneWidth = Math.max(0, Math.min(doneWidth, wid-1));  // limit 0-width

            // fill the done part one pixel smaller than the outline
            splashGraphics.setPaint(Color.GREEN);
            splashGraphics.fillRect(x, y+1, doneWidth, hgt-1);

            // make sure it's displayed
            mySplash.update();
        }
    }

    /**
     * just a stub to simulate a long initialization task that updates
     * the text and progress parts of the status in the Splash
     */
    private void appInit() {
        for(int i=1;i<=10;i++) {
            int pctDone = i * 10;
            splashText("Inicializando módulo #" + i);
            splashProgress(pctDone);
            try{
                Thread.sleep(100);
            } catch (InterruptedException ex) {
                // ignore it
            }
        } // end for
    } // end appInit

    
    private String getIP(String urlx) {
        String IP;
        int colon = urlx.indexOf(":");
        urlx = urlx.substring(0,colon);
        int lastSlash = urlx.lastIndexOf("/");
        urlx = urlx.substring(lastSlash+1);
        IP = urlx;
        return IP;
    } // end getIP
    
    private void retryConnection(String usuario,String pass2,String urlx){
        int lastDot = urlx.lastIndexOf(".");
        int colon   = urlx.indexOf(":");
        String sinceColon = urlx.substring(colon);
        int lastIPNumber = Integer.parseInt(urlx.substring(lastDot+1, colon));

        // Realizo 11 intentos de conexión hacia arriba
        for (int i = 0; i < 11; i++){
            lastIPNumber++;
            urlx = urlx.substring(0, lastDot+1) + lastIPNumber + sinceColon;

            //conexion = new DataBaseConnection(usuario,pass2);
            conexion = new DataBaseConnection(usuario,pass2,urlx);
            // Fin Bosco modificado 01/05/2011

            // Si ya hay conexión me saldo del ciclo
            if (conexion.isConnected()){
                break;
            } // end if
            
            // Si no se conectó pero ya no es problema de IP...
            if (!conexion.isConnected() &&
                !conexion.getErrorMessage().contains("Communications link failure")){
                return;
            } // end if
        } // end for

        // Aún no hay conexión realizo otros 11 intentos hacia abajo
        if (!conexion.isConnected()){
            urlx = url;
            lastDot = urlx.lastIndexOf(".");
            lastIPNumber = Integer.parseInt(urlx.substring(lastDot+1,colon));

            for (int i = 0; i < 11; i++){
                lastIPNumber--;
                
                // Los IPs no pueden ser negativos
                if (lastIPNumber < 0){
                    break;
                } // end if
                
                urlx = urlx.substring(0, lastDot+1) + lastIPNumber + sinceColon;
                conexion = new DataBaseConnection(usuario,pass2,urlx);

                // Si ya hay conexión o el número es negativo me saldo del ciclo
                if (conexion.isConnected() || lastIPNumber < 0){
                    break;
                } // end if
                // Si no se conectó pero ya no es problema de IP...
                if (!conexion.isConnected() &&
                    !conexion.getErrorMessage().contains("Communications link failure")){
                    return;
                } // end if
            } // end for
        } // end if

    } // end retryConnection
}
