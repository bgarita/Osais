/*
 * RepBalanceSituacion.java
 * Balance de situación
 *
 * Created on 18/08/2016, 08:00:00 PM
 */

package interfase.reportes;

import Mail.Bitacora;
import accesoDatos.CMD;
import accesoDatos.UtilBD;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import logica.contabilidad.PeriodoContable;
import logica.utilitarios.Ut;

/**
 *
 * @author Bosco Garita
 */
@SuppressWarnings("serial")
public class RepBalanceSituacion extends JFrame {

    private Connection conn;
    private final Bitacora b = new Bitacora();
    
    /** Creates new form
     * @param c
     * @throws java.sql.SQLException */
    public RepBalanceSituacion(Connection c) throws SQLException {
        initComponents();

        conn = c;
        
        setCurrentPeriod();
    } // end constructor

    public void setConexion(Connection c){ conn = c; }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel5 = new javax.swing.JPanel();
        btnImprimir = new javax.swing.JButton();
        btnCerrar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cboMes = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        txtAno = new javax.swing.JFormattedTextField();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        radN4 = new javax.swing.JRadioButton();
        radN1 = new javax.swing.JRadioButton();
        radN2 = new javax.swing.JRadioButton();
        radN3 = new javax.swing.JRadioButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuArchivo = new javax.swing.JMenu();
        mnuGuardar = new javax.swing.JMenuItem();
        mnuSalir = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Balances de situación");

        btnImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZPRINT.png"))); // NOI18N
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        btnCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/control-power.png"))); // NOI18N
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCerrar)
                .addGap(4, 4, 4))
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnCerrar, btnImprimir});

        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnCerrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnImprimir))
                .addGap(4, 4, 4))
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnCerrar, btnImprimir});

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel1.setText("Mes a procesar");

        cboMes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre" }));

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel2.setText("Año");

        txtAno.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txtAno.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtAno.setText("0");
        txtAno.setToolTipText("0=Periodo actual");
        txtAno.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtAnoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAnoFocusLost(evt);
            }
        });
        txtAno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAnoActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(80, 82, 140));
        jLabel3.setText("0=Periodo en proceso");

        buttonGroup1.add(radN4);
        radN4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        radN4.setText("Nivel 4");

        buttonGroup1.add(radN1);
        radN1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        radN1.setSelected(true);
        radN1.setText("Nivel 1");

        buttonGroup1.add(radN2);
        radN2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        radN2.setText("Nivel 2");

        buttonGroup1.add(radN3);
        radN3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        radN3.setText("Nivel 3");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radN1)
                    .addComponent(radN4)
                    .addComponent(radN2)
                    .addComponent(radN3))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(radN1)
                .addGap(1, 1, 1)
                .addComponent(radN2)
                .addGap(1, 1, 1)
                .addComponent(radN3)
                .addGap(4, 4, 4)
                .addComponent(radN4)
                .addContainerGap())
        );

        mnuArchivo.setText("Archivo");

        mnuGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        mnuGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZPRINT.JPG"))); // NOI18N
        mnuGuardar.setText("Imprimir");
        mnuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuGuardarActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuGuardar);

        mnuSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.CTRL_MASK));
        mnuSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/control-power.png"))); // NOI18N
        mnuSalir.setText("Salir");
        mnuSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSalirActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuSalir);

        jMenuBar1.add(mnuArchivo);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(cboMes, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(4, 4, 4)
                                .addComponent(txtAno, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(jLabel3)))
                        .addGap(30, 30, 30))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtAno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addComponent(jLabel3))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4))
        );

        setSize(new java.awt.Dimension(323, 288));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void mnuSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSalirActionPerformed
        dispose();
}//GEN-LAST:event_mnuSalirActionPerformed

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        try {
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(RepBalanceSituacion.class.getName()).log(Level.SEVERE, null, ex);
            // No es necesario darle tratamiento al error.
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        }
        dispose();
    }//GEN-LAST:event_btnCerrarActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        String 
                tabla,
                sqlSent, 
                where, 
                formJasper;
        
        if (!validarPer()){
            return;
        } // end if
        
        
        // Si el nivel de cuenta es cuatro entonces son todas las cuentas; es decir
        // un balance de comprobación,  caso contrario solo se toman las cuentas
        // de mayor con el nivel indicado.
        int nivelc;
        if (this.radN1.isSelected()){
            nivelc = 1;
        } else if (this.radN2.isSelected()){
            nivelc = 2;
        } else if (this.radN3.isSelected()){
            nivelc = 3;
        } else {
            nivelc = 4;
        } // end if-else
        
        // Elegir la tabla.
        tabla = txtAno.getText().trim().equals("0") ? "cocatalogo":"hcocatalogo";
        boolean hist = !txtAno.getText().trim().equals("0");
        
        // Enviar los datos a una tabla temporal para luego proceder a realizar
        // cambios según corresponda para emitir el informe.
        sqlSent = 
                "CREATE TEMPORARY TABLE balancesit " + 
                "   Select     " +
                "    mayor,    " +
                "    sub_cta,  " +
                "    sub_sub,  " +
                "    colect,   " +
                "    formatCta(nom_cta,nivel,nombre,3) as nom_cta,  " +
                "    nivel,    " +
                "    tipo_cta, " +
                "    ano_anter," +
                "    db_fecha, " +
                "    cr_fecha, " +
                "    db_mes,   " +
                "    cr_mes,   " +
                "    nivelc,   " +
                "    nombre,   " + // 1=Indica que es formato de nombre
                "    (Select mostrarFechaRep from configcuentas) as mostrarFecha,   " + // 1=Muestra la fecha, 0=No la muestra
                "    0 as orden " +
                "FROM " + tabla;
        
        where = " Where tipo_cta < 4 ";
        if (nivelc != 4){
            where += " and nivelc <= " + nivelc + " and nivel = 0 ";
        } // end if
        
        Calendar cal = GregorianCalendar.getInstance();
        cal.set(Calendar.DAY_OF_MONTH, 1);
        cal.set(Calendar.MONTH, this.cboMes.getSelectedIndex());
        cal.set(Calendar.YEAR, Integer.parseInt(this.txtAno.getText().trim()));
        int dia = Ut.lastDay(cal.getTime());
        cal.set(Calendar.DAY_OF_MONTH, dia);
        java.sql.Date fecha_cierre = new java.sql.Date(cal.getTimeInMillis());
        
        if (!txtAno.getText().trim().equals("0")){
            where += " and fecha_cierre = ? ";
        }
        
        double utilidad, utilidadMes, utilidadMesA;
        
        try {
            // Calcular la utilidad según el catálogo elegido (actual o histórico)
            List<Double> l = UtilBD.CGgetUtilidad(conn, hist, fecha_cierre);
            utilidad        = l.get(0);
            utilidadMes     = l.get(1);
            utilidadMesA    = l.get(2);
        } catch (SQLException ex) {
            Logger.getLogger(RepBalanceSituacion.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
            return;
        } // end try-catch
        
        // Crear una tabla temporal con los registros traidos según el where.
        // Esta tabla debe incluir un campo mas llamado orden de tipo int que
        // servirá posteriormente para establecer el ordenamiento de los datos
        // segun el tipo de cuenta (Capital, ingresos, gastos...)
        
        sqlSent += where + " ORDER BY 1,2,3,4"; // mayor, sub_cta, sub_sub, colect
        
        PreparedStatement ps;
        try {
            ps = conn.prepareStatement(sqlSent);
            if (!txtAno.getText().trim().equals("0")){
                ps.setDate(1, fecha_cierre);
            }
            CMD.update(ps);
            ps.close();
            
            
            // Actualizo el campo de orden para los activos.
            sqlSent = "UPDATE balancesit SET orden = tipo_cta WHERE tipo_cta = 1";
            ps = conn.prepareStatement(sqlSent);
            CMD.update(ps);
            ps.close();
            
            // Actualizo el campo de orden para los pasivos reservando el espacio
            // para el total de activos (2).
            sqlSent = "UPDATE balancesit SET orden = 3 WHERE tipo_cta = 2";
            ps = conn.prepareStatement(sqlSent);
            CMD.update(ps);
            ps.close();
            
            // Actualizo el campo de orden para el capital.
            sqlSent = "UPDATE balancesit SET orden = 4 WHERE tipo_cta = 3";
            ps = conn.prepareStatement(sqlSent);
            CMD.update(ps);
            ps.close();
            
            // Actualizo el campo de orden para el Inresos.
            sqlSent = "UPDATE balancesit SET orden = 5 WHERE tipo_cta = 4";
            ps = conn.prepareStatement(sqlSent);
            CMD.update(ps);
            ps.close();
            
            // Actualizo el campo de orden para el gastos.
            sqlSent = "UPDATE balancesit SET orden = 6 WHERE tipo_cta = 5";
            ps = conn.prepareStatement(sqlSent);
            CMD.update(ps);
            ps.close();
            
            // Agregar un registro para que en el reporte salga una línea
            // en blanco.
            sqlSent = 
                    "Insert into balancesit " +
                    "   (ano_anter, db_fecha, cr_fecha, db_mes, cr_mes, orden, " +
                    "   nom_cta, mayor, sub_cta, sub_sub, colect, nivel, nivelc, mostrarFecha) " +
                    "values(0, 0, 0, 0, 0, 1, '', '000','001','','',0,0, (Select mostrarFechaRep from configcuentas))";
            ps = conn.prepareStatement(sqlSent);
            CMD.update(ps);
            ps.close();
            
            double ano_anter = 0, db_fecha = 0, cr_fecha = 0, db_mes = 0, cr_mes = 0;
            
            // Totalizo los activos y agrego el registro.
            sqlSent = 
                    "Select sum(ifnull(ano_anter,0)) as ano_anter, " +
                    "   sum(ifnull(db_fecha,0)) as db_fecha, " +
                    "   sum(ifnull(cr_fecha,0)) as cr_fecha, " +
                    "   sum(ifnull(db_mes,0)) as db_mes, " +
                    "   sum(ifnull(cr_mes,0)) as cr_mes  " +
                    "From balancesit " +
                    "Where tipo_cta = 1 AND sub_cta = '000'";
            ps = conn.prepareStatement(sqlSent, 
                    ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet rs = CMD.select(ps);

            if (rs != null && rs.first()){
                ano_anter = rs.getDouble("ano_anter");
                db_fecha  = rs.getDouble("db_fecha");
                cr_fecha  = rs.getDouble("cr_fecha");
                db_mes    = rs.getDouble("db_mes");
                cr_mes    = rs.getDouble("cr_mes");
            } // end if
            
            // Ahora inserto un registro con los totales
            sqlSent = 
                    "Insert into balancesit " +
                    "   (ano_anter, db_fecha, cr_fecha, db_mes, cr_mes, orden, " +
                    "   nom_cta, mayor, sub_cta, sub_sub, colect, nivel, nivelc, mostrarFecha) " +
                    "values(?, ?, ?, ?, ?, 2, '                 Total Activos','','','','',0,0,(Select mostrarFechaRep from configcuentas))";
            
            ps = conn.prepareStatement(sqlSent);
            ps.setDouble(1, ano_anter);
            ps.setDouble(2, db_fecha);
            ps.setDouble(3, cr_fecha);
            ps.setDouble(4, db_mes);
            ps.setDouble(5, cr_mes);
            CMD.update(ps);
            ps.close();
            
            // Agregar un registro para que en el reporte salga otra línea
            // en blanco.
            sqlSent = 
                    "Insert into balancesit " +
                    "   (ano_anter, db_fecha, cr_fecha, db_mes, cr_mes, orden, " +
                    "   nom_cta, mayor, sub_cta, sub_sub, colect, nivel, nivelc, mostrarFecha) " +
                    "values(0, 0, 0, 0, 0, 2, '', '000','001','','',0,0,(Select mostrarFechaRep from configcuentas))";
            
            ps = conn.prepareStatement(sqlSent);
            CMD.update(ps);
            ps.close();
            
        } catch (SQLException ex) {
            Logger.getLogger(RepBalanceSituacion.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
            return;
        } // end try-catch
        
        String per = this.cboMes.getSelectedItem().toString();
        String año = txtAno.getText().trim();
        if (txtAno.getText().trim().equals("0")){
            año = GregorianCalendar.getInstance().get(Calendar.YEAR) + "";
        } // end if
        per += ", " + año;
        
        String query = "Select * from balancesit order by orden, mayor, nivelc";
        /*
        Nota importante: 08/09/2020 Bosco
        Este reporte se queda con un solo formulario, el 1 debido a que la información
        se ve mejor de esta forma y es más fácil de trabajar.  Aunque no es igual que
        el formulario de fox los datos si son iguales.
        */
        formJasper = "RepBalanceSit1.jasper"; // DEBUG: Uso el mismo formulario para todos
        new Reportes(conn).CGgenerico(
                query,
                "",     // where
                "",     // Order By
                per,    // filtro
                formJasper,
                "Balance de situación",
                0.00,       // Saldo anterior
                utilidad,
                utilidadMes,
                utilidadMesA);
        
        // Eliminar la tabla atemporal
        sqlSent = "Drop table balancesit";
        try {
            ps = conn.prepareStatement(sqlSent);
            CMD.update(ps);
            ps.close();
        } catch (SQLException ex) {
            Logger.getLogger(RepBalanceSituacion.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        } // end try-catch
            
    }//GEN-LAST:event_btnImprimirActionPerformed

    private void mnuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuGuardarActionPerformed
        btnImprimirActionPerformed(evt);
    }//GEN-LAST:event_mnuGuardarActionPerformed

    private void txtAnoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAnoFocusGained
        txtAno.selectAll();
    }//GEN-LAST:event_txtAnoFocusGained

    private void txtAnoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAnoFocusLost
        // Validar si el período solicitado existe o no
        validarPer();
    }//GEN-LAST:event_txtAnoFocusLost

    private void txtAnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAnoActionPerformed
        txtAno.transferFocus();
    }//GEN-LAST:event_txtAnoActionPerformed


    /**
     * @param c
    */
    public static void main(Connection c) {
        try {
            RepBalanceSituacion run = new RepBalanceSituacion(c);
            run.setVisible(true);
        } catch (SQLException ex) { 
             JOptionPane.showMessageDialog(null, 
                     ex.getMessage(),
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCerrar;
    private javax.swing.JButton btnImprimir;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cboMes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JMenu mnuArchivo;
    private javax.swing.JMenuItem mnuGuardar;
    private javax.swing.JMenuItem mnuSalir;
    private javax.swing.JRadioButton radN1;
    private javax.swing.JRadioButton radN2;
    private javax.swing.JRadioButton radN3;
    private javax.swing.JRadioButton radN4;
    private javax.swing.JFormattedTextField txtAno;
    // End of variables declaration//GEN-END:variables

    private void setCurrentPeriod() {
        PeriodoContable per = new PeriodoContable(conn);
        this.cboMes.setSelectedIndex(per.getMes()-1);
    } // end setCurrentPeriod

    
    private boolean validarPer() {
        boolean correcto = true;
        // Si el año seleccionado es cero quiere decir que el usuario desea
        // ver el periodo en proceso.
        if (txtAno.getText().trim().equals("0")){
            PeriodoContable per = new PeriodoContable(conn);
            if (this.cboMes.getSelectedIndex() != (per.getMes()-1)){
                JOptionPane.showMessageDialog(null, 
                        "El período en proceso es " + per.getMesLetras() +
                        ", no " + this.cboMes.getSelectedItem() + ".",
                        "Validación",
                        JOptionPane.ERROR_MESSAGE);
                this.cboMes.requestFocusInWindow();
                correcto = false;
            } // end if
            
            return correcto;
        } // end if (txtAno.getText().trim().equals("0"))
        
        /*
         * El select que está aquí no se ha probado porque no hay cierres.
         * Habrá que probarlo cuando se haga el primer cierre.
         * El asunto es ver si se manda la fecha o también se manda la hora
         * Bosco 21/08/2016 10:15am
         */
        
        // Si el usuario eligió un año distinto de cero habrá que revisar el
        // histórico para verificar si el período solicitado existe.
        Calendar cal = GregorianCalendar.getInstance();
        cal.set(Calendar.DAY_OF_MONTH, 1);
        cal.set(Calendar.MONTH, this.cboMes.getSelectedIndex());
        cal.set(Calendar.YEAR, Integer.parseInt(this.txtAno.getText().trim()));
        int dia = Ut.lastDay(cal.getTime());
        cal.set(Calendar.DAY_OF_MONTH, dia);
        java.sql.Date fecha_cierre = new java.sql.Date(cal.getTimeInMillis());
        
        String sqlSent =
                "Select nom_cta from hcocatalogo where fecha_cierre = ? limit 1";
        PreparedStatement ps;
        ResultSet rs;
        
        try {
            ps = conn.prepareStatement(sqlSent, 
                    ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ps.setDate(1, fecha_cierre);
            rs = CMD.select(ps);
            if (rs == null || !rs.first()){
                correcto = false;
                JOptionPane.showMessageDialog(null, 
                        "El período solicitado no existe.",
                        "Validación",
                        JOptionPane.ERROR_MESSAGE);
            } // end if
            ps.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            correcto = false;
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        } // end try-catch
        
        return correcto;
    } // end validarPer
    
} // end class
