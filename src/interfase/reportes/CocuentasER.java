package interfase.reportes;

import MVC.model.CoparametrosER;
import Mail.Bitacora;
import accesoDatos.CMD;
import interfase.menus.Menu;
import interfase.otros.Buscador;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import logica.contabilidad.Cuenta;
import logica.utilitarios.Ut;

/**
 *
 * @author bgarita
 */
public class CocuentasER extends javax.swing.JFrame {

    private static final long serialVersionUID = 1L;
    private final Connection conn;
    private final Cuenta cta;    // Clase que maneja todo lo relacionado con cuentas
    private final List<CoparametrosER> listPar;
    private final Bitacora b = new Bitacora();

    /**
     * Creates new form CocuentasER
     */
    public CocuentasER() {
        initComponents();
        this.conn = Menu.CONEXION.getConnection();
        cta = new Cuenta(conn);
        listPar = new ArrayList<>();
        loadParameters();
        loadCuentasAsignadas();
    } // end constructor

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cboParametro = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        txtCuenta = new javax.swing.JFormattedTextField();
        lblNom_cta = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCuentas = new javax.swing.JTable();
        btnAgregar = new javax.swing.JButton();
        btnCerrar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnBuscarCu = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Relacionar cuentas y parámetros para el estado de resultados");

        jLabel1.setText("Parámetro");

        jLabel2.setText("Cuenta");

        txtCuenta.setText(" ");
        txtCuenta.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCuentaFocusLost(evt);
            }
        });

        lblNom_cta.setForeground(new java.awt.Color(0, 0, 255));
        lblNom_cta.setText(" ");
        lblNom_cta.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tblCuentas.setAutoCreateRowSorter(true);
        tblCuentas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Parametro", "Mayor", "Sub Cta", "Sub Sub", "Colect", "Descripción"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCuentas);
        if (tblCuentas.getColumnModel().getColumnCount() > 0) {
            tblCuentas.getColumnModel().getColumn(0).setMaxWidth(60);
            tblCuentas.getColumnModel().getColumn(1).setMaxWidth(55);
            tblCuentas.getColumnModel().getColumn(2).setMaxWidth(55);
            tblCuentas.getColumnModel().getColumn(3).setMaxWidth(55);
            tblCuentas.getColumnModel().getColumn(4).setMaxWidth(55);
        }

        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnCerrar.setText("Cerrar");
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnBuscarCu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/24x24 png icons/Find.png"))); // NOI18N
        btnBuscarCu.setToolTipText("Buscar cuenta");
        btnBuscarCu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarCuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboParametro, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 599, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnEliminar)
                            .addComponent(btnAgregar)
                            .addComponent(btnCerrar)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(txtCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(btnBuscarCu, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblNom_cta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAgregar, btnCerrar, btnEliminar});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cboParametro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel2)
                    .addComponent(txtCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarCu)
                    .addComponent(lblNom_cta))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(btnAgregar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCerrar)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnAgregar, btnCerrar, btnEliminar});

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarCuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarCuActionPerformed
        JTextField field = new JTextField("");
        Buscador bd = new Buscador(new java.awt.Frame(), true,
                "vistacocatalogo",
                "cuenta,nom_cta", "nom_cta", field, conn);
        bd.setTitle("Buscar cuentas");
        bd.lblBuscar.setText("Nombre de la cuenta");
        bd.setVisible(true);
        cta.setCuentaString(field.getText().trim());
        if (cta.isError()) {
            JOptionPane.showMessageDialog(null,
                    cta.getMensaje_error(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if
        this.txtCuenta.setText(field.getText().trim());
        this.txtCuentaFocusLost(null);
    }//GEN-LAST:event_btnBuscarCuActionPerformed

    private void txtCuentaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCuentaFocusLost
        this.lblNom_cta.setText("");

        if (txtCuenta.getText().trim().isEmpty()) {
            return;
        } // end if

        if (txtCuenta.getText().trim().length() != 12) {
            JOptionPane.showMessageDialog(null,
                    "La longitud de la cuenta no es apropiada. "
                    + "Esta debe ser de 12 dígitos.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if

        // Validar que la cuenta exista
        cta.setCuentaString(txtCuenta.getText().trim());
        if (cta.isError()) {
            JOptionPane.showMessageDialog(null,
                    cta.getMensaje_error(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if

        if (cta.getNom_cta().isEmpty()) {
            JOptionPane.showMessageDialog(null,
                    "Esta cuenta no existe.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if

        // Validar que la cuenta sea de movimientos
        if (cta.getNivel() == 0) {
            JOptionPane.showMessageDialog(null,
                    "Solo se admiten cuentas de movimientos.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if

        this.lblNom_cta.setText(cta.getNom_cta());
    }//GEN-LAST:event_txtCuentaFocusLost

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        // Validaciones
        if (this.lblNom_cta.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null,
                    "Debe elegir o digitar una cuenta válida.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if

        String sqlSent
                = "Insert into cocuentaser (parametro, mayor, sub_cta, sub_sub, colect, monto) "
                + "values(?,?,?,?,?,0) "
                + "ON DUPLICATE KEY UPDATE monto = 0";
        try {
            PreparedStatement ps = conn.prepareStatement(sqlSent);
            ps.setInt(1, this.listPar.get(this.cboParametro.getSelectedIndex()).getParametro());
            ps.setString(2, cta.getMayor());
            ps.setString(3, cta.getSub_cta());
            ps.setString(4, cta.getSub_sub());
            ps.setString(5, cta.getColect());
            CMD.update(ps);

            Object[] valores = new Object[5];
            valores[0] = this.listPar.get(this.cboParametro.getSelectedIndex()).getParametro();
            valores[1] = cta.getMayor();
            valores[2] = cta.getSub_cta();
            valores[3] = cta.getSub_sub();
            valores[4] = cta.getColect();
                    
            Integer[] columnas = new Integer[5];
            columnas[0] = 0;
            columnas[1] = 1;
            columnas[2] = 2;
            columnas[3] = 3;
            columnas[4] = 4;
            
            // Ubico una fila que tenga todos los valores que se envían en
            // el objeto valores.  Estos valores se buscan en las columnas
            // indicadas según el objeto columnas.
            // Si ya existe no hago nada
            int fila = Ut.seek(tblCuentas, valores, columnas);
            if (fila >= 0) {
                return;
            } // end if

            fila = Ut.seekNull(tblCuentas, 0);

            if (fila < 0) {
                Ut.resizeTable(tblCuentas, 1, "Filas");
                fila = Ut.seekNull(tblCuentas, 0);
            } // end if

            this.tblCuentas.setValueAt(this.listPar.get(this.cboParametro.getSelectedIndex()).getParametro(), fila, 0);
            this.tblCuentas.setValueAt(cta.getMayor(), fila, 1);
            this.tblCuentas.setValueAt(cta.getSub_cta(), fila, 2);
            this.tblCuentas.setValueAt(cta.getSub_sub(), fila, 3);
            this.tblCuentas.setValueAt(cta.getColect(), fila, 4);
            this.tblCuentas.setValueAt(cta.getNom_cta(), fila, 5);
        } catch (SQLException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        } // end try-catch
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // Si el usuario no ha elegido un registro no se puede continuar.
        // Tampoco se puede continuar si la línea elegida está vacía.
        int parametro, fila, registros;
        String mayor, sub_cta, sub_sub, colect;
        fila = this.tblCuentas.getSelectedRow();
        if (fila < 0) {
            JOptionPane.showMessageDialog(null,
                    "Debe hacer click en la fila que desea eliminar.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if
        if (this.tblCuentas.getValueAt(fila, 0) == null) {
            JOptionPane.showMessageDialog(null,
                    "La fila que eligió no es válida.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if

        // Confirmar eliminación
        if (JOptionPane.showConfirmDialog(null,
                "Se dispone a eliminar un registro.\n"
                + "\n¿Realmente desea hacerlo?",
                "Confirme...",
                JOptionPane.YES_NO_OPTION) != JOptionPane.YES_OPTION) {
            return;
        } // end if

        parametro = Integer.valueOf(this.tblCuentas.getValueAt(fila, 0).toString());
        mayor = this.tblCuentas.getValueAt(fila, 1).toString();
        sub_cta = this.tblCuentas.getValueAt(fila, 2).toString();
        sub_sub = this.tblCuentas.getValueAt(fila, 3).toString();
        colect = this.tblCuentas.getValueAt(fila, 4).toString();

        String sqlSent
                = "Delete from cocuentaser  "
                + "	Where parametro = ? "
                + "     and mayor   = ? "
                + "	and sub_cta = ? "
                + "	and sub_sub = ? "
                + "	and colect  = ? ";
        try {
            PreparedStatement ps = conn.prepareStatement(sqlSent);
            ps.setInt(1, parametro);
            ps.setString(2, mayor);
            ps.setString(3, sub_cta);
            ps.setString(4, sub_sub);
            ps.setString(5, colect);
            registros = CMD.update(ps);
        } catch (SQLException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
            return;
        } // end try-catch

        // Si no se eliminó el registro en base de datos tampoco lo elimino del grid
        if (registros == 0) {
            return;
        }

        this.tblCuentas.setValueAt(null, fila, 0);
        this.tblCuentas.setValueAt(null, fila, 1);
        this.tblCuentas.setValueAt(null, fila, 2);
        this.tblCuentas.setValueAt(null, fila, 3);
        this.tblCuentas.setValueAt(null, fila, 4);
        this.tblCuentas.setValueAt(null, fila, 5);

        Ut.sortTable(tblCuentas, 0);
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        dispose();
    }//GEN-LAST:event_btnCerrarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CocuentasER.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CocuentasER.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CocuentasER.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CocuentasER.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new CocuentasER().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnBuscarCu;
    private javax.swing.JButton btnCerrar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JComboBox<String> cboParametro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblNom_cta;
    private javax.swing.JTable tblCuentas;
    private javax.swing.JFormattedTextField txtCuenta;
    // End of variables declaration//GEN-END:variables

    private void loadParameters() {
        String sqlSent = "Select parametro, descrip from coparametroser";
        try {
            try (PreparedStatement ps = conn.prepareStatement(sqlSent,
                    ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY)) {
                ResultSet rs = CMD.select(ps);
                if (rs != null && rs.first()) {
                    rs.beforeFirst();
                    while (rs.next()) {
                        CoparametrosER par = new CoparametrosER();
                        par.setParametro(rs.getInt("parametro"));
                        par.setDescrip(rs.getString("descrip"));
                        listPar.add(par);
                        this.cboParametro.addItem(rs.getString("descrip"));
                    } // end while
                } // end if
                ps.close();
            } // end try with resources
            
            if (this.cboParametro.getItemCount() == 0) {
                JOptionPane.showMessageDialog(null,
                        "La tabla de parámetros está vacía.\n"
                        + "Contacte al administrador del sistema.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            } // end if
        } catch (SQLException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        } // end try-catch
    } // end loadParameters

    private void loadCuentasAsignadas() {
        String sqlSent
                = "Select  "
                + "	a.parametro,  "
                + "	a.mayor,  "
                + "	a.sub_cta,  "
                + "	a.sub_sub,  "
                + "	a.colect,  "
                + "	a.monto,  "
                + "	b.nom_cta "
                + "from cocuentaser a  "
                + "Inner join cocatalogo b on a.mayor = b.mayor  "
                + "			  and a.sub_cta = b.sub_cta  "
                + "			  and a.sub_sub = b.sub_sub  "
                + "			  and a.colect = b.colect";
        try {
            try (PreparedStatement ps = conn.prepareStatement(sqlSent,
                    ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY)) {
                ResultSet rs = CMD.select(ps);
                if (rs != null && rs.first()) {
                    rs.last();
                    int filas = rs.getRow();
                    Ut.resizeTable(tblCuentas, (filas - tblCuentas.getModel().getRowCount()), "Filas");
                    
                    rs.beforeFirst();
                    int fila = 0;
                    while (rs.next()) {
                        this.tblCuentas.setValueAt(rs.getInt("parametro"), fila, 0);
                        this.tblCuentas.setValueAt(rs.getString("mayor"), fila, 1);
                        this.tblCuentas.setValueAt(rs.getString("sub_cta"), fila, 2);
                        this.tblCuentas.setValueAt(rs.getString("sub_sub"), fila, 3);
                        this.tblCuentas.setValueAt(rs.getString("colect"), fila, 4);
                        this.tblCuentas.setValueAt(rs.getString("nom_cta"), fila, 5);
                        fila++;
                    } // end while
                } // end if
                ps.close();
            } // end try with resources
        } catch (SQLException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        } // end try-catch
    } // end loadCuentasAsignadas
}
