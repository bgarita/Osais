/*
 * Autorizaciones.java
 *
 * Created on 10/08/2011, 08:04:46 PM Bosco Garita
 */

package interfase.seguridad;

import accesoDatos.CMD;
import accesoDatos.UtilBD;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import Exceptions.EmptyDataSourceException;
import Mail.Bitacora;
import logica.utilitarios.Ut;

/**
 *
 * @author Bosco
 */
@SuppressWarnings("serial")
public class Autorizaciones extends javax.swing.JFrame {

    private Connection conn;
    private String[] users;
    private String[][] tareas;
    private boolean inicio = true;
    /** Creates new form Autorizaciones */
    public Autorizaciones(Connection c) {
        initComponents();
        conn = c;
        // Bosco modificado 30/10/2011
        // Solo se deben presentar los usuarios registrados bajo el esquema actual.
        //String sqlSent = "Select user from vistausuarios";
        String sqlSent = "Select user from usuario";
        // Fin Bosco modificado 30/10/2011.
        PreparedStatement ps;
        ResultSet rs;
        try {
            ps = conn.prepareStatement(sqlSent);
            rs = ps.executeQuery();
            
            // Cargar el combo de usuarios
            if (Ut.goRecord(rs, Ut.FIRST)){
                Ut.fillComboBox(cboUser, rs, 1, false);
            } // end if

            // Bosco modificado 28/10/2011.
            //Utilitarios.goRecord(rs, Utilitarios.LAST);
            //int rows = rs.getRow();
            //users = new String[rows];
            int rows = Ut.recCount(rs);
            users = new String[rows];
            // Fin Bosco modificado 28/10/2011.
            Ut.goRecord(rs, Ut.BEFORE_FIRST);

            // Cargar el arreglo de usuarios
            int i = 0;
            while(rs.next()){
                users[i] = rs.getString("user");
                i++;
            } // end while
            rs.close();

            // Cargar arreglo de tareas
            sqlSent = "Select programa,descrip from programa";
            ps = conn.prepareStatement(sqlSent);
            rs = ps.executeQuery();
            Ut.goRecord(rs, Ut.LAST);
            rows = rs.getRow();
            tareas = new String[rows][2];
            Ut.goRecord(rs, Ut.BEFORE_FIRST);
            i = 0;
            while(rs.next()){
                tareas[i][0] = rs.getString("programa");
                tareas[i][1] = rs.getString("descrip");
                i++;
            } // end while
            ps.close();
        } catch (SQLException | EmptyDataSourceException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }

        llenarListas();
        inicio = false;
    } // end constructor

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lstAutorizado = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstAutorizar = new javax.swing.JList();
        cboUser = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        cmdAgregar = new javax.swing.JButton();
        cmdEliminar = new javax.swing.JButton();
        cmdGuardar = new javax.swing.JButton();
        cmdSalir = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuArchivo = new javax.swing.JMenu();
        mnuGuardar = new javax.swing.JMenuItem();
        mnuSalir = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Permisos de usuario");

        lstAutorizado.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(lstAutorizado);

        jScrollPane2.setViewportView(lstAutorizar);

        cboUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboUserActionPerformed(evt);
            }
        });

        jLabel1.setText("Usuario:");

        cmdAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/control.png"))); // NOI18N
        cmdAgregar.setToolTipText("Agregar");
        cmdAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAgregarActionPerformed(evt);
            }
        });

        cmdEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/control-180.png"))); // NOI18N
        cmdEliminar.setToolTipText("Eliminar");
        cmdEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEliminarActionPerformed(evt);
            }
        });

        cmdGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/disk.png"))); // NOI18N
        cmdGuardar.setToolTipText("Guardar");
        cmdGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGuardarActionPerformed(evt);
            }
        });

        cmdSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/control-power.png"))); // NOI18N
        cmdSalir.setToolTipText("Salir");
        cmdSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSalirActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 255));
        jLabel2.setText("Este usuario puede:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 255));
        jLabel3.setText("Este usuario no puede:");

        mnuArchivo.setText("Archivo");

        mnuGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        mnuGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/disk.png"))); // NOI18N
        mnuGuardar.setText("Guardar");
        mnuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuGuardarActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuGuardar);

        mnuSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.CTRL_MASK));
        mnuSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/control-power.png"))); // NOI18N
        mnuSalir.setText("Salir");
        mnuSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSalirActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuSalir);

        jMenuBar1.add(mnuArchivo);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cboUser, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(126, 126, 126))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmdEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                                    .addComponent(cmdAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(138, 138, 138))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(4, 4, 4)))))
                        .addGap(14, 14, 14))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cmdGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane1, jScrollPane2});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(cboUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(cmdGuardar)
                                    .addComponent(cmdSalir)))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cmdAgregar)
                        .addGap(18, 18, 18)
                        .addComponent(cmdEliminar)
                        .addGap(164, 164, 164))))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jScrollPane1, jScrollPane2});

        setSize(new java.awt.Dimension(714, 477));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cboUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboUserActionPerformed
        if (inicio){
            return;
        } // end if
        llenarListas();
    }//GEN-LAST:event_cboUserActionPerformed

    private void mnuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuGuardarActionPerformed
        cmdGuardarActionPerformed(evt);
}//GEN-LAST:event_mnuGuardarActionPerformed

    private void mnuSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSalirActionPerformed
        dispose();
}//GEN-LAST:event_mnuSalirActionPerformed

    private void cmdSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSalirActionPerformed
        mnuSalirActionPerformed(evt);
    }//GEN-LAST:event_cmdSalirActionPerformed

    private void cmdGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGuardarActionPerformed
        // Definir el proceso de guardado.  Por ahora se tiene planeado
        // Eliminar todas las autorizaciones y luego insertar todos los
        // registros de la lista lstAutorizado.  Si se me ocurriera otra
        // forma más eficiente la pondré en práctica.

        // Confirmar la acción
        int resp =
                JOptionPane.showConfirmDialog(null,
                "Va a cambiar los permisos de este usuario\n" +
                "¿Realmente desea hacerlo?",
                "Confirme..",
                JOptionPane.YES_NO_OPTION);
        
        if (resp != JOptionPane.YES_OPTION){
            return;
        } // end if

        // Elimino todos los permisos e insertar los nuevos.
        PreparedStatement ps;
        String user = getUser();
        String sqlSent = "Delete from autoriz where user = ?";
        String tarea = "";
        String descrip = "";
        try{
            ps = conn.prepareStatement(sqlSent);
            ps.setString(1, user);
            conn.setAutoCommit(false);
            ps.executeUpdate();

            sqlSent =
                    "Insert into autoriz (user,programa) " +
                    "Values(?,?)";
            ps = conn.prepareStatement(sqlSent);
            ps.setString(1, user);

            // Recorro la lista de permisos e inseto los registros.
            for (int i = 0; i < lstAutorizado.getModel().getSize(); i++){
                descrip = lstAutorizado.getModel().getElementAt(i).toString();

                // Localizo la tarea en el arreglo.
                for (int j = 0; j < tareas.length; j++){
                    if (tareas[j][1].equals(descrip)){
                        tarea = tareas[j][0];
                        break;
                    } // end if
                } // end for

                if (tarea.isEmpty()){
                    continue;
                } // end if

                ps.setString(2, tarea);
                ps.executeUpdate();
            } // end for

            conn.commit();
            conn.setAutoCommit(true);
        } catch(SQLException ex){
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            try {
                CMD.transaction(conn, CMD.ROLLBACK);
            } catch (SQLException ex1){
                JOptionPane.showMessageDialog(null, 
                        ex1.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        }finally{
            try{
                conn.setAutoCommit(true);
            }catch(SQLException ex){
                JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
                new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            } // catch
        } // finally
    }//GEN-LAST:event_cmdGuardarActionPerformed

    @SuppressWarnings("unchecked")
    private void cmdAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAgregarActionPerformed
        modificarPermisos(lstAutorizar, true);
    }//GEN-LAST:event_cmdAgregarActionPerformed

    @SuppressWarnings("unchecked")
    private void cmdEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEliminarActionPerformed
        modificarPermisos(lstAutorizado, false);
    }//GEN-LAST:event_cmdEliminarActionPerformed

    /**
     * @param c
    */
    public static void main(final Connection c) {
        try {
            if (!UtilBD.tienePermiso(c,"Autorizaciones")){
                JOptionPane.showMessageDialog(null,
                        "Usted no está autorizado para ejecutar este proceso",
                        "Error - Permisos",
                        JOptionPane.ERROR_MESSAGE);
                return;
            } // end if
        } catch (Exception ex) {
            Logger.getLogger(Autorizaciones.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Autorizaciones(c).setVisible(true);
            }
        });
    } // end main

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cboUser;
    private javax.swing.JButton cmdAgregar;
    private javax.swing.JButton cmdEliminar;
    private javax.swing.JButton cmdGuardar;
    private javax.swing.JButton cmdSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList lstAutorizado;
    private javax.swing.JList lstAutorizar;
    private javax.swing.JMenu mnuArchivo;
    private javax.swing.JMenuItem mnuGuardar;
    private javax.swing.JMenuItem mnuSalir;
    // End of variables declaration//GEN-END:variables

    @SuppressWarnings("unchecked")
    private void llenarListas() {
        String sqlSent = 
                "Select programa.descrip " +
                "from autoriz " +
                "Inner join programa on autoriz.programa = programa.programa " +
                "Where autoriz.user = ? " +
                "Order by 1";
        
        String user = getUser();

        try {
            PreparedStatement ps = conn.prepareStatement(sqlSent);
            ps.setString(1, user);
            ResultSet rs = ps.executeQuery();
            DefaultListModel dlm = new DefaultListModel();
            while (rs.next()){
                dlm.addElement(rs.getString(1));
            } // end while
            lstAutorizado.setModel(dlm);

            rs.close();

            sqlSent =
                    "Select descrip " +
                    "From programa  " +
                    "Where not exists(Select autoriz.programa  " +
                    "from autoriz   " +
                    "Where autoriz.user = ? " +
                    "and autoriz.programa = programa.programa) " +
                    "Order by 1";

            ps = conn.prepareStatement(sqlSent);
            ps.setString(1, user);
            rs = ps.executeQuery();
            DefaultListModel dlm2 = new DefaultListModel();
            while (rs.next()){
                dlm2.addElement(rs.getString(1));
            } // end while
            lstAutorizar.setModel(dlm2);

            rs.close();
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }

    } // end llenarListas

    private String getUser(){
        String userName = cboUser.getSelectedItem().toString();
        // Localizar el código de usuario en el array.
        String user = "";
        for (int i = 0; i < users.length; i++){
            if (users[i].equals(userName)){
                user = users[i];
                break;
            } // end if
        } // end for
        return user;
    } // end getUser

    @SuppressWarnings({"unchecked"})
    private void modificarPermisos(JList<Object> list, boolean agregar){
        // Verificar que haya al menos un registro seleccionado
        if (list.getMinSelectionIndex() == -1){
            JOptionPane.showMessageDialog(null,
                    "Debe seleccionar al menos una tarea.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if

        // Bosco modificado 21/04/2013
        // Cambio el arreglo de objetos por un List
        //Object[] permisos = list.getSelectedValues();
        List<Object> valores = list.getSelectedValuesList();

        DefaultListModel dlmA = (DefaultListModel)lstAutorizar.getModel();
        DefaultListModel dlmB = (DefaultListModel)lstAutorizado.getModel();

        //        for (Object o : permisos){
        //            if (agregar) {
        //                dlmB.addElement(o);
        //                dlmA.removeElement(o);
        //            } else {
        //                dlmA.addElement(o);
        //                dlmB.removeElement(o);
        //            }
        //        } // end for
        
        for (Object o : valores){
            if (agregar) {
                dlmB.addElement(o);
                dlmA.removeElement(o);
            } else {
                dlmA.addElement(o);
                dlmB.removeElement(o);
            } // end if
        } // end for
        // Fin Bosco modificado 21/04/2013

        lstAutorizar.setModel(dlmA);
        lstAutorizado.setModel(dlmB);
    } // end modificarPermisos
} // end class
