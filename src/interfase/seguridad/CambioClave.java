/*
 * CambioClave.java
 *
 * Created on 06/11/2011, 06:25:34 PM
 */

package interfase.seguridad;

import Mail.Bitacora;
import accesoDatos.CMD;
import accesoDatos.UtilBD;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Arrays;
import javax.swing.JOptionPane;
import logica.utilitarios.Ut;

/**
 *
 * @author Bosco
 */
@SuppressWarnings("serial")
public class CambioClave extends javax.swing.JDialog {

    private final String USUARIO;
    private final Connection conn;
    private boolean mensajeActivo = false;
    private final Bitacora b = new Bitacora();

    /** Creates new form CambioClave
     * @param parent
     * @param modal
     * @param c
     * @param usuario
     * @param expiro */
    public CambioClave(java.awt.Frame parent, boolean modal,
            Connection c, String usuario, boolean expiro) {
        super(parent, modal);
        initComponents();
        this.USUARIO = usuario;
        this.conn = c;
        if (expiro){
            this.setTitle("Su contraseña ha expirado");
        } // end if
        setVisible(true);
    } // end constructor

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmdSalir = new javax.swing.JButton();
        txtNuevaClave = new javax.swing.JPasswordField();
        txtNuevaClave1 = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmdGuardar = new javax.swing.JButton();
        lblImagen = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cambiar mi contraseña");

        cmdSalir.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmdSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/control-power.png"))); // NOI18N
        cmdSalir.setText("Salir");
        cmdSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSalirActionPerformed(evt);
            }
        });

        txtNuevaClave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNuevaClaveActionPerformed(evt);
            }
        });
        txtNuevaClave.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNuevaClaveFocusLost(evt);
            }
        });

        txtNuevaClave1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNuevaClave1ActionPerformed(evt);
            }
        });
        txtNuevaClave1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNuevaClave1FocusLost(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Nueva contraseña:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Confirme contraseña:");

        cmdGuardar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmdGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/disk.png"))); // NOI18N
        cmdGuardar.setText("Guardar");
        cmdGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGuardarActionPerformed(evt);
            }
        });

        lblImagen.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/ChangePassWord.jpg"))); // NOI18N
        lblImagen.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        lblImagen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtNuevaClave1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNuevaClave, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33))
            .addGroup(layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(cmdGuardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmdSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblImagen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cmdGuardar, cmdSalir});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(lblImagen)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(txtNuevaClave, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel2)
                    .addComponent(txtNuevaClave1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8))
        );

        setSize(new java.awt.Dimension(361, 362));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSalirActionPerformed
        setVisible(false);
        dispose();
}//GEN-LAST:event_cmdSalirActionPerformed

    private void txtNuevaClaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNuevaClaveActionPerformed
        txtNuevaClaveFocusLost(null);
}//GEN-LAST:event_txtNuevaClaveActionPerformed

    private void txtNuevaClaveFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNuevaClaveFocusLost
        String clave = "";
        char[] p = txtNuevaClave.getPassword();
        for (char letra : p){
            clave += letra;
        } // end for
        if (clave.isEmpty()){
            return;
        } // end if

        patronClaveCorrecto();
}//GEN-LAST:event_txtNuevaClaveFocusLost

    private void txtNuevaClave1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNuevaClave1ActionPerformed
        txtNuevaClave1.transferFocus();
}//GEN-LAST:event_txtNuevaClave1ActionPerformed

    private void txtNuevaClave1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNuevaClave1FocusLost
        clavesIguales();
}//GEN-LAST:event_txtNuevaClave1FocusLost

    private void cmdGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGuardarActionPerformed
        if (!this.clavesIguales() || !this.patronClaveCorrecto()){
            return;
        } // end if
        String sqlSent, sqlUpdate;
        char[] cClave = this.txtNuevaClave.getPassword();
        String SClave = "";
        for (char p:cClave){
            SClave += p;
        } // end for

        sqlSent = "SET PASSWORD = PASSWORD(?)"; // mysql 5.7 o inferior
        sqlUpdate = 
                "Update saisystem.usuario Set ultimaClave = now() Where user = ?";
        try {
            // Bosco agregado 04/09/2018.
            // Determino la versión del motor de base de datos (mysql)
            String version = Ut.mysqlVersion(conn);
            
            // Si la versión del motor es 8 o superior se debe cambiar la 
            // sintaxis para el cambio de contraseña.
            if (version.startsWith("8")){
                sqlSent = "ALTER USER USER() IDENTIFIED BY ?";
            } // end if
            
            // Abrir transacción y actualizar la tabla de usuarios
            CMD.transaction(conn, CMD.START_TRANSACTION);
            PreparedStatement ps = conn.prepareStatement(sqlUpdate);
            ps.setString(1, this.USUARIO);
            ps.executeUpdate();
            ps = conn.prepareStatement(sqlSent);
            ps.setString(1, SClave);
            CMD.update(ps);
            
            CMD.transaction(conn, CMD.COMMIT);
            JOptionPane.showMessageDialog(this,
                    "Su contraseña fue cambiada exitosamente",
                    "Felicidades!",
                    JOptionPane.INFORMATION_MESSAGE);
            dispose();
        } catch(SQLException ex) {
            try {
                CMD.transaction(conn, CMD.ROLLBACK);
            } catch (SQLException ex1){
                JOptionPane.showMessageDialog(null, 
                        ex1.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
                return;
            }
            JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        } // end try-catch
}//GEN-LAST:event_cmdGuardarActionPerformed

//    /**
//    * @param args the command line arguments
//    */
//    public static void main(String args[]) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                CambioClave dialog = new CambioClave(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdGuardar;
    private javax.swing.JButton cmdSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblImagen;
    private javax.swing.JPasswordField txtNuevaClave;
    private javax.swing.JPasswordField txtNuevaClave1;
    // End of variables declaration//GEN-END:variables

    private boolean patronClaveCorrecto(){
        mensajeActivo = false;
        boolean correcta;
        String error;
        int numeros      = 0;
        int mayusculas   = 0;

        // Variables con valores default
        int minNumeros = 1;
        int minMayusculas = 1;
        int longClave = 5;

        try {
            minNumeros =
                Integer.parseInt(
                UtilBD.getDBString(conn, "paramUsuario", "1=1", "numeros"));
            minMayusculas =
                Integer.parseInt(
                UtilBD.getDBString(conn, "paramUsuario", "1=1", "mayusculas"));
            longClave =
                Integer.parseInt(
                UtilBD.getDBString(conn, "paramUsuario", "1=1", "longitudClave"));
        } catch (Exception ex){
            // No es necesario hacer nada
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        }

        char[] clave = this.txtNuevaClave.getPassword();

        // Cargar los parámetros de usuario


        // Revisar la longitud. (por ahora queda en piedra pero debe ser parametrizado)
        correcta = clave.length >= longClave;
        error = correcta ? "":"Su contraseña no cumple con la longitud mínima [" + longClave + "]";
        if (correcta){
            // Verificar si cumple con el patrón (números y mayúsculas)
            for (char letra:clave){
                // Contar los números.
                if (Character.isDigit(letra)){
                    numeros++;
                    continue;
                } // end if
                // Contar las mayúsculas
                if (Character.isUpperCase(letra)){
                    mayusculas++;
                } // end if
            } // end for

            if (numeros < minNumeros || mayusculas < minMayusculas){
                correcta = false;
                error = "Su contraseña debe tener las siguientes características" +
                        "\n1. Longitud " + longClave + " caracteres (mínimo)" +
                        "\n2. Numeros " + minNumeros + " (mínimo)" +
                        "\n3. Mayúcula " + minMayusculas + " (mínimo)";
            } // end if
        } // end if

        if (!correcta){
            mensajeActivo = true;
            JOptionPane.showMessageDialog(this,
                    error,
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        } // end if

        return correcta;
    } // end patronClaveCorrecto

    private boolean clavesIguales() {
        if (mensajeActivo){
            return true;
        } // end if

        boolean iguales =
                Arrays.equals(txtNuevaClave.getPassword(), txtNuevaClave1.getPassword());
        if (!iguales){
            JOptionPane.showMessageDialog(this,
                    "La clave digitada no es igual en ambos campos.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        } // end if
        return iguales;
    } // end confirmarClave


}
