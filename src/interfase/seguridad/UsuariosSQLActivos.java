/*
 * UsuariosSQLActivos.java
 *
 * Created on 08/05/2011, 08:58:04 PM
 */

package interfase.seguridad;

import Mail.Bitacora;
import accesoDatos.UtilBD;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import logica.utilitarios.Ut;

/**
 *
 * @author Bosco
 */
@SuppressWarnings("serial")
public class UsuariosSQLActivos extends java.awt.Dialog {
    Connection conn;
    String usuario;

    /** Creates new form UsuariosSQLActivos
     * @param parent
     * @param modal
     * @param c
     * @param user */
    public UsuariosSQLActivos(
            java.awt.Frame parent,
            boolean modal,
            Connection c,
            String user) {
        
        super(parent, modal);
        initComponents();
        conn = c;
        usuario = user;

        cargarProcesos();
    } // end constructor

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listUsers = new javax.swing.JList();
        cmdDesconectar = new javax.swing.JButton();
        cmdCancelar = new javax.swing.JButton();

        setAlwaysOnTop(true);
        setIconImage(null);
        setModalityType(java.awt.Dialog.ModalityType.DOCUMENT_MODAL);
        setTitle("Desconectar usuarios");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        listUsers.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "User 1" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listUsers.setToolTipText("Elija un usuario");
        jScrollPane1.setViewportView(listUsers);

        cmdDesconectar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmdDesconectar.setForeground(java.awt.Color.red);
        cmdDesconectar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/disconnect.png"))); // NOI18N
        cmdDesconectar.setText("Desconectar");
        cmdDesconectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDesconectarActionPerformed(evt);
            }
        });

        cmdCancelar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmdCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/control-power.png"))); // NOI18N
        cmdCancelar.setText("Cancelar");
        cmdCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cmdDesconectar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmdCancelar))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cmdCancelar, cmdDesconectar});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdCancelar)
                    .addComponent(cmdDesconectar))
                .addGap(4, 4, 4))
        );

        setSize(new java.awt.Dimension(461, 239));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private void cmdCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelarActionPerformed
        dispose();
    }//GEN-LAST:event_cmdCancelarActionPerformed

    private void cmdDesconectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDesconectarActionPerformed
        // Obtener el ID
        String id = listUsers.getSelectedValue().toString();
        id = id.substring(0, id.indexOf(" "));
        int resp =
            JOptionPane.showConfirmDialog(
                    cmdDesconectar,
                    "¿Realmente desea desconectar este usuario?",
                    "Confirme por favor..",
                    JOptionPane.WARNING_MESSAGE,
                    JOptionPane.YES_NO_OPTION);
        if (resp != JOptionPane.YES_OPTION){
            return;
        } // end if
        
        String sqlUpdate = "Kill " + id;
        
        try {
            UtilBD.SQLUpdate(conn, sqlUpdate);
        } catch (SQLException ex) {
            Logger.getLogger(UsuariosSQLActivos.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                        ex.getMessage(),
                        "Error", 
                        JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
        cargarProcesos();
    }//GEN-LAST:event_cmdDesconectarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdCancelar;
    private javax.swing.JButton cmdDesconectar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList listUsers;
    // End of variables declaration//GEN-END:variables

    // Cargar todos los pocesos activos
    @SuppressWarnings({"unchecked"})
    private void cargarProcesos(){
        ResultSet RSUsers;
        DefaultListModel dlm;
        dlm = new DefaultListModel();
        
        try {
            PreparedStatement ps = 
                    conn.prepareStatement(
                    "SHOW FULL PROCESSLIST", 
                    ResultSet.TYPE_SCROLL_SENSITIVE, 
                    ResultSet.CONCUR_READ_ONLY);
            RSUsers = ps.executeQuery();

            Ut.goRecord(RSUsers, Ut.BEFORE_FIRST);

            while (Ut.goRecord(RSUsers, Ut.NEXT)){
                // Evitar que el usuario se elimine a sí mismo
                if (usuario.equalsIgnoreCase(
                        RSUsers.getString("User").trim())){
                    continue;
                } // end if
                
                // Ver posibilidad de cambiar este control por un JTable
                dlm.addElement(
                        RSUsers.getString("Id")      + " " +
                        RSUsers.getString("User")    + " " +
                        RSUsers.getString("Host")    + " " +
                        RSUsers.getString("db")      + " " +
                        RSUsers.getString("Command") + " " +
                        RSUsers.getString("Time")    + " " +
                        RSUsers.getString("State")   + " " +
                        RSUsers.getString("Info"));
            } // end while

        } catch (SQLException ex) {
            Logger.getLogger(UsuariosSQLActivos.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return;
        } // end try-catch
        
        this.listUsers.setModel(dlm);
        if (!dlm.isEmpty()){
            this.listUsers.setSelectedIndex(0);
        } // end if
    } // end cargarProcesos
}
