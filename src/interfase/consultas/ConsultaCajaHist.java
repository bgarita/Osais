/* 
 * ConsultaCajaHist.java 
 *
 * Created on 20/08/2015, 09:17:28 AM
 */

package interfase.consultas;

import accesoDatos.CMD;
import accesoDatos.UtilBD;
import interfase.otros.Buscador;
import interfase.otros.Navegador;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import Exceptions.EmptyDataSourceException;
import Mail.Bitacora;
import java.sql.Date;
import java.util.Calendar;
import java.util.GregorianCalendar;
import logica.utilitarios.SQLInjectionException;
import logica.STRcaja;
import logica.utilitarios.Ut;
import static logica.utilitarios.Ut.fDecimal;

/**
 *
 * @author Bosco Garita
 */
@SuppressWarnings("serial")
public class ConsultaCajaHist extends JFrame {

    private Connection conn = null;
    private Navegador  nav = null;
    private Buscador   bd = null;
    
    private STRcaja[] aCaja; // Arreglo de objetos con los campos de la tabla hcaja
    
    
   
    /** Creates new form Caja
     * @param c
     * @throws java.sql.SQLException
     * @throws logica.utilitarios.SQLInjectionException
     * @throws Exceptions.EmptyDataSourceException */
    public ConsultaCajaHist(Connection c) 
            throws SQLException, SQLInjectionException, EmptyDataSourceException {
        initComponents();
        nav = new Navegador();
                
        conn = c;

        nav.setConexion(conn);
        
        // Validación de permisos para anular cierres
        this.btnAnular.setEnabled(false);
        this.btnAnular.setToolTipText("No tiene permisos para anular");
        try {
            if (UtilBD.tienePermiso(c,"AnularCierreCaja")){
                this.btnAnular.setEnabled(true);
                this.btnAnular.setToolTipText("Anular un cierre de caja");
            } // end if
        } catch (Exception ex) {
            Logger.getLogger(ConsultaCajaHist.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
    } // end constructor

    
    
    
    public void setConexion(Connection c){ conn = c; }
    
    public Connection getConexion() {return conn; }
    
    public void setFisico(String fis) {
        this.txtFisico.setText(fis); 
        try {
            this.calcularDiferencia();
        } catch (Exception ex) {
            Logger.getLogger(ConsultaCajaHist.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
    } // end setFisico

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblFamilia = new javax.swing.JLabel();
        txtIdcaja = new javax.swing.JFormattedTextField();
        txtDescripcion = new javax.swing.JFormattedTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtUser = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtEfectivo = new javax.swing.JTextField();
        cboFechas = new javax.swing.JComboBox<String>();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtSaldoInicial = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtDepositos = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtRetiros = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtSaldoFinal = new javax.swing.JTextField();
        lblFisico = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtFisico = new javax.swing.JTextField();
        txtDif = new javax.swing.JTextField();
        btnTransacciones = new javax.swing.JButton();
        panBilletes = new javax.swing.JPanel();
        txt50000 = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txt20000 = new javax.swing.JFormattedTextField();
        jLabel11 = new javax.swing.JLabel();
        txt10000 = new javax.swing.JFormattedTextField();
        jLabel12 = new javax.swing.JLabel();
        txt5000 = new javax.swing.JFormattedTextField();
        jLabel13 = new javax.swing.JLabel();
        txt2000 = new javax.swing.JFormattedTextField();
        jLabel14 = new javax.swing.JLabel();
        txt1000 = new javax.swing.JFormattedTextField();
        panMonedas = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        txt500 = new javax.swing.JFormattedTextField();
        jLabel16 = new javax.swing.JLabel();
        txt100 = new javax.swing.JFormattedTextField();
        jLabel17 = new javax.swing.JLabel();
        txt50 = new javax.swing.JFormattedTextField();
        txt25 = new javax.swing.JFormattedTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        txt10 = new javax.swing.JFormattedTextField();
        txt5 = new javax.swing.JFormattedTextField();
        jLabel20 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaFormula = new javax.swing.JTextArea();
        lblResultadoFormula = new javax.swing.JLabel();
        btnAnular = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuArchivo = new javax.swing.JMenu();
        mnuSalir = new javax.swing.JMenuItem();
        mnuEdicion = new javax.swing.JMenu();
        mnuBuscar = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Consulta histórica de cajas");

        lblFamilia.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        lblFamilia.setText("Número");

        txtIdcaja.setColumns(2);
        try {
            txtIdcaja.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("**")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtIdcaja.setToolTipText("Código");
        txtIdcaja.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtIdcajaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtIdcajaFocusLost(evt);
            }
        });
        txtIdcaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdcajaActionPerformed(evt);
            }
        });

        txtDescripcion.setColumns(40);
        try {
            txtDescripcion.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("******************************")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtDescripcion.setToolTipText("Descripción");

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel1.setText("Fechas de procesamiento");

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel2.setText("Cajero asignado");

        txtUser.setEditable(false);

        jLabel9.setFont(new java.awt.Font("Ubuntu", 1, 24)); // NOI18N
        jLabel9.setText("Saldo en efectivo:");

        txtEfectivo.setEditable(false);
        txtEfectivo.setFont(new java.awt.Font("Ubuntu", 1, 24)); // NOI18N
        txtEfectivo.setForeground(new java.awt.Color(70, 62, 241));
        txtEfectivo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtEfectivo.setText("0.00");
        txtEfectivo.setEnabled(false);

        cboFechas.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        cboFechas.setForeground(new java.awt.Color(73, 24, 226));
        cboFechas.setMaximumRowCount(12);
        cboFechas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboFechasActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel3.setText("Saldo inicial");

        txtSaldoInicial.setEditable(false);
        txtSaldoInicial.setBackground(java.awt.Color.blue);
        txtSaldoInicial.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        txtSaldoInicial.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtSaldoInicial.setText("0.00");
        txtSaldoInicial.setEnabled(false);

        jLabel4.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel4.setText("Depósitos");

        txtDepositos.setEditable(false);
        txtDepositos.setBackground(java.awt.Color.blue);
        txtDepositos.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        txtDepositos.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtDepositos.setText("0.00");
        txtDepositos.setEnabled(false);

        jLabel5.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel5.setText("Retiros");

        txtRetiros.setEditable(false);
        txtRetiros.setBackground(java.awt.Color.blue);
        txtRetiros.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        txtRetiros.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtRetiros.setText("0.00");
        txtRetiros.setEnabled(false);

        jLabel6.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel6.setText("Saldo final");

        txtSaldoFinal.setEditable(false);
        txtSaldoFinal.setBackground(java.awt.Color.blue);
        txtSaldoFinal.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        txtSaldoFinal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtSaldoFinal.setText("0.00");
        txtSaldoFinal.setEnabled(false);

        lblFisico.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        lblFisico.setForeground(new java.awt.Color(1, 127, 63));
        lblFisico.setText("Saldo físico");

        jLabel8.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel8.setText("Diferencia");

        txtFisico.setEditable(false);
        txtFisico.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        txtFisico.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtFisico.setText("0.00");
        txtFisico.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFisicoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFisicoFocusLost(evt);
            }
        });
        txtFisico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFisicoActionPerformed(evt);
            }
        });

        txtDif.setEditable(false);
        txtDif.setBackground(java.awt.Color.blue);
        txtDif.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        txtDif.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtDif.setText("0.00");
        txtDif.setEnabled(false);

        btnTransacciones.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        btnTransacciones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Factura.png"))); // NOI18N
        btnTransacciones.setText("Transacciones");
        btnTransacciones.setToolTipText("Ver transacciones");
        btnTransacciones.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnTransacciones.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        btnTransacciones.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        btnTransacciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTransaccionesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(lblFisico)
                    .addComponent(jLabel6)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDif, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSaldoInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFisico, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSaldoFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtRetiros, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDepositos, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTransacciones, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtDepositos, txtDif, txtFisico, txtRetiros, txtSaldoFinal, txtSaldoInicial});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtSaldoInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtDepositos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(4, 4, 4)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtRetiros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(4, 4, 4)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtSaldoFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(4, 4, 4)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblFisico)
                            .addComponent(txtFisico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnTransacciones))
                .addGap(4, 4, 4)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtDif, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Montos", jPanel2);

        txt50000.setEditable(false);
        txt50000.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txt50000.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt50000.setText("0");
        txt50000.setToolTipText("");
        txt50000.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/resultset_next.png"))); // NOI18N
        jLabel7.setText("50 000");
        jLabel7.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jLabel7.setIconTextGap(0);

        jLabel10.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/resultset_next.png"))); // NOI18N
        jLabel10.setText("20 000");
        jLabel10.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jLabel10.setIconTextGap(0);

        txt20000.setEditable(false);
        txt20000.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txt20000.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt20000.setText("0");
        txt20000.setToolTipText("");
        txt20000.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N

        jLabel11.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/resultset_next.png"))); // NOI18N
        jLabel11.setText("10 000");
        jLabel11.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jLabel11.setIconTextGap(0);

        txt10000.setEditable(false);
        txt10000.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txt10000.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt10000.setText("0");
        txt10000.setToolTipText("");
        txt10000.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N

        jLabel12.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/resultset_next.png"))); // NOI18N
        jLabel12.setText("5 000");
        jLabel12.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jLabel12.setIconTextGap(0);

        txt5000.setEditable(false);
        txt5000.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txt5000.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt5000.setText("0");
        txt5000.setToolTipText("");
        txt5000.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N

        jLabel13.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/resultset_next.png"))); // NOI18N
        jLabel13.setText("2 000");
        jLabel13.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jLabel13.setIconTextGap(0);

        txt2000.setEditable(false);
        txt2000.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txt2000.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt2000.setText("0");
        txt2000.setToolTipText("");
        txt2000.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N

        jLabel14.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/resultset_next.png"))); // NOI18N
        jLabel14.setText("1 000");
        jLabel14.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jLabel14.setIconTextGap(0);

        txt1000.setEditable(false);
        txt1000.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txt1000.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt1000.setText("0");
        txt1000.setToolTipText("");
        txt1000.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N

        javax.swing.GroupLayout panBilletesLayout = new javax.swing.GroupLayout(panBilletes);
        panBilletes.setLayout(panBilletesLayout);
        panBilletesLayout.setHorizontalGroup(
            panBilletesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panBilletesLayout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addGroup(panBilletesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panBilletesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt50000, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                    .addComponent(txt20000)
                    .addComponent(txt10000)
                    .addComponent(txt5000)
                    .addComponent(txt2000)
                    .addComponent(txt1000))
                .addContainerGap(96, Short.MAX_VALUE))
        );
        panBilletesLayout.setVerticalGroup(
            panBilletesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panBilletesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panBilletesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt50000, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panBilletesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt20000, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panBilletesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt10000, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panBilletesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt5000, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panBilletesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt2000, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panBilletesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt1000, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Billetes", panBilletes);

        jLabel15.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/resultset_next.png"))); // NOI18N
        jLabel15.setText("500");
        jLabel15.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jLabel15.setIconTextGap(0);

        txt500.setEditable(false);
        txt500.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txt500.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt500.setText("0");
        txt500.setToolTipText("");
        txt500.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N

        jLabel16.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/resultset_next.png"))); // NOI18N
        jLabel16.setText("100");
        jLabel16.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jLabel16.setIconTextGap(0);

        txt100.setEditable(false);
        txt100.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txt100.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt100.setText("0");
        txt100.setToolTipText("");
        txt100.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N

        jLabel17.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/resultset_next.png"))); // NOI18N
        jLabel17.setText("50");
        jLabel17.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jLabel17.setIconTextGap(0);

        txt50.setEditable(false);
        txt50.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txt50.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt50.setText("0");
        txt50.setToolTipText("");
        txt50.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N

        txt25.setEditable(false);
        txt25.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txt25.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt25.setText("0");
        txt25.setToolTipText("");
        txt25.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N

        jLabel18.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/resultset_next.png"))); // NOI18N
        jLabel18.setText("25");
        jLabel18.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jLabel18.setIconTextGap(0);

        jLabel19.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/resultset_next.png"))); // NOI18N
        jLabel19.setText("10");
        jLabel19.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jLabel19.setIconTextGap(0);

        txt10.setEditable(false);
        txt10.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txt10.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt10.setText("0");
        txt10.setToolTipText("");
        txt10.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N

        txt5.setEditable(false);
        txt5.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txt5.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt5.setText("0");
        txt5.setToolTipText("");
        txt5.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N

        jLabel20.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        jLabel20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/resultset_next.png"))); // NOI18N
        jLabel20.setText("5");
        jLabel20.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jLabel20.setIconTextGap(0);

        javax.swing.GroupLayout panMonedasLayout = new javax.swing.GroupLayout(panMonedas);
        panMonedas.setLayout(panMonedasLayout);
        panMonedasLayout.setHorizontalGroup(
            panMonedasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panMonedasLayout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addGroup(panMonedasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16)
                    .addComponent(jLabel17)
                    .addComponent(jLabel18)
                    .addComponent(jLabel19)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panMonedasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt5)
                    .addComponent(txt10)
                    .addComponent(txt25)
                    .addComponent(txt50, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                    .addComponent(txt100)
                    .addComponent(txt500, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE))
                .addContainerGap(120, Short.MAX_VALUE))
        );
        panMonedasLayout.setVerticalGroup(
            panMonedasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panMonedasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panMonedasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt500, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panMonedasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt100, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panMonedasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt50, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panMonedasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt25, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panMonedasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panMonedasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Monedas", panMonedas);

        txaFormula.setEditable(false);
        txaFormula.setColumns(20);
        txaFormula.setLineWrap(true);
        txaFormula.setRows(10);
        txaFormula.setToolTipText("Digite una fórmula de suma utilizando +");
        txaFormula.setWrapStyleWord(true);
        jScrollPane1.setViewportView(txaFormula);

        lblResultadoFormula.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        lblResultadoFormula.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblResultadoFormula.setText("0.00");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lblResultadoFormula, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblResultadoFormula)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Fórmula", jPanel1);

        btnAnular.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        btnAnular.setText("Anular cierre");
        btnAnular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnularActionPerformed(evt);
            }
        });

        mnuArchivo.setText("Archivo");

        mnuSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.CTRL_MASK));
        mnuSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/control-power.png"))); // NOI18N
        mnuSalir.setText("Salir");
        mnuSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSalirActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuSalir);

        jMenuBar1.add(mnuArchivo);

        mnuEdicion.setText("Edición");

        mnuBuscar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        mnuBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/binocular.png"))); // NOI18N
        mnuBuscar.setText("Buscar");
        mnuBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuBuscarActionPerformed(evt);
            }
        });
        mnuEdicion.add(mnuBuscar);

        jMenuBar1.add(mnuEdicion);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblFamilia)
                        .addGap(2, 2, 2)
                        .addComponent(txtIdcaja, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cboFechas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtUser))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtEfectivo, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                .addGap(12, 12, 12))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAnular)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                        .addComponent(lblFamilia)
                        .addComponent(txtIdcaja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cboFechas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(btnAnular)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtEfectivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void mnuSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSalirActionPerformed
        dispose();
}//GEN-LAST:event_mnuSalirActionPerformed

    private void mnuBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuBuscarActionPerformed
        bd = new Buscador(new java.awt.Frame(), true,
                    "hcaja","idcaja,descripcion","descripcion",txtIdcaja,conn);
        bd.setTitle("Buscar cajas");
        bd.lblBuscar.setText("Caja");
        bd.setVisible(true);
        this.txtIdcajaFocusLost(null);
}//GEN-LAST:event_mnuBuscarActionPerformed

    private void txtIdcajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdcajaActionPerformed
        txtIdcaja.transferFocus();
}//GEN-LAST:event_txtIdcajaActionPerformed

    private void txtIdcajaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIdcajaFocusLost
        String idcaja = txtIdcaja.getText().trim();
        if (idcaja.isEmpty()){
            return;
        } // end if
        
        loadData();
    }//GEN-LAST:event_txtIdcajaFocusLost

    private void txtIdcajaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIdcajaFocusGained
        txtIdcaja.selectAll();
    }//GEN-LAST:event_txtIdcajaFocusGained

    private void txtFisicoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFisicoFocusGained
        txtFisico.selectAll();
    }//GEN-LAST:event_txtFisicoFocusGained

    private void txtFisicoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFisicoFocusLost
        try {
            calcularDiferencia();
        } catch (Exception ex) {
            Logger.getLogger(ConsultaCajaHist.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
    }//GEN-LAST:event_txtFisicoFocusLost

    private void txtFisicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFisicoActionPerformed
        if (txtFisico.getText().trim().isEmpty()){
            return;
        } // end if
        
        try {
            txtFisico.setText(Ut.fDecimal(txtFisico.getText().trim(), "#,##0.00"));
        } catch (Exception ex) {
            Logger.getLogger(ConsultaCajaHist.class.getName()).log(Level.SEVERE, null, ex);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
        
        txtFisico.transferFocus();
    }//GEN-LAST:event_txtFisicoActionPerformed

    private void btnTransaccionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTransaccionesActionPerformed
        /*
        Parámetros: idCaja, Conexión, tablaHistorica, fecha1, fecha2
        */
        int index = this.cboFechas.getSelectedIndex();
        
        if (index < 0){
            return;
        } // end if
        
        ConsultaTransaccionesCaja.main(
                Integer.parseInt(this.txtIdcaja.getText().trim()), 
                conn, true,
                this.aCaja[index].getFechaInicio(),
                this.aCaja[index].getFechaFinal());
    }//GEN-LAST:event_btnTransaccionesActionPerformed

    private void cboFechasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboFechasActionPerformed
        /*
         * Buscar la fecha inicial del rango en el arreglo y desplegar los datos.
         * No se requiere hacer una búsqueda ya que tanto el combo como el arrreglo
         * se cargaron simultáneamente; en el mismo orden y de la misma fuente.
         */
        int index = this.cboFechas.getSelectedIndex();
        
        if (index < 0){
            return;
        } // end if
        try{
            this.txtDescripcion.setText(aCaja[index].getDescripcion());
            txtUser.setText(aCaja[index].getUser());
            txtEfectivo.setText(fDecimal(aCaja[index].getEfectivo()+"", "#,##0.00"));
            txtSaldoInicial.setText(Ut.fDecimal(aCaja[index].getSaldoinicial()+"", "#,##0.00"));
            txtDepositos.setText(Ut.fDecimal(aCaja[index].getDepositos()+"", "#,##0.00"));
            txtRetiros.setText(Ut.fDecimal(aCaja[index].getRetiros()+"", "#,##0.00"));
            txtSaldoFinal.setText(Ut.fDecimal(aCaja[index].getSaldoactual()+"", "#,##0.00"));
            txtFisico.setText(Ut.fDecimal(aCaja[index].getFisico()+"", "#,##0.00"));
            txtDif.setText(Ut.fDecimal(
                    (aCaja[index].getFisico() - aCaja[index].getSaldoactual()) + "", "#,##0.00"));
            loadRecord();
        } catch (Exception ex){
            Logger.getLogger(ConsultaCajaHist.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
        
    }//GEN-LAST:event_cboFechasActionPerformed

    private void btnAnularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnularActionPerformed
        /*
        ALGORITMO:
        1.  Validar que el cierre seleccionado sea el último.
        2.  Actualizar la tabla caja con los datos de hcaja.
        3.  Eliminar el registro de la tabla hcaja.
        4.  Trasladar los registros de la tabla hcatransa a catransa
            para el usuario, caja y fecha específicos.
        5.  Eliminar los registros de la tabla hcatransa.
        6.  Eliminar el último registro de desgloce de moneda.
        */
        
        String sqlSent;
        PreparedStatement ps;
        ResultSet rs;
        boolean confirmar = true;
        int idCaja;
        int index = this.cboFechas.getSelectedIndex();
        
        // VALIDACIONES
        if (index < 0){
            JOptionPane.showMessageDialog(null, 
                    "No ha elegido el rango de fechas.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            this.cboFechas.requestFocusInWindow();
            return;
        } // end if
        
        // Validar que sea el último cierre.
        sqlSent = "Select max(fechainicio) FROM hcaja where idcaja = ?";
        try {
            idCaja = Integer.parseInt(this.txtIdcaja.getText().trim());
            ps = conn.prepareStatement(sqlSent,
                    ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ps.setInt(1, idCaja);
            rs = CMD.select(ps);
            if (!rs.first()){
                JOptionPane.showMessageDialog(null, 
                        "No se encontró el cierre a anular.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                ps.close();
                return;
            } // end if
            
            if (rs.getDate(1).compareTo(aCaja[index].getFechaInicio()) != 0){
                JOptionPane.showMessageDialog(null, 
                        "Solo puede anular el último cierre.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                ps.close();
                return;
            } // end if
        } catch (NumberFormatException | SQLException ex) {
            Logger.getLogger(ConsultaCajaHist.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return;
        } // end try-catch
        // FIN VALIDACIONES
        
        int resp = 
                JOptionPane.showConfirmDialog(null, 
                "¿Realmente desea anular este cierre?", 
                "Confirme..", 
                JOptionPane.YES_NO_OPTION);
        if (resp != JOptionPane.YES_OPTION){
            return;
        } // end if
        
        
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        
        // Actualizar la tabla caja con los datos de hcaja.
        try {
            // Inicia la transacción
            CMD.transaction(conn, CMD.START_TRANSACTION);
        } catch (SQLException ex) {
            Logger.getLogger(ConsultaCajaHist.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            this.setCursor(null);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return;
        } // end try-catch
        
        sqlSent =
                "Update caja, hcaja " +
                "	Set caja.saldoinicial    = hcaja.saldoinicial, " +
                "		caja.depositos   = hcaja.depositos,    " +
                "		caja.retiros     = hcaja.retiros,      " +
                "		caja.saldoactual = hcaja.saldoactual,  " +
                "		caja.fechainicio = hcaja.fechainicio,  " +
                "		caja.fechafinal  = null, " +
                "		caja.bloqueada   = 'S',  " +
                "		caja.cerrada     = 'N'   " +
                "Where caja.idcaja = ? " +
                "and hcaja.idcaja = caja.idcaja " +
                "and hcaja.fechainicio = ?";
        try {
            ps = conn.prepareStatement(sqlSent);
            ps.setInt(1, idCaja);
            ps.setDate(2, aCaja[index].getFechaInicio());
            if (CMD.update(ps) != 1){
                confirmar = false;
                JOptionPane.showMessageDialog(null, 
                        "El número de registros actualizados no es el esperado.\n" +
                        "Anulación revertida.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            } // end if
            ps.close();
            
        } catch (SQLException ex) {
            Logger.getLogger(ConsultaCajaHist.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            confirmar = false;
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
        
        if (!confirmar){
            try {
                CMD.transaction(conn, CMD.ROLLBACK);
            } catch (SQLException ex) {
                Logger.getLogger(ConsultaCajaHist.class.getName()).log(Level.SEVERE, null, ex);
                new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            }
            this.setCursor(null);
            return;
        } // end if
        
        // Eliminar el registro de la tabla hcaja.
        sqlSent = "Delete from hcaja where idcaja = ? and fechainicio = ?";
        try {
            ps = conn.prepareStatement(sqlSent);
            ps.setInt(1, idCaja);
            ps.setDate(2, aCaja[index].getFechaInicio());
            CMD.update(ps);
            // Aquí no se validan los registros eliminados ya que en el update
            // de arriba ya se hizo.
            ps.close();
        } catch (SQLException ex) {
            Logger.getLogger(ConsultaCajaHist.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            confirmar = false;
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
            
        if (!confirmar){
            try {
                CMD.transaction(conn, CMD.ROLLBACK);
            } catch (SQLException ex) {
                Logger.getLogger(ConsultaCajaHist.class.getName()).log(Level.SEVERE, null, ex);
                new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            }
            this.setCursor(null);
            return;
        } // end if
        
        // Trasladar los registros de la tabla hcatransa a catransa
        // para el usuario, caja y fecha.
        sqlSent = 
                "INSERT INTO `catransa` " +
                "	(`recnume`,     " +
                "	`documento`,    " +
                "	`tipomov`,      " +
                "	`monto`,        " +
                "	`fecha`,        " +
                "	`cedula`,       " +
                "	`nombre`,       " +
                "	`tipopago`,     " +
                "	`referencia`,   " +
                "	`idcaja`, " +
                "	`cajero`, " +
                "	`modulo`, " +
                "	`tipodoc`, " +
                "	`idbanco`, " +
                "	`idtarjeta`) " +
                "Select  " +
                "	`recnume`, " +
                "	`documento`, " +
                "	`tipomov`, " +
                "	`monto`, " +
                "	`fecha`, " +
                "	`cedula`,  " +
                "	`nombre`, " +
                "	`tipopago`, " +
                "	`referencia`, " +
                "	`idcaja`, " +
                "	`cajero`, " +
                "	`modulo`, " +
                "	`tipodoc`, " +
                "	`idbanco`, " +
                "	`idtarjeta` " +
                "from `hcatransa` " +
                "where idcaja = ? " +
                "and cajero   = ? " +
                "and fecha    = ?";
        
        try {
            String sqlSent2 = 
                    "Select max(h.fecha) from hcatransa h " +
                    "Where h.idcaja = ? " +
                    "and h.cajero = ?";
            ps = conn.prepareStatement(sqlSent2, 
                    ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ps.setInt(1, idCaja);
            ps.setString(2, aCaja[index].getUser());
            rs = CMD.select(ps);
            rs.first();
            java.sql.Date fecha = rs.getDate(1);
            ps.close();
            
            // Este update puede tardar un poco, es mejor poner un reloj
            // de arena en la interfaz
            ps = conn.prepareStatement(sqlSent);
            ps.setInt(1, idCaja);
            ps.setString(2, aCaja[index].getUser());
            ps.setDate(3, fecha);
            int reg = CMD.update(ps);
            ps.close();
            
            // Eliminarlos los registros.
            sqlSent = 
                    "Delete from `hcatransa` " +
                    "where idcaja = ? " +
                    "and cajero   = ? " +
                    "and fecha    = ?";
            ps = conn.prepareStatement(sqlSent);
            ps.setInt(1, idCaja);
            ps.setString(2, aCaja[index].getUser());
            ps.setDate(3, fecha);
            reg = CMD.update(ps);
            ps.close();
        } catch (Exception ex) {
            Logger.getLogger(ConsultaCajaHist.class.getName()).log(Level.SEVERE, null, ex);
            confirmar = false;
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
        
        if (!confirmar){
            try {
                CMD.transaction(conn, CMD.ROLLBACK);
            } catch (SQLException ex) {
                Logger.getLogger(ConsultaCajaHist.class.getName()).log(Level.SEVERE, null, ex);
                new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            }
            this.setCursor(null);
            return;
        } // end if
        
        // Eliminar el último registro de desgloce de moneda
        sqlSent =
                "Delete FROM cadesglocem2 " +
                "where idcaja = ? " +
                "and fechaci = ?";
        try {
            String sqlSent2 = 
                    "Select max(fechaci) " +
                    "FROM cadesglocem2   " +
                    "Where idcaja = ?";
            ps = conn.prepareStatement(sqlSent2);
            ps.setInt(1, idCaja);
            rs = CMD.select(ps);
            rs.first();
            java.sql.Timestamp fecha = rs.getTimestamp(1);
            ps.close();
            
            ps = conn.prepareStatement(sqlSent);
            ps.setInt(1, idCaja);
            ps.setTimestamp(2, fecha);
            int reg = CMD.update(ps);
            ps.close();
        } catch (SQLException ex) {
            Logger.getLogger(ConsultaCajaHist.class.getName()).log(Level.SEVERE, null, ex);
            confirmar = false;
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
            
        
        try {
            if (confirmar){
                CMD.transaction(conn, CMD.COMMIT);
            } else{
                CMD.transaction(conn, CMD.ROLLBACK);
                this.setCursor(null);
                return;
            } // end if-else
        } catch (SQLException ex) {
            Logger.getLogger(ConsultaCajaHist.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(null, 
                    "El sistema se cerrará para proteger la integridad de los datos",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            System.exit(1);
            return;
        } // end try-catch
        
        this.setCursor(null);
        
        JOptionPane.showMessageDialog(null, 
                "Cierre de caja revertido exitosamente",
                "Mensaje",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnAnularActionPerformed

    

    /**
     * @param c
    */
    public static void main(Connection c) {
        try {
            if (!UtilBD.tienePermiso(c,"ConsultaCajaHist")){
                JOptionPane.showMessageDialog(null,
                        "Usted no está autorizado para ejecutar este proceso",
                        "Error - Permisos",
                        JOptionPane.ERROR_MESSAGE);
                return;
            } // end if
        } catch (Exception ex) {
            Logger.getLogger(ConsultaCajaHist.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            ConsultaCajaHist run = new ConsultaCajaHist(c);
            run.setVisible(true);
        } catch (SQLException | SQLInjectionException | EmptyDataSourceException ex) {
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnular;
    private javax.swing.JButton btnTransacciones;
    private javax.swing.JComboBox<String> cboFechas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblFamilia;
    private javax.swing.JLabel lblFisico;
    private javax.swing.JLabel lblResultadoFormula;
    private javax.swing.JMenu mnuArchivo;
    private javax.swing.JMenuItem mnuBuscar;
    private javax.swing.JMenu mnuEdicion;
    private javax.swing.JMenuItem mnuSalir;
    private javax.swing.JPanel panBilletes;
    private javax.swing.JPanel panMonedas;
    private javax.swing.JTextArea txaFormula;
    private javax.swing.JFormattedTextField txt10;
    private javax.swing.JFormattedTextField txt100;
    private javax.swing.JFormattedTextField txt1000;
    private javax.swing.JFormattedTextField txt10000;
    private javax.swing.JFormattedTextField txt2000;
    private javax.swing.JFormattedTextField txt20000;
    private javax.swing.JFormattedTextField txt25;
    private javax.swing.JFormattedTextField txt5;
    private javax.swing.JFormattedTextField txt50;
    private javax.swing.JFormattedTextField txt500;
    private javax.swing.JFormattedTextField txt5000;
    private javax.swing.JFormattedTextField txt50000;
    private javax.swing.JTextField txtDepositos;
    private javax.swing.JFormattedTextField txtDescripcion;
    private javax.swing.JTextField txtDif;
    private javax.swing.JTextField txtEfectivo;
    private javax.swing.JTextField txtFisico;
    private javax.swing.JFormattedTextField txtIdcaja;
    private javax.swing.JTextField txtRetiros;
    private javax.swing.JTextField txtSaldoFinal;
    private javax.swing.JTextField txtSaldoInicial;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables

    

    /*
    Este método carga todos los registros existentes en la tabla histórica de
    cajas y luego el usuario elije el periodo que desea visualizar en el combo
    de fechas.
    El método también carga todas las fechas en el combo de fechas que será la
    llave para realizar las búsquedas en el arreglo.
    */
    private void loadData() {
        PreparedStatement ps;
        ResultSet rs;
        int idcaja;
        String sqlSent = "Select * from hcaja Where idcaja = ?";
        
        // Si el combo tiene algún item debe eliminarse porque a lo largo de
        // este método se irá llenando.
        this.cboFechas.removeAllItems();
        
        // Limpiar todos los campos
        this.txtDepositos.setText("0.00");
        this.txtDescripcion.setText("");
        this.txtDif.setText("0.00");
        this.txtEfectivo.setText("0.00");
        this.txtFisico.setText("0.00");
        this.txtRetiros.setText("0.00");
        this.txtSaldoFinal.setText("0.00");
        this.txtSaldoInicial.setText("0.00");
        this.txtUser.setText("");
        
        try {
            idcaja = Integer.parseInt(this.txtIdcaja.getText().trim());
            
            ps = conn.prepareStatement(sqlSent, 
                    ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ps.setInt(1, idcaja);
            rs = CMD.select(ps);
            if (rs == null || !rs.first()){
                ps.close();
                return;
            } // end if
            
            // Determinar el tamaño del RS para crear el arreglo.
            rs.last();
            aCaja = new STRcaja[rs.getRow()];
            
            // Cargar el arreglo con los valores del RS
            for (int i = 0; i < aCaja.length; i++){
                rs.absolute(i+1);
                aCaja[i] = new STRcaja();
                aCaja[i].setIdcaja(rs.getInt("idcaja"));
                aCaja[i].setDescripcion(rs.getString("descripcion"));
                aCaja[i].setSaldoinicial(rs.getDouble("saldoinicial"));
                aCaja[i].setDepositos(rs.getDouble("depositos"));
                aCaja[i].setRetiros(rs.getDouble("retiros"));
                aCaja[i].setSaldoactual(rs.getDouble("saldoactual"));
                aCaja[i].setFechaInicio(rs.getDate("fechainicio"));
                aCaja[i].setFechaFinal(rs.getDate("fechafinal"));
                aCaja[i].setFisico(rs.getDouble("fisico"));
                aCaja[i].setUser(rs.getString("user"));
                aCaja[i].setEfectivo(rs.getDouble("efectivo"));
                
                this.cboFechas.addItem(
                        Ut.dtoc(rs.getDate("fechainicio")) + " : " + Ut.dtoc(rs.getDate("fechafinal")));
            } // end for
            ps.close();
            
            // Cargar el desgloce de moneda
            this.loadRecord();
        } catch (NumberFormatException | SQLException ex) {
            Logger.getLogger(ConsultaCajaHist.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
    }

    /**
     * Este método, en la teoría, hace el mismo cálculo que el método showData
     * pero en la práctica es ligeramente distinto ya que el cálculo se realiza
     * sobre los valores de los text boxes mientras que showData lo hace desde 
     * los valores de la clase Cacaja.class.  Estos valores son distintos cuando
     * el usuario ingresa el monto físico.
     * @throws ParseException 
     */
    public void calcularDiferencia() throws Exception {
        double saldo, fisico, dif;
        saldo = Double.parseDouble(
                Ut.quitarFormato(this.txtSaldoFinal.getText().trim()));
        fisico = Double.parseDouble(
                Ut.quitarFormato(this.txtFisico.getText().trim()));
        dif = fisico - saldo;
        this.txtDif.setText(Ut.fDecimal(dif+"", "#,##0.00"));
    } // end calcularDiferencia
    
    public void refresh(){
        this.txtIdcajaFocusLost(null);
    }
    
    
    private void loadRecord(){
        /*
        Parámetros: idCaja, Conexión, tablaHistorica, fecha1, fecha2
        */
        int index = this.cboFechas.getSelectedIndex();
        
        if (index < 0){
            return;
        } // end if
        Date fechaInicio = this.aCaja[index].getFechaInicio();
        Date tempDate  = this.aCaja[index].getFechaFinal();
        
        
        Calendar cal = GregorianCalendar.getInstance();
        cal.setTime(tempDate);
        cal.add(Calendar.HOUR, 23);
        cal.add(Calendar.MINUTE, 59);
        cal.add(Calendar.SECOND, 59);
        tempDate.setTime(cal.getTimeInMillis());
        java.sql.Timestamp fechaFinal = new java.sql.Timestamp(cal.getTimeInMillis());
        
        String sqlSent = 
                "Select * from cadesglocem2 " +
                "Where idcaja = ? and cerrada = 'S' " +
                "and fechaci between ? and ?";
        PreparedStatement ps;
        ResultSet rs;
        int idcaja = Integer.parseInt(this.txtIdcaja.getText().trim());
        try {
            ps = conn.prepareStatement(sqlSent, 
                    ResultSet.TYPE_SCROLL_SENSITIVE, 
                    ResultSet.CONCUR_READ_ONLY);
            ps.setInt(1, idcaja);
            ps.setDate(2, fechaInicio);
            ps.setTimestamp(3, fechaFinal);
            rs = CMD.select(ps);
            
            if (rs == null || !rs.first()){
                ps.close();
                return;
            } // end if
            
            rs.beforeFirst();
            while(rs.next()){
                this.txt50000.setText(rs.getString("b50000"));
                this.txt20000.setText(rs.getString("b20000"));
                this.txt10000.setText(rs.getString("b10000"));
                this.txt5000.setText(rs.getString("b5000"));
                this.txt2000.setText(rs.getString("b2000"));
                this.txt1000.setText(rs.getString("b1000"));
                this.txt500.setText(rs.getString("m500"));
                this.txt100.setText(rs.getString("m100"));
                this.txt50.setText(rs.getString("m50"));
                this.txt25.setText(rs.getString("m25"));
                this.txt10.setText(rs.getString("m10"));
                this.txt5.setText(rs.getString("m5"));
                this.txaFormula.setText(rs.getString("formula"));
                this.lblResultadoFormula.setText(Ut.fDecimal(rs.getString("total"), "#,##0.00"));
            } // end while
            
            ps.close();
            
            calcular();
        } catch (Exception ex) {
            Logger.getLogger(ConsultaCajaHist.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
        
    } // end loadRecord
    
    
    private void calcular() throws Exception {
        double b50000, b20000, b10000, b5000, b2000, b1000;
        double m500,   m100,   m50,    m25,   m10,   m5;
        double formula;
        b50000 = Double.parseDouble(
                Ut.quitarFormato(this.txt50000.getText().trim()));
        b20000 = Double.parseDouble(
                Ut.quitarFormato(this.txt20000.getText().trim()));
        b10000 = Double.parseDouble(
                Ut.quitarFormato(this.txt10000.getText().trim()));
        b5000 = Double.parseDouble(
                Ut.quitarFormato(this.txt5000.getText().trim()));
        b2000 = Double.parseDouble(
                Ut.quitarFormato(this.txt2000.getText().trim()));
        b1000 = Double.parseDouble(
                Ut.quitarFormato(this.txt1000.getText().trim()));

        m500 = Double.parseDouble(
                Ut.quitarFormato(this.txt500.getText().trim()));
        m100 = Double.parseDouble(
                Ut.quitarFormato(this.txt100.getText().trim()));
        m50 = Double.parseDouble(
                Ut.quitarFormato(this.txt50.getText().trim()));
        m25 = Double.parseDouble(
                Ut.quitarFormato(this.txt25.getText().trim()));
        m10 = Double.parseDouble(
                Ut.quitarFormato(this.txt10.getText().trim()));
        m5 = Double.parseDouble(
                Ut.quitarFormato(this.txt5.getText().trim()));
        formula = Double.parseDouble(
                Ut.quitarFormato(this.lblResultadoFormula.getText().trim()));

        
        String text = txaFormula.getText().trim();
        
        this.lblResultadoFormula.setText("0.00");
        
        // Si la fórmula está en blanco no hay nada que calcular
        if (text.trim().isEmpty()){
            return;
        }
        
        String[] formula2;
        
        if (text.contains("+")) {
            text = text.replace("+", "@");
            formula2 = text.split("@");
        } else {
            formula2 = new String[1];
            formula2[0] = text;
        }

        double resultado = 0.00;

        for (String number:formula2){
            resultado += Double.parseDouble(number);
        } // end for
        
        this.lblResultadoFormula.setText(Ut.fDecimal(resultado + "", "#,##0.00"));
        
    } // end calcular
} // end class
