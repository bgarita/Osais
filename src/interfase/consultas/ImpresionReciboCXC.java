/*
 * ImpresionReciboCXC.java
 *
 * Created on 30/01/2010, 08:35:04 PM
 */
package interfase.consultas;

import Mail.Bitacora;
import interfase.reportes.Reportes;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;

/**
 *
 * @author Bosco
 */
@SuppressWarnings("serial")
public class ImpresionReciboCXC extends java.awt.Dialog {

    private Connection conn;  // Conexión a la base de datos
    private Statement stat;
    String documento;         // Aquí estará el recibo pasado por parámetro
    private ResultSet rs = null;  // Uso general
    private Bitacora b = new Bitacora();

    public ImpresionReciboCXC(
            java.awt.Frame parent,
            boolean modal,
            Connection c,
            String recnume) {

        super(parent, modal);
        initComponents();

        b.setLogLevel(Bitacora.ERROR);
        conn = c;
        documento = recnume.trim();

        try {
            stat = conn.createStatement(
                    ResultSet.TYPE_SCROLL_SENSITIVE,
                    ResultSet.CONCUR_READ_ONLY);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }

        // Si el número de documento recibido es un cero entonces habilito
        // el campo para que el usuario pueda digitar un número.
        txtRecnume.setEnabled(Integer.parseInt(documento) == 0);

        txtRecnume.setText(documento);

        // Si el campo está habilitado le pongo el focus...
        if (txtRecnume.isEnabled()) {
            txtRecnume.requestFocusInWindow();
        } else { // ... caso contrario ejecuto el evento que busca el recibo
            txtRecnumeFocusLost(null);
            cmdImprimir.requestFocusInWindow();
        } // end if
    } // end constructor

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmdImprimir = new javax.swing.JButton();
        cmdSalir = new javax.swing.JButton();
        txtRecnume = new javax.swing.JFormattedTextField();
        lblClidesc = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        chkExportToPDF = new javax.swing.JCheckBox();

        setAlwaysOnTop(true);
        setIconImage(null);
        setModalityType(java.awt.Dialog.ModalityType.DOCUMENT_MODAL);
        setTitle("Imprimir recibos");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        cmdImprimir.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmdImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZPRINT.png"))); // NOI18N
        cmdImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdImprimirActionPerformed(evt);
            }
        });
        cmdImprimir.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmdImprimirKeyPressed(evt);
            }
        });

        cmdSalir.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmdSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/control-power.png"))); // NOI18N
        cmdSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSalirActionPerformed(evt);
            }
        });

        txtRecnume.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txtRecnume.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtRecnume.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRecnumeActionPerformed(evt);
            }
        });
        txtRecnume.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRecnumeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtRecnumeFocusLost(evt);
            }
        });

        lblClidesc.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblClidesc.setForeground(new java.awt.Color(0, 51, 255));
        lblClidesc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblClidesc.setText("  ");
        lblClidesc.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Número de recibo");

        chkExportToPDF.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        chkExportToPDF.setText("Exportar a PDF");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtRecnume, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49))
                    .addComponent(lblClidesc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkExportToPDF)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmdImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmdSalir)))
                .addGap(67, 67, 67))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cmdImprimir, cmdSalir});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRecnume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblClidesc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(chkExportToPDF)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(cmdSalir)
                    .addComponent(cmdImprimir))
                .addGap(4, 4, 4))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cmdImprimir, cmdSalir});

        setSize(new java.awt.Dimension(294, 254));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private void cmdImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdImprimirActionPerformed
        if (!validarImpresion()) {
            return;
        } // end if

        this.setAlwaysOnTop(false);

        // Proceso de impresión.
        Reportes rpt = new Reportes(this.conn);
        rpt.setExportToPDF(this.chkExportToPDF.isSelected());
        rpt.imprimirReciboCXC(Integer.parseInt(documento));

        this.setAlwaysOnTop(true);
    }//GEN-LAST:event_cmdImprimirActionPerformed

    private void cmdSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSalirActionPerformed
        dispose();
    }//GEN-LAST:event_cmdSalirActionPerformed
    /**
     * Búsqueda del recibo y despliegue del cleinte Si el campo txtFacnume tiene
     * un cero no se ejecuta
     *
     * @param evt
     */
    private void txtRecnumeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRecnumeFocusLost
        // El usuario puede digitar el número de NC positivo.  Aquí se corrige.
        documento = txtRecnume.getText().trim();

        // Cambio este parámetro para que la ventana no tape los mensajes
        this.setAlwaysOnTop(false);

        String sqlSelect
                = "Select clidesc "
                + "from pagos "
                + "Inner join inclient on pagos.clicode = inclient.clicode "
                + "Where recnume = " + documento;
        try {
            rs = stat.executeQuery(sqlSelect);
            if (rs != null && rs.first()) {
                lblClidesc.setText(rs.getString("clidesc"));
            } else {
                lblClidesc.setText("");
                JOptionPane.showMessageDialog(
                        null,
                        "Recibo no existe.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            } // end if
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            lblClidesc.setText("");
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } finally {
            this.setAlwaysOnTop(true);
        }
    }//GEN-LAST:event_txtRecnumeFocusLost

    private void txtRecnumeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRecnumeActionPerformed
        // Esto provoca que se ejecute el FocusLost en txtFacnume
        txtRecnume.transferFocus();
    }//GEN-LAST:event_txtRecnumeActionPerformed

    private void txtRecnumeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRecnumeFocusGained
        txtRecnume.selectAll();
    }//GEN-LAST:event_txtRecnumeFocusGained

    private void cmdImprimirKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmdImprimirKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            cmdImprimirActionPerformed(null);
        }
    }//GEN-LAST:event_cmdImprimirKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkExportToPDF;
    private javax.swing.JButton cmdImprimir;
    private javax.swing.JButton cmdSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblClidesc;
    private javax.swing.JFormattedTextField txtRecnume;
    // End of variables declaration//GEN-END:variables

    private boolean validarImpresion() {
        boolean todoCorrecto = true;
        this.setAlwaysOnTop(false);
        // Si la etiqueta que despliega el nombre del cliente está
        // vacía significa que el documento digitado no es válido.
        if (this.lblClidesc.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,
                    "Número de recibo no válido.");
            txtRecnume.requestFocusInWindow();
            this.setAlwaysOnTop(true);
            return false;
        } // end if

        this.setAlwaysOnTop(true);
        return todoCorrecto;
    } // end validarImpresion
}
