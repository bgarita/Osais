package interfase.consultas;

import Exceptions.EmptyDataSourceException;
import Exceptions.NotUniqueValueException;
import Mail.Bitacora;
import accesoDatos.CMD;
import accesoDatos.UtilBD;
import java.awt.Color;
import java.awt.Cursor;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import logica.utilitarios.FormatoTabla;
import logica.utilitarios.Ut;

/**
 *
 * @author bosco
 */
public class ConsultaTransaccionesCaja extends javax.swing.JFrame {
    private static final long serialVersionUID = 3L;
    Connection conn;
    boolean inicio;
    private FormatoTabla formato;
    private boolean tablaHistorica;
    private String tabla;
    private Date fecha1;
    private Date fecha2;
    private Bitacora b = new Bitacora();
    
    /**
     * Creates new form ConsultaTransaccionesCaja
     * @param nIdcaja
     * @param c
     * @param hist
     * @param fecha1
     * @param fecha2
     */
    public ConsultaTransaccionesCaja(int nIdcaja, Connection c, boolean hist, Date fecha1, Date fecha2) {
        b.setLogLevel(Bitacora.ERROR);
        inicio = true;
        initComponents();
        this.conn = c;
        this.tablaHistorica = hist;
        tabla = hist ? "hcatransa":"catransa";
        this.fecha1 = fecha1;
        this.fecha2 = fecha2;
        
        loadTil();              // Cargar el combo de cajas
        
        this.cboCaja.setSelectedIndex(0);
        
        if (nIdcaja != 0){
            for (int i = 0; i < this.cboCaja.getItemCount(); i++){
                if (Ut.getNumericCode(this.cboCaja.getItemAt(i), "-") == nIdcaja){
                    this.cboCaja.setSelectedIndex(i);
                    break;
                } // end if
            } // end if
        } // end if
        
        inicio = false;
        
        formato = new FormatoTabla();
        try {
            formato.formatColumn(tblTrans, 3, FormatoTabla.H_RIGHT, Color.BLUE);
        } catch (Exception ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
        this.cboCajaActionPerformed(null);
        
    } // end constructor

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblTrans = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        cboTipomov = new javax.swing.JComboBox<String>();
        jLabel2 = new javax.swing.JLabel();
        cboTipopago = new javax.swing.JComboBox<String>();
        cboCaja = new javax.swing.JComboBox<String>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblTotalDep = new javax.swing.JLabel();
        lblTotalRet = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblBalance = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Transacciones de caja");

        tblTrans.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Recibo", "Tipo Mov", "Fecha", "Monto", "Nombre", "Cajero", "Forma Pag", "Docum", "Tipo Doc", "Origen"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblTrans.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblTransMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tblTransMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tblTransMouseEntered(evt);
            }
        });
        jScrollPane1.setViewportView(tblTrans);
        if (tblTrans.getColumnModel().getColumnCount() > 0) {
            tblTrans.getColumnModel().getColumn(0).setMinWidth(60);
            tblTrans.getColumnModel().getColumn(0).setPreferredWidth(70);
            tblTrans.getColumnModel().getColumn(0).setMaxWidth(100);
            tblTrans.getColumnModel().getColumn(1).setMinWidth(75);
            tblTrans.getColumnModel().getColumn(1).setPreferredWidth(80);
            tblTrans.getColumnModel().getColumn(1).setMaxWidth(110);
            tblTrans.getColumnModel().getColumn(2).setMinWidth(70);
            tblTrans.getColumnModel().getColumn(2).setPreferredWidth(82);
            tblTrans.getColumnModel().getColumn(2).setMaxWidth(120);
            tblTrans.getColumnModel().getColumn(3).setMinWidth(80);
            tblTrans.getColumnModel().getColumn(3).setPreferredWidth(100);
            tblTrans.getColumnModel().getColumn(3).setMaxWidth(150);
            tblTrans.getColumnModel().getColumn(4).setMinWidth(120);
            tblTrans.getColumnModel().getColumn(4).setPreferredWidth(140);
            tblTrans.getColumnModel().getColumn(4).setMaxWidth(200);
            tblTrans.getColumnModel().getColumn(5).setMinWidth(75);
            tblTrans.getColumnModel().getColumn(5).setPreferredWidth(80);
            tblTrans.getColumnModel().getColumn(5).setMaxWidth(150);
            tblTrans.getColumnModel().getColumn(6).setMinWidth(90);
            tblTrans.getColumnModel().getColumn(6).setPreferredWidth(100);
            tblTrans.getColumnModel().getColumn(6).setMaxWidth(120);
            tblTrans.getColumnModel().getColumn(7).setMinWidth(70);
            tblTrans.getColumnModel().getColumn(7).setPreferredWidth(75);
            tblTrans.getColumnModel().getColumn(7).setMaxWidth(125);
            tblTrans.getColumnModel().getColumn(8).setMinWidth(60);
            tblTrans.getColumnModel().getColumn(8).setPreferredWidth(70);
            tblTrans.getColumnModel().getColumn(8).setMaxWidth(100);
            tblTrans.getColumnModel().getColumn(9).setMinWidth(60);
            tblTrans.getColumnModel().getColumn(9).setPreferredWidth(70);
            tblTrans.getColumnModel().getColumn(9).setMaxWidth(100);
        }

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel1.setText("Tipo movimiento:");

        cboTipomov.setFont(new java.awt.Font("Ubuntu", 0, 15)); // NOI18N
        cboTipomov.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todos", "Depósitos", "Retiros" }));
        cboTipomov.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTipomovActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel2.setText("Forma pago:");

        cboTipopago.setFont(new java.awt.Font("Ubuntu", 0, 15)); // NOI18N
        cboTipopago.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todos", "Efectivo", "Cheque", "Tarjeta", "Transferencia" }));
        cboTipopago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTipopagoActionPerformed(evt);
            }
        });

        cboCaja.setFont(new java.awt.Font("Ubuntu", 0, 15)); // NOI18N
        cboCaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboCajaActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel3.setText("Caja");

        jLabel4.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel4.setText("Total depósitos:");

        jLabel5.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel5.setText("Total retiros:");

        lblTotalDep.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        lblTotalDep.setForeground(new java.awt.Color(58, 15, 243));
        lblTotalDep.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblTotalDep.setText("0");

        lblTotalRet.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        lblTotalRet.setForeground(new java.awt.Color(58, 15, 243));
        lblTotalRet.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblTotalRet.setText("0");

        jLabel6.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel6.setText("Balance:");

        lblBalance.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        lblBalance.setForeground(new java.awt.Color(58, 15, 243));
        lblBalance.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblBalance.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(3, 3, 3)
                        .addComponent(cboCaja, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addGap(4, 4, 4)
                        .addComponent(cboTipomov, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboTipopago, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblTotalDep, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblTotalRet, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(cboTipopago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(cboTipomov, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(cboCaja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(lblBalance))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(jLabel5)
                        .addComponent(lblTotalDep)
                        .addComponent(lblTotalRet)))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cboCajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboCajaActionPerformed
        if (inicio){
            return;
        } // end if
        loadData(Ut.getNumericCode(this.cboCaja.getSelectedItem().toString(), "-"));
    }//GEN-LAST:event_cboCajaActionPerformed

    private void cboTipomovActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTipomovActionPerformed
        cboCajaActionPerformed(evt);
    }//GEN-LAST:event_cboTipomovActionPerformed

    private void cboTipopagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTipopagoActionPerformed
        cboCajaActionPerformed(evt);
    }//GEN-LAST:event_cboTipopagoActionPerformed

    private void tblTransMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTransMouseEntered
        Cursor c = new Cursor(Cursor.HAND_CURSOR);
        this.setCursor(c);
    }//GEN-LAST:event_tblTransMouseEntered

    private void tblTransMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTransMouseExited
        this.setCursor(null);
    }//GEN-LAST:event_tblTransMouseExited

    private void tblTransMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTransMouseClicked
        int row = tblTrans.getSelectedRow();
        if (tblTrans.getValueAt(row, 0) == null){
            return;
        } // end if
        
        /*
        Verificar que tipo de documento es el que el usuario eligió.
        Dependiendo del tipo de documento se muestra una pantalla que
        muestra el detalle de ese documento.
        */
        
        int documento, recibo;
        String modulo, cedula, tipoD, sqlSent;
        
        recibo = 0;
        documento = 0;
        try {
            recibo    = Integer.parseInt(tblTrans.getValueAt(row, 0).toString());
            documento = Integer.parseInt(tblTrans.getValueAt(row, 7).toString());
        } catch(Exception ex){
            // No se requiere hacer nada cuando esto ocurra
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
        modulo    = tblTrans.getValueAt(row, 8).toString();
        tipoD     = tblTrans.getValueAt(row, 9).toString();
        
        // Si es una NC el número vendrá negativo.
        if (documento < 0){
            documento = documento *-1;
        } // end if
        
        try {
            // El valor de cedula hay que traerlo de la tabla
            cedula = UtilBD.getDBString(conn, tabla, "recnume = " + recibo, "cedula");
        } catch (NotUniqueValueException | SQLException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(), 
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return;
        } // end try-catch
        
        
        // Todavía no hay consulta de recibos de caja o de CXP
        if (modulo.equals("CX0") || modulo.equals("CAJ")){
            JOptionPane.showMessageDialog(null, 
                    "Disculpe por favor, este tipo de documento\n" +
                    "aún no se puede desplegar.  Será en versiones futuras.",
                    "Mensaje",
                    JOptionPane.INFORMATION_MESSAGE);
            return;
        } // end if
        
        // Consultar un recibo de CXC
        if (tipoD.equals("REC") && modulo.equals("CXC")){
            try {
                ConsultaRegistrosCXC run = new ConsultaRegistrosCXC(conn);
                run.setFacnume(documento + "");
                run.setTipoDoc(3);
                run.displayData();
            } catch (SQLException ex) {
                 JOptionPane.showMessageDialog(null,
                         ex.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                 b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            } // end try-catch
            return;
        } // end if
        
        String tipoDoc = "";
        switch (tipoD){
            case "FAC": tipoDoc = "1"; break;
            case "NDD": tipoDoc = "2"; break;
            case "NDC": tipoDoc = "3"; break;
        } // end switch
        
        // Concultar documentos de CXC
        if (modulo.equals("CXC")){
            
            try {
                ConsultaFactNDNC_CXC cxc =
                        new ConsultaFactNDNC_CXC(this.conn, documento+"", tipoDoc);
                cxc.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, 
                        ex.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
                return;
            }
        } // end if (modulo.equals("CXC"))
        
        
        // Concultar documentos de CXP
        if (modulo.equals("CXP")){
            try {
                ConsultaFactNDNC_CXP xcp =
                        new ConsultaFactNDNC_CXP(this.conn, documento+"", tipoDoc);
                xcp.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, 
                        ex.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            } // end try-catch
            
        } // end if (modulo.equals("CXP"))
    }//GEN-LAST:event_tblTransMouseClicked

    /**
     * @param nIdcaja
     * @param c
     * @param hist
     * @param fecha1
     * @param fecha2
     */
    public static void main(final int nIdcaja, final Connection c, final boolean hist, final Date fecha1, final Date fecha2) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConsultaTransaccionesCaja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConsultaTransaccionesCaja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConsultaTransaccionesCaja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConsultaTransaccionesCaja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ConsultaTransaccionesCaja(nIdcaja,c,hist,fecha1,fecha2).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cboCaja;
    private javax.swing.JComboBox<String> cboTipomov;
    private javax.swing.JComboBox<String> cboTipopago;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBalance;
    private javax.swing.JLabel lblTotalDep;
    private javax.swing.JLabel lblTotalRet;
    private javax.swing.JTable tblTrans;
    // End of variables declaration//GEN-END:variables

    private void loadData(int idcaja) {
        String sqlSent;
        PreparedStatement ps;
        ResultSet rs;
        
        sqlSent =
                "Select   " +
                "	Recnume, " +
                "	If(tipomov = 'D','Depósito', 'Retiro') as tipomov,   " +
                "	dtoc(fecha) as fecha,   " +
                "	monto,    " +
                "	nombre,   " +
                "	cajero,   " +
                "	Case tipopago " +
                    "		When 0 then 'Desconocido'   " +
                "		When 1 then 'Efectivo'      " +
                "		When 2 then 'Cheque'        " +
                "		When 3 then 'Tarjeta'       " +
                "		When 4 then 'Transferencia' " +
                "	End as FormaPago, " +
                "	documento, " +
                "	modulo,    " +
                "	tipodoc    " +
                "from  " + tabla + "  " +
                "Where " + tabla + ".idcaja = ? ";
        
        // Aplicar el filtro de tipo de movimiento
        if (this.cboTipomov.getSelectedItem().equals("Depósitos")){
            sqlSent += " and tipomov = 'D'";
        } if (this.cboTipomov.getSelectedItem().equals("Retiros")){
            sqlSent += " and tipomov = 'R'";
        } // end if
        
        // Tipo de pago
        switch (this.cboTipopago.getSelectedItem().toString()){
            case "Desconocido":
                sqlSent += " and tipopago = 0 "; break;
            case "Efectivo":
                sqlSent += " and tipopago = 1 "; break;
            case "Cheque":
                sqlSent += " and tipopago = 2 "; break;
            case "Tarjeta":
                sqlSent += " and tipopago = 3 "; break;
            case "Transferencia":
                sqlSent += " and tipopago = 4 "; break;
        } // end switch
        
        // Si se trata de la consulta histórica hay que filtrar el rango de fechas
        if (this.tablaHistorica){
            sqlSent += " and fecha between ? and ?";
        } // end if
        
        
        Ut.clearJTable(tblTrans);
        
        try {
            ps = conn.prepareStatement(sqlSent,
                    ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            
            ps.setInt(1, idcaja);
            if (this.tablaHistorica){
                ps.setDate(2, this.fecha1);
                ps.setDate(3, this.fecha2);
            } // end if
            
            rs = CMD.select(ps);
            
            if (rs == null || !rs.first()){
                ps.close();
                return;
            } // end if
            
            rs.last();
            
            int filas = rs.getRow() - tblTrans.getModel().getRowCount();
            String value;
            
            Ut.resizeTable(tblTrans, filas, "Filas");
            
            // Cargar la JTable con los datos
            /*
            Esta forma de cargar una tabla es la más rápida pero se necesita
            que la tabla tenga la misma cantidad de columnas que el rs y en
            el mismo orden.
            */
            for (int row = 0; row < tblTrans.getModel().getRowCount(); row++){
                rs.absolute(row+1);
                for (int column = 0; column < tblTrans.getModel().getColumnCount(); column++){
                    value = rs.getObject(column+1).toString();
                    if (column == 3){
                        value = Ut.setDecimalFormat(value, "#,##0.00");
                    } // end if
                    tblTrans.setValueAt(value, row, column);
                } // end for
            } // end for
            
            ps.close();
            
            double dep, ret;
            Number val = Ut.sum(tblTrans, 3, "Depósito", 1);
            dep = Double.parseDouble(val + "");
            this.lblTotalDep.setText(Ut.setDecimalFormat(val + "","#,##0.00"));
            val = Ut.sum(tblTrans, 3, "Retiro", 1);
            ret = Double.parseDouble(val + "");
            this.lblTotalRet.setText(Ut.setDecimalFormat(val + "","#,##0.00"));
            this.lblBalance.setText(Ut.setDecimalFormat((dep-ret) + "","#,##0.00"));
        } catch (Exception ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(), 
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
        
    } // end loadData

    /**
     * Cargar el combo de cajas
     */
    private void loadTil() {
        String sqlSent;
        PreparedStatement ps;
        ResultSet rs;
        
        sqlSent = "Select concat(idcaja,'-',descripcion) as caja from caja";
        
        try {
            ps = conn.prepareStatement(sqlSent, 
                    ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs = CMD.select(ps);
                        
            Ut.fillComboBox(cboCaja, rs, 0, false);
            
            ps.close();
        } catch (SQLException | EmptyDataSourceException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
    } // end loadTil
}
