package interfase.consultas;

import Mail.Bitacora;
import accesoDatos.CMD;
import interfase.menus.Menu;
import java.io.File;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import logica.DocumentoElectronico;
import logica.ParametrosXML;
import logica.utilitarios.Ut;
import logica.xmls.CorreoFacturaElectronica;
import logica.xmls.EnvioFacturaElectronica;
import logica.xmls.TablaFacturaElectronica;

/**
 *
 * @author bosco
 */
public class DetalleNotificacionXml extends javax.swing.JDialog {

    private static final long serialVersionUID = 41L;
    private final Connection conn;
    private Boolean destroy;
    private String query;
    private String where;
    private final Bitacora b = new Bitacora();

    private Boolean init;

    /**
     * Creates new form DetalleNotificacion
     *
     * @param parent
     * @param modal
     * @param conn Connection
     */
    public DetalleNotificacionXml(java.awt.Frame parent, boolean modal, Connection conn) {
        super(parent, modal);
        initComponents();
        this.init = true;
        this.conn = conn;
        b.setLogLevel(Bitacora.ERROR);
        setWhere();
        setQuery();
        cargarTabla();
        this.init = false;
        this.destroy = false;
    } // end constructor

    private String getCommand(int row, String accion) {

        try {
            int facnume = Integer.parseInt(String.valueOf(tblDocumentosXML.getValueAt(row, 0)));
            int facnd = Integer.parseInt(String.valueOf(tblDocumentosXML.getValueAt(row, 9)));
            DocumentoElectronico docEl = new DocumentoElectronico(facnume, facnd, "V", conn, accion); // Esto carga todos los valores de la clase ParametrosXML

            String exe = Menu.DIR.getXmls() + "\\FE2.exe";
            String cmd
                    = exe + " "
                    + ParametrosXML.xmlFileName + " "
                    + ParametrosXML.document + " "
                    + ParametrosXML.todoAction + " " // 1=Enviar, 2=Consultar
                    + ParametrosXML.documentType + " "
                    + ParametrosXML.companyHome + " "
                    + ParametrosXML.documentKey + " "
                    + ParametrosXML.ourIdType + " "
                    + ParametrosXML.supplierIdType;

            return cmd;
        } catch (NumberFormatException | SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return "";
        }

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING:
     * Do NOT modify this code. The content of this method is always regenerated by the
     * Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDocumentosXML = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txaEstado = new javax.swing.JTextArea();
        chkPendientes = new javax.swing.JCheckBox();
        chkAceptado = new javax.swing.JCheckBox();
        chkRechazado = new javax.swing.JCheckBox();
        chkError = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        chkTodos = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        radEnviarPDFyXML = new javax.swing.JRadioButton();
        radActualizarEstado = new javax.swing.JRadioButton();
        btnEjecutar = new javax.swing.JButton();
        radEnviarHacienda = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        snMeses = new com.toedter.components.JSpinField();
        lblTotalRegistros = new javax.swing.JLabel();
        chkProcesando = new javax.swing.JCheckBox();
        chkDesconocido = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        txtDocumento = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Estado de los documentos electrónicos");
        setModal(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        tblDocumentosXML.setAutoCreateRowSorter(true);
        tblDocumentosXML.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Documento", "Tipo", "XML", "Estado", "Cliente/Proveedor", "Envio", "Correo", "Destinatario", "Fecha", "facnd", "Tipo XML"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDocumentosXML.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblDocumentosXML.setColumnSelectionAllowed(true);
        tblDocumentosXML.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDocumentosXMLMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblDocumentosXML);
        tblDocumentosXML.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (tblDocumentosXML.getColumnModel().getColumnCount() > 0) {
            tblDocumentosXML.getColumnModel().getColumn(0).setMinWidth(70);
            tblDocumentosXML.getColumnModel().getColumn(0).setPreferredWidth(85);
            tblDocumentosXML.getColumnModel().getColumn(0).setMaxWidth(100);
            tblDocumentosXML.getColumnModel().getColumn(1).setMinWidth(50);
            tblDocumentosXML.getColumnModel().getColumn(1).setPreferredWidth(55);
            tblDocumentosXML.getColumnModel().getColumn(1).setMaxWidth(65);
            tblDocumentosXML.getColumnModel().getColumn(2).setMinWidth(100);
            tblDocumentosXML.getColumnModel().getColumn(2).setPreferredWidth(150);
            tblDocumentosXML.getColumnModel().getColumn(2).setMaxWidth(180);
            tblDocumentosXML.getColumnModel().getColumn(3).setMinWidth(300);
            tblDocumentosXML.getColumnModel().getColumn(3).setPreferredWidth(350);
            tblDocumentosXML.getColumnModel().getColumn(4).setMinWidth(200);
            tblDocumentosXML.getColumnModel().getColumn(4).setPreferredWidth(300);
            tblDocumentosXML.getColumnModel().getColumn(6).setPreferredWidth(60);
            tblDocumentosXML.getColumnModel().getColumn(7).setPreferredWidth(200);
            tblDocumentosXML.getColumnModel().getColumn(8).setPreferredWidth(100);
            tblDocumentosXML.getColumnModel().getColumn(9).setMinWidth(70);
            tblDocumentosXML.getColumnModel().getColumn(9).setPreferredWidth(85);
            tblDocumentosXML.getColumnModel().getColumn(9).setMaxWidth(100);
            tblDocumentosXML.getColumnModel().getColumn(10).setMinWidth(10);
            tblDocumentosXML.getColumnModel().getColumn(10).setPreferredWidth(50);
            tblDocumentosXML.getColumnModel().getColumn(10).setMaxWidth(75);
        }

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("* = Proveedor");

        txaEstado.setColumns(20);
        txaEstado.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txaEstado.setLineWrap(true);
        txaEstado.setRows(5);
        txaEstado.setWrapStyleWord(true);
        jScrollPane2.setViewportView(txaEstado);

        chkPendientes.setSelected(true);
        chkPendientes.setText("Pendientes de envío");
        chkPendientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPendientesActionPerformed(evt);
            }
        });

        chkAceptado.setText("Aceptado");
        chkAceptado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkAceptadoActionPerformed(evt);
            }
        });

        chkRechazado.setText("Rechazado");
        chkRechazado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkRechazadoActionPerformed(evt);
            }
        });

        chkError.setText("Con error");
        chkError.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkErrorActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Filtros:");

        chkTodos.setText("Todos");
        chkTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkTodosActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Acciones"));

        buttonGroup1.add(radEnviarPDFyXML);
        radEnviarPDFyXML.setSelected(true);
        radEnviarPDFyXML.setText("Enviar PDF y XML al cliente");

        buttonGroup1.add(radActualizarEstado);
        radActualizarEstado.setText("Actualizar estado");

        btnEjecutar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnEjecutar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/38.png"))); // NOI18N
        btnEjecutar.setText("Ejecutar acción");
        btnEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEjecutarActionPerformed(evt);
            }
        });

        buttonGroup1.add(radEnviarHacienda);
        radEnviarHacienda.setText("Enviar a Hacienda");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(radActualizarEstado)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                        .addComponent(btnEjecutar))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radEnviarPDFyXML)
                            .addComponent(radEnviarHacienda))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(radEnviarPDFyXML)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radActualizarEstado)
                    .addComponent(btnEjecutar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radEnviarHacienda)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Meses");

        snMeses.setToolTipText("Meses hacia atrás");
        snMeses.setMinimum(1);
        snMeses.setValue(3);
        snMeses.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                snMesesPropertyChange(evt);
            }
        });

        lblTotalRegistros.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblTotalRegistros.setForeground(java.awt.Color.blue);
        lblTotalRegistros.setText("Total registros: ");

        chkProcesando.setText("Procesando");
        chkProcesando.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkProcesandoActionPerformed(evt);
            }
        });

        chkDesconocido.setText("Desconocido");
        chkDesconocido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkDesconocidoActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Buscar documento");

        txtDocumento.setColumns(12);
        txtDocumento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txtDocumento.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDocumentoFocusGained(evt);
            }
        });
        txtDocumento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDocumentoActionPerformed(evt);
            }
        });
        txtDocumento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDocumentoKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addComponent(lblTotalRegistros)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 836, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chkPendientes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkProcesando)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chkAceptado)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkRechazado)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkError)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkDesconocido)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkTodos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(snMeses, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(chkPendientes)
                    .addComponent(chkAceptado)
                    .addComponent(chkRechazado)
                    .addComponent(chkError)
                    .addComponent(chkTodos)
                    .addComponent(jLabel3)
                    .addComponent(snMeses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkProcesando)
                    .addComponent(chkDesconocido)
                    .addComponent(jLabel4)
                    .addComponent(txtDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(30, 30, 30)
                        .addComponent(lblTotalRegistros))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jScrollPane1, jScrollPane2});

        setSize(new java.awt.Dimension(1128, 645));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.destroy = true;
        // Marcar los registros como informados y actualizo cualquier variación en
        // la tabla.  Esto se hace para cuando se usa esta pantalla para hacer los 
        // envíos o consultas.
        String sqlSent
                = "Update faestadoDocElect "
                + "     Set informado = 'S', fecha = now() "
                + "Where facnume = ? "
                + "and facnd = ? "
                + " and tipoXML = ? "
                + " and informado = 'N'";

        try {
            int facnume, facnd;
            String tipoxml;
            PreparedStatement ps = conn.prepareStatement(sqlSent);
            for (int i = 0; i < this.tblDocumentosXML.getModel().getRowCount(); i++) {
                if (tblDocumentosXML.getValueAt(i, 0) == null) {
                    continue;
                } // end if
                facnume = Integer.parseInt(String.valueOf(tblDocumentosXML.getValueAt(i, 0)));
                facnd = Integer.parseInt(String.valueOf(tblDocumentosXML.getValueAt(i, 9)));
                tipoxml = String.valueOf(tblDocumentosXML.getValueAt(i, 10));
                ps.setInt(1, facnume);
                ps.setInt(2, facnd);
                ps.setString(3, tipoxml);
                CMD.update(ps);
            } // end for

            // Bosco 31/07/2019.  Dado que esta pantalla se ejecuta automáticamente
            // no se debe cerrar la conexión.
            ps.close();
            //conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
    }//GEN-LAST:event_formWindowClosing

    private void tblDocumentosXMLMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDocumentosXMLMouseClicked
        txaEstado.setText("");
        if (tblDocumentosXML.getSelectedRow() < 0) {
            return;
        } // end if

        txaEstado.setText(tblDocumentosXML.getValueAt(tblDocumentosXML.getSelectedRow(), 3) + ""); // Concatenar para controlar el null
    }//GEN-LAST:event_tblDocumentosXMLMouseClicked

    private void chkPendientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPendientesActionPerformed
        reviewChecks(chkPendientes);
        setWhere();
        setQuery();
        cargarTabla();
    }//GEN-LAST:event_chkPendientesActionPerformed

    private void chkAceptadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkAceptadoActionPerformed
        reviewChecks(chkAceptado);
        setWhere();
        setQuery();
        cargarTabla();
    }//GEN-LAST:event_chkAceptadoActionPerformed

    private void chkRechazadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkRechazadoActionPerformed
        reviewChecks(chkRechazado);
        setWhere();
        setQuery();
        cargarTabla();
    }//GEN-LAST:event_chkRechazadoActionPerformed

    private void chkErrorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkErrorActionPerformed
        reviewChecks(chkError);
        setWhere();
        setQuery();
        cargarTabla();
    }//GEN-LAST:event_chkErrorActionPerformed

    private void chkTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkTodosActionPerformed
        reviewChecks(chkTodos);
        setWhere();
        setQuery();
        cargarTabla();
    }//GEN-LAST:event_chkTodosActionPerformed

    private void btnEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEjecutarActionPerformed
        if (radEnviarPDFyXML.isSelected()) {
            enviarPDFyXML();
            return;
        } // end if

        if (radActualizarEstado.isSelected()) {
            actualizarEstado();
            return;
        } // end if

        if (radEnviarHacienda.isSelected()) {
            enviarHacienda();
        } // end if
    }//GEN-LAST:event_btnEjecutarActionPerformed

    private void chkProcesandoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkProcesandoActionPerformed
        reviewChecks(chkProcesando);
        setWhere();
        setQuery();
        cargarTabla();
    }//GEN-LAST:event_chkProcesandoActionPerformed

    private void chkDesconocidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkDesconocidoActionPerformed
        reviewChecks(chkDesconocido);
        setWhere();
        setQuery();
        cargarTabla();
    }//GEN-LAST:event_chkDesconocidoActionPerformed

    private void snMesesPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_snMesesPropertyChange
        if (init || destroy) {
            return;
        }
        setWhere();
        setQuery();
        cargarTabla();
    }//GEN-LAST:event_snMesesPropertyChange

    private void txtDocumentoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDocumentoFocusGained
        txtDocumento.selectAll();
    }//GEN-LAST:event_txtDocumentoFocusGained

    private void txtDocumentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDocumentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDocumentoActionPerformed

    private void txtDocumentoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDocumentoKeyPressed
        if (evt.getKeyCode() != java.awt.event.KeyEvent.VK_ENTER) {
            return;
        }

        int column = 0;
        // Si el valor es encontrado la celda quedará seleccionada
        if (!Ut.seek(tblDocumentosXML, this.txtDocumento.getText().trim(), column)) {
            JOptionPane.showMessageDialog(null,
                    "Documento no encontrado.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if

        tblDocumentosXMLMouseClicked(null);
    }//GEN-LAST:event_txtDocumentoKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEjecutar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkAceptado;
    private javax.swing.JCheckBox chkDesconocido;
    private javax.swing.JCheckBox chkError;
    private javax.swing.JCheckBox chkPendientes;
    private javax.swing.JCheckBox chkProcesando;
    private javax.swing.JCheckBox chkRechazado;
    private javax.swing.JCheckBox chkTodos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblTotalRegistros;
    private javax.swing.JRadioButton radActualizarEstado;
    private javax.swing.JRadioButton radEnviarHacienda;
    private javax.swing.JRadioButton radEnviarPDFyXML;
    private com.toedter.components.JSpinField snMeses;
    private javax.swing.JTable tblDocumentosXML;
    private javax.swing.JTextArea txaEstado;
    private javax.swing.JFormattedTextField txtDocumento;
    // End of variables declaration//GEN-END:variables

    private void cargarTabla() {
        TablaFacturaElectronica pb 
                = new TablaFacturaElectronica(this, "Documentos electrónicos");
        pb.setBorderTitle("Cargando...");
        pb.start();
    } // end cargarTabla

    private void setQuery() {
        this.query
                = "Select     "
                + "	a.facnume,  "
                + "	a.facnd,    "
                + "	a.xmlFile,  "
                + "	a.estado,   "
                + "	a.descrip,  "
                + "	a.correo,   "
                + "	a.fecha,    "
                + "	CASE        "
                + "		When a.facnd = 0 then 'FAC'    "
                + "		When a.facnd > 0 then 'NCR'    "
                + "		When a.facnd < 0 then 'NDB'    "
                + "		Else 'N/A'    "
                + "	END as tipo,  "
                + "	If (c.clidesc is null, concat('* ', e.prodesc), c.clidesc) as clidesc,  "
                + "	a.referencia,  "
                + "	a.xmlEnviado,  "
                + "	a.emailDestino, "
                + "	a.fechaEnviado, "
                + "     a.tipoxml "
                + "from faestadoDocElect a  "
                + "Left JOIN faencabe b on  "
                + "	a.facnume = b.facnume and a.facnd = b.facnd  "
                + "Left join inclient c ON  "
                + "	b.clicode = c.clicode  "
                + "Left join cxpfacturas d on  "
                + "	a.facnume = d.factura and d.tipo = 'FAC' "
                + "Left join inproved e ON "
                + "	d.procode = e.procode ";

        this.query += this.where + " order by b.facfechac desc, b.facnume desc, b.facnd";
    } // end setQuery

    /**
     * Los estados de Hacienda son los siguientes: 0 THEN 'PRE-REGISTRO' 1 THEN
     * 'REGISTRADO' 2 THEN 'RECIBIDO' 3 THEN 'PROCESANDO' 4 THEN 'ACEPTADO' 5 THEN
     * 'RECHAZADO' 6 THEN 'ERROR' ELSE 'DESCONOCIDO'
     *
     * Pero acá solo se toman los más representativos.
     */
    private void setWhere() {
        this.where = " Where a.estado in(";
        String estados = "";
        if (chkPendientes.isSelected()) {
            estados = "100";
        } // end if
        if (chkProcesando.isSelected()) {
            estados = estados.isEmpty() ? "3" : estados + ",3";
        } // end if
        if (chkAceptado.isSelected()) {
            estados = estados.isEmpty() ? "4" : estados + ",4";
        } // end if
        if (chkRechazado.isSelected()) {
            estados = estados.isEmpty() ? "5" : estados + ",5";
        } // end if
        if (chkError.isSelected()) {
            estados = estados.isEmpty() ? "6" : estados + ",6";
        } // end if
        if (chkDesconocido.isSelected()) {
            estados = estados.isEmpty() ? "10" : estados + ",10";
        } // end if
        if (!estados.isEmpty()) {
            estados += ") and b.facfechac >= DATE_SUB(CURDATE(),INTERVAL " + this.snMeses.getValue() + " MONTH)";
        } else {
            this.where = " Where b.facfechac >= DATE_SUB(CURDATE(),INTERVAL " + this.snMeses.getValue() + " MONTH)";
        } // end if-ese

        estados += " and b.facestado = '' ";

        this.where += estados;
    } // end setWhere

    private void reviewChecks(JCheckBox chk) {
        // Si el objeto seleccionado no es chkTodos entonces desmarco el objeto chkTodos.
        if (!chk.equals(chkTodos) && chk.isSelected()) {
            chkTodos.setSelected(false);
        } // end if

        // Si el check todos está seleccinado quito todos los demás checks.
        // Caso contrario si ninguno está seleccionado seleciono el que dice todos.
        if (this.chkTodos.isSelected()) {
            this.chkAceptado.setSelected(false);
            this.chkError.setSelected(false);
            this.chkPendientes.setSelected(false);
            this.chkRechazado.setSelected(false);
            this.chkProcesando.setSelected(false);
            this.chkDesconocido.setSelected(false);
            return;
        } // end if

        if (!chkAceptado.isSelected()
                && !chkError.isSelected()
                && !chkPendientes.isSelected()
                && !chkRechazado.isSelected()
                && !chkProcesando.isSelected()
                && !chkDesconocido.isSelected()) {
            chkTodos.setSelected(true);
        } // end if
    } // end reviewChecks

    private void enviarPDFyXML() {
        // Valido que el usuario haya elegido un registro válido
        if (!validRow()) {
            return;
        } // end if

        CorreoFacturaElectronica pb 
                = new CorreoFacturaElectronica(this, "Enviar correos electrónicos");
        pb.setBorderTitle("Enviando...");
        pb.start();
        
        /*
        // Determino cuántos registros hay seleccionados en la tabla
        int[] rows = this.tblDocumentosXML.getSelectedRows();
        int count = 0;
        String tipoXML;
        int facnume;
        int facnd;
        String tipoDoc;
        int row;
        for (int index = 0; index < rows.length; index++) {
            row = rows[index];
            //int row = this.tblDocumentosXML.getSelectedRow();
            tipoXML = tblDocumentosXML.getValueAt(row, 10).toString();
            // Solo se usa en registros de venta.
            if (!tipoXML.equals("V")) {
                continue;
            } // end if
            facnume = Integer.parseInt(tblDocumentosXML.getValueAt(row, 0).toString());
            facnd = Integer.parseInt(tblDocumentosXML.getValueAt(row, 9).toString());
            tipoDoc = tblDocumentosXML.getValueAt(row, 1).toString();

            String descrip = tblDocumentosXML.getValueAt(row, 3).toString();
            // Si el estado no es aceptado no continúo (solo si es un solo documento).
            if (!descrip.contains("ACEPTADO")) {
                String msg
                        = "El documento " + facnume + ", tipo " + tipoDoc + " "
                        + "no fue enviado al cliente porque aun no ha sido aceptado por el Ministerio de Hacienda.";
                b.writeToLog(this.getClass().getName() + "--> " + msg);
                continue;
            } // end if

            String mailAddress;
            try {
                mailAddress = UtilBD.getCustomerMail(conn, facnume, facnd);
            } catch (Exception ex) {
                b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
                continue;
            } // end try-catch

            // Si el correo está vacío tomo el que esté registrado en la tabla
            // y si también está vacío mando el mensaje de error.
            if (mailAddress.isEmpty()) {
                mailAddress = String.valueOf(tblDocumentosXML.getValueAt(row, 7));

                if (mailAddress.isEmpty() || mailAddress.equalsIgnoreCase("null")) {
                    String clidesc = String.valueOf(tblDocumentosXML.getValueAt(row, 4));
                    String msg
                            = "El cliente " + clidesc + "no tiene una dirección de correo asociada.";
                    b.writeToLog(this.getClass().getName() + "--> " + msg);
                    continue;
                } // end if
            } // end if

            try {
                DocumentoElectronico doc
                        = new DocumentoElectronico(facnume, facnd, "V", conn, "2");
                doc.enviarDocumentoCliente(mailAddress);
                if (doc.isError()) {
                    throw new Exception(doc.getError_msg());
                } // end if
                count++;
                tblDocumentosXML.setValueAt(mailAddress, row, 7); // Solo es para que el usuario valide si se fue o no.
            } catch (Exception ex) {
                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
                b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            }
        } // end for

        // Informo al usuario.
        String msg
                = "Se enviaron " + count + " correos de " + rows.length;
        if (count < rows.length) {
            msg += "\nPero debe revisar en la tabla cuáles registros (seleccionados)"
                    + "\nno tienen email registrado porque esos no se enviaron.";
        }
        JOptionPane.showMessageDialog(null,
                msg,
                "Información",
                JOptionPane.INFORMATION_MESSAGE);
        */
    } // end enviarPDFyXML

    private boolean validRow() {
        boolean valid = false;
        int row = this.tblDocumentosXML.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null,
                    "Debe seleccionar un registro de la tabla.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return valid;
        } // end if

        if (tblDocumentosXML.getValueAt(row, 0) == null) {
            JOptionPane.showMessageDialog(null,
                    "El registro que eligió no es válido.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return valid;
        } // end if

        if (!tblDocumentosXML.getValueAt(row, 10).toString().equals("V")) {
            JOptionPane.showMessageDialog(null,
                    "Esta acción aplica únicamente para XMLs de ventas.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return valid;
        } // end if

        valid = true;

        return valid;
    } // end validRow

    private void actualizarEstado() {
        // Valido que el usuario haya elegido un registro válido
        if (!validRow()) {
            return;
        } // end if

        // Determino cuántos registros hay seleccionados en la tabla
        int[] rows = this.tblDocumentosXML.getSelectedRows();
        int count = 0;
        int row;
        String dirXMLS = Menu.DIR.getXmls() + Ut.getProperty(Ut.FILE_SEPARATOR);
        for (int index = 0; index < rows.length; index++) {
            row = rows[index];
            int codigoEnvio = Integer.parseInt(tblDocumentosXML.getValueAt(row, 5).toString());

            // Si el envío es 4=Aceptado o 5=Rechazado no continúo con la consulta
            if (codigoEnvio == 4 || codigoEnvio == 5) {
                continue;
            }
            String documento = tblDocumentosXML.getValueAt(row, 0).toString();
            String cmd = getCommand(row, "2");

            try {
                // Este proceso es únicamente windows por lo que no debe correr en Linux
                String os = Ut.getProperty(Ut.OS_NAME).toLowerCase();
                if (os.contains("win") && Menu.enviarDocumentosElectronicos) {
                    Process p = Runtime.getRuntime().exec(cmd);
                } // end if

                String dirLogs = Menu.DIR.getLogs() + Ut.getProperty(Ut.FILE_SEPARATOR);
                String sufijo = "_Hac.log";

                // Como no hay forma de saber si la clave es de ventas, compras o proveedores
                // entonces busco los tres tipos.
                File f = new File(dirLogs + documento + sufijo);
                if (!f.exists()) { // ventas
                    sufijo = "_HacP.log";
                    f = new File(dirLogs + documento + sufijo);
                    if (!f.exists()) { // Proveedores
                        sufijo = "_HacCompras.log";
                    } // end if

                    if (!f.exists()) {
                        /*
                        * Si tampoco existe este archivo es porque hay un error que se
                        * generó drante la ejecusión del API
                        * El log que genera queda en la misma carpeta del xml, con el
                        * mismo nombre de la factura pero con la extensión .log
                         */
                        sufijo = ".log";
                    } // end if
                } // end if

                Path path;
                if (sufijo.equals(".log")) {
                    path = Paths.get(dirXMLS + documento + sufijo);
                } else {
                    path = Paths.get(dirLogs + documento + sufijo);
                } // end if-else

                String texto = Ut.fileToString(path);
                if (texto.contains("Archivo no encontrado")) {
                    texto = "Ocurrió un error. Falta el archivo " + path.toFile().getAbsolutePath();
                    throw new Exception(texto);
                } // end if

                // Esto solo es para efectos visuales ya que es el API quien actualiza la tabla con el nuevo estado.
                this.tblDocumentosXML.setValueAt(texto, row, 3);
                this.txaEstado.setText(texto);

                count++;
            } catch (Exception ex) {
                b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            } // end try-catch
        } // end for

        // Informo al usuario.
        String msg
                = "Se actualizaron " + count + " registros de " + rows.length;
        if (count < rows.length) {
            msg += "\nPero debe revisar en la tabla cuáles registros (seleccionados)"
                    + "\nno cambiaron su estado.";
        }
        JOptionPane.showMessageDialog(null,
                msg,
                "Información",
                JOptionPane.INFORMATION_MESSAGE);
    } // end actualizarEstado

    private void enviarHacienda() {
        // Valido que el usuario haya elegido un registro válido
        if (!validRow()) {
            return;
        } // end if

        EnvioFacturaElectronica pb 
                = new EnvioFacturaElectronica(this, "Enviar documentos electrónicos");
        pb.setBorderTitle("Enviando...");
        pb.start();
        
        /*
        // Determino cuántos registros hay seleccionados en la tabla
        int[] rows = this.tblDocumentosXML.getSelectedRows();

        int row;
        String tipoXML;
        int factura;
        String tipoDoc;
        int count = 0;
        for (int index = 0; index < rows.length; index++) {
            row = rows[index];
            tipoXML = tblDocumentosXML.getValueAt(row, 10).toString();
            // Solo se usa en registros de venta.
            if (!tipoXML.equals("V")) {
                continue;
            } // end if
            factura = Integer.parseInt(tblDocumentosXML.getValueAt(row, 0).toString());
            tipoDoc = tblDocumentosXML.getValueAt(row, 1).toString();

            FacturaXML fact;
            String resp;
            try {
                fact = new FacturaXML(this.conn);
                fact.setMode(FacturaXML.UNATTENDED);

                switch (tipoDoc) {
                    case "FAC":
                        // Las facturas se dividen (para efectos de los xml) en
                        // facturas electrónicas y tiquetes electrónicos.
                        // Para que una factura se considere tiquete depende del cliente,
                        // si éste es genérico entonces la factura se considera tiquete.
                        int tipo = FacturaXML.FACTURA;
                        try {
                            if (UtilBD.esClienteGenerico(conn, factura, 0)) {
                                tipo = FacturaXML.TIQUETE;
                            } // end if
                        } catch (SQLException ex) {
                            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
                            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
                            continue;
                        } // end try-catch
                        fact.setTipo(tipo);
                        break;
                    case "NCR":
                        fact.setTipo(FacturaXML.NOTACR);
                        break;
                    default:
                        fact.setTipo(FacturaXML.NOTADB);
                        break;
                } // end switch

                fact.setRangoDocumentos(factura, factura);
                fact.runApp();

                resp = fact.getRespuestaHacienda();

                if (resp == null || resp.trim().isEmpty()) {
                    String msg
                            = "El XML " + factura + " no se pudo enviar.\n"
                            + "Vaya al menú Hacienda y trate con la opción Generar documentos XML.";
                    b.writeToLog(this.getClass().getName() + "--> " + msg);
                    continue;
                } // end if

                // Si este archivo existe es mejor mostrar lo que tiene.
                String logHacienda = Menu.DIR.getLogs() + "\\" + factura + "_Hac.log";
                Path path = Paths.get(logHacienda);
                resp = Ut.fileToString(path);

                // Esto se pone solo para que el usuario vea el cambio 
                // pero el estado real ya está en la tabla ya que el API
                // se encargó de actualizar el registro.
                tblDocumentosXML.setValueAt(resp, row, 3);
                this.txaEstado.setText(resp);
                count++;
            } catch (Exception ex) {
                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
                b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            }
        } // end for

        JOptionPane.showMessageDialog(null,
                count + " de " + rows.length + " XMLs enviados satisfactoriamente.",
                "Mensaje",
                JOptionPane.INFORMATION_MESSAGE);
        */
    } // end enviarHacienda
    
    public JTable getTable(){
        return this.tblDocumentosXML;
    }
    
    public JLabel getLblRecords(){
        return this.lblTotalRegistros;
    }
    
    public Bitacora getBitacora(){
        return this.b;
    }
    
    public String getQuery(){
        return this.query;
    }

    public Boolean getDestroy() {
        return destroy;
    }

    public Boolean getInit() {
        return init;
    }
    
    public JTextArea getEstado(){
        return this.txaEstado;
    }
}
