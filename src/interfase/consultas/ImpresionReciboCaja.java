/*
 * ImpresionReciboCaja.java
 *
 * Created on 23/07/2015, 07:30:00 PM
 */

package interfase.consultas;

import Mail.Bitacora;
import accesoDatos.CMD;
import interfase.reportes.Reportes;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author Bosco
 */
@SuppressWarnings("serial")
public class ImpresionReciboCaja extends java.awt.Dialog {
    private final Connection conn;  // Conexión a la base de datos
    private String documento;       // Aquí estará el recibo pasado por parámetro
    private ResultSet rs  = null;   // Uso general
    private final boolean modoCaja; // true=Es llamado desde caja, false=Es llamado desde CXP

    public ImpresionReciboCaja(
            java.awt.Frame parent,
            boolean modal,
            Connection c, 
            String recnume, boolean modoCaja) {
        
        super(parent, modal);
        initComponents();

        conn      = c;
        documento = recnume.trim();
        this.modoCaja = modoCaja;
        this.setTitle(modoCaja ? "Imprimir recibos de caja":"Imprimir recibos de CXP");

        // Si el número de documento recibido es un cero entonces habilito
        // el campo para que el usuario pueda digitar un número.
        txtRecnume.setEnabled(Integer.parseInt(documento) == 0);

        txtRecnume.setText(documento);

        // Si el campo está habilitado le pongo el focus...
        if (txtRecnume.isEnabled()) {
            txtRecnume.requestFocusInWindow();
        } else { // ... caso contrario ejecuto el evento que busca el recibo
            txtRecnumeFocusLost(null);
            cmdImprimir.requestFocusInWindow();
        } // end if
    } // end constructor

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        cmdImprimir = new javax.swing.JButton();
        cmdSalir = new javax.swing.JButton();
        txtRecnume = new javax.swing.JFormattedTextField();
        lblNombre = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        radDeposito = new javax.swing.JRadioButton();
        radRetiro = new javax.swing.JRadioButton();

        setAlwaysOnTop(true);
        setIconImage(null);
        setModalityType(java.awt.Dialog.ModalityType.DOCUMENT_MODAL);
        setTitle("Imprimir recibos de caja");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        cmdImprimir.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmdImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZPRINT.png"))); // NOI18N
        cmdImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdImprimirActionPerformed(evt);
            }
        });
        cmdImprimir.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmdImprimirKeyPressed(evt);
            }
        });

        cmdSalir.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmdSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/control-power.png"))); // NOI18N
        cmdSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSalirActionPerformed(evt);
            }
        });

        txtRecnume.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txtRecnume.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtRecnume.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRecnumeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtRecnumeFocusLost(evt);
            }
        });
        txtRecnume.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRecnumeActionPerformed(evt);
            }
        });

        lblNombre.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblNombre.setForeground(new java.awt.Color(0, 51, 255));
        lblNombre.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNombre.setText("  ");
        lblNombre.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Número de recibo");

        buttonGroup1.add(radDeposito);
        radDeposito.setForeground(new java.awt.Color(254, 33, 251));
        radDeposito.setText("Depósito");
        radDeposito.setEnabled(false);
        radDeposito.setFocusable(false);

        buttonGroup1.add(radRetiro);
        radRetiro.setForeground(new java.awt.Color(255, 25, 248));
        radRetiro.setText("Retiro");
        radRetiro.setEnabled(false);
        radRetiro.setFocusable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtRecnume))
                            .addComponent(lblNombre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(cmdImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmdSalir)
                        .addGap(0, 55, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radDeposito)
                    .addComponent(radRetiro))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cmdImprimir, cmdSalir});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRecnume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblNombre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(radDeposito)
                .addGap(2, 2, 2)
                .addComponent(radRetiro)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(cmdSalir)
                    .addComponent(cmdImprimir))
                .addGap(4, 4, 4))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cmdImprimir, cmdSalir});

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private void cmdImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdImprimirActionPerformed
        if (!validarImpresion()) {
            return;
        } // end if

        this.setAlwaysOnTop(false);
        new Reportes(this.conn).imprimirReciboCaja(
                Integer.parseInt(documento));

        this.setAlwaysOnTop(true);
    }//GEN-LAST:event_cmdImprimirActionPerformed

    private void cmdSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSalirActionPerformed
        dispose();
    }//GEN-LAST:event_cmdSalirActionPerformed
/**
 * 
 * @param evt
 */
    private void txtRecnumeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRecnumeFocusLost
        documento = txtRecnume.getText().trim();
        lblNombre.setText("");
        
        // Cambio este parámetro para que la ventana no tape los mensajes
        this.setAlwaysOnTop(false);
        
        // Si la pantalla fue llamada desde el módulo de cajas debe buscar
        // el recibo en caja pero si no entonces debe buscar el recibo en
        // cuentas por pagar.
        String sqlSent =
                "Select nombre,tipomov,documento from catransa Where recnume = ?";
                
        if (!this.modoCaja){
            sqlSent = 
                    "Select " +
                    "   prodesc as nombre," +
                    "   'R' as tipomov " +
                    "from cxppage " +
                    "Inner join inproved on cxppage.procode = inproved.procode " +
                    "Where recnume = ?";
        } // end if
        
        PreparedStatement ps;
        
        try {
            ps = conn.prepareStatement(sqlSent, 
                    ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ps.setInt(1, Integer.parseInt(documento));
            rs = CMD.select(ps);
            
            if (rs != null && rs.first()){
                lblNombre.setText(rs.getString("nombre"));
                this.radDeposito.setSelected(rs.getString("tipomov").equals("D"));
                this.radRetiro.setSelected(rs.getString("tipomov").equals("R"));
                
                // Si viene en modo de caja hay que obtener el recibo de CXP
                if (this.modoCaja){
                    documento = rs.getString("documento");
                } // end if
            }else{
                lblNombre.setText("");
                JOptionPane.showMessageDialog(
                        null,
                        "Recibo no existe.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            } // end if
            ps.close();
        } catch (SQLException | NumberFormatException | HeadlessException ex) {
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            Bitacora b = new Bitacora();
            b.setLogLevel(Bitacora.ERROR);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        } // end try-catch
        
        this.setAlwaysOnTop(true);
    }//GEN-LAST:event_txtRecnumeFocusLost

    private void txtRecnumeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRecnumeActionPerformed
        // Esto provoca que se ejecute el FocusLost en txtFacnume
        txtRecnume.transferFocus();
    }//GEN-LAST:event_txtRecnumeActionPerformed

    private void txtRecnumeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRecnumeFocusGained
        txtRecnume.selectAll();
    }//GEN-LAST:event_txtRecnumeFocusGained

    private void cmdImprimirKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmdImprimirKeyPressed
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            cmdImprimirActionPerformed(null);
        }
    }//GEN-LAST:event_cmdImprimirKeyPressed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cmdImprimir;
    private javax.swing.JButton cmdSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JRadioButton radDeposito;
    private javax.swing.JRadioButton radRetiro;
    private javax.swing.JFormattedTextField txtRecnume;
    // End of variables declaration//GEN-END:variables

    private boolean validarImpresion(){
        boolean todoCorrecto = true;
        this.setAlwaysOnTop(false);
        // Si la etiqueta que despliega el nombre está
        // vacía significa que el documento digitado no es válido.
        if (this.lblNombre.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(null,
                    "Número de recibo no válido.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            
            txtRecnume.requestFocusInWindow();
            
            this.setAlwaysOnTop(true);
            
            return false;
        } // end if

        this.setAlwaysOnTop(true);
        return todoCorrecto;
    } // end validarImpresion
}
