/*
 * ImpresionFactura.java
 *
 * Created on 30/01/2010, 08:35:04 PM
 */
package interfase.consultas;

import Mail.Bitacora;
import Mail.EnviarCorreoFE;
import accesoDatos.CMD;
import interfase.reportes.Reportes;
import accesoDatos.UtilBD;
import interfase.otros.Buscador;
import interfase.otros.FacturaXML;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Bosco
 */
@SuppressWarnings("serial")
public class ImpresionFactura extends java.awt.Dialog {

    private Connection conn;  // Conexión a la base de datos
    private String documento; // Factura, ND, NC (corresponde al campo FACNUME)
    private String facnd;     // Corres ponde al campo (FACND)
    private int tipodoc;      // 1 = Factura, 2 = ND, 3 = NC
    private Statement stat;
    private ResultSet rs = null;  // Uso general
    private boolean facConIV; // true = Impuesto separado

    public ImpresionFactura(java.awt.Frame parent, boolean modal,
            Connection c, String facnume, int tipo) {
        super(parent, modal);
        initComponents();

        conn = c;
        documento = facnume.trim();
        tipodoc = tipo;
        this.datFecha1.setDate(new Date());
        this.datFecha2.setDate(new Date());

        try {
            stat = conn.createStatement(
                    ResultSet.TYPE_SCROLL_SENSITIVE,
                    ResultSet.CONCUR_READ_ONLY);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch

        // Si el número de documento recibido es un cero entonces habilito
        // el campo para que el usuario pueda digitar un número.
        txtFacnume1.setEnabled(Integer.parseInt(documento) == 0);
        radFactura.setEnabled(Integer.parseInt(documento) == 0);
        radNotaD.setEnabled(Integer.parseInt(documento) == 0);
        radNotaC.setEnabled(Integer.parseInt(documento) == 0);

        txtFacnume1.setText(documento);

        switch (tipodoc) {
            case 1:
                radFactura.setSelected(true);
                break;
            case 2:
                radNotaD.setSelected(true);
                break;
            case 3:
                radNotaC.setSelected(true);
                break;
        } // end switch

        // Si el campo está habilitado le pongo el focus...
        if (txtFacnume1.isEnabled()) {
            txtFacnume1.requestFocusInWindow();
        } else { // ... caso contrario ejecuto el evento que busca la factura
            txtFacnume1FocusLost(null);
            btnImprimir.requestFocusInWindow();
        } // end if
    } // end constructor

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        radFactura = new javax.swing.JRadioButton();
        radNotaD = new javax.swing.JRadioButton();
        txtFacnume1 = new javax.swing.JFormattedTextField();
        lblClidesc = new javax.swing.JLabel();
        radPOS = new javax.swing.JRadioButton();
        radFormulario = new javax.swing.JRadioButton();
        txtFormulario = new javax.swing.JFormattedTextField();
        radNotaC = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        btnImprimir = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        btnExaminar = new javax.swing.JButton();
        chkExportToPDF = new javax.swing.JCheckBox();
        chkXML = new javax.swing.JCheckBox();
        radNormal = new javax.swing.JRadioButton();
        chkSendMail = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        datFecha1 = new com.toedter.calendar.JDateChooser();
        datFecha2 = new com.toedter.calendar.JDateChooser();
        chkRango = new javax.swing.JCheckBox();

        setAlwaysOnTop(true);
        setIconImage(null);
        setModalityType(java.awt.Dialog.ModalityType.DOCUMENT_MODAL);
        setTitle("Imprimir facturas, ND y NC");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        buttonGroup1.add(radFactura);
        radFactura.setSelected(true);
        radFactura.setText("Factura");
        radFactura.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                radFacturaMouseClicked(evt);
            }
        });

        buttonGroup1.add(radNotaD);
        radNotaD.setText("Nota D");
        radNotaD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                radNotaDMouseClicked(evt);
            }
        });

        txtFacnume1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txtFacnume1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtFacnume1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFacnume1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFacnume1FocusLost(evt);
            }
        });
        txtFacnume1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFacnume1ActionPerformed(evt);
            }
        });

        lblClidesc.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblClidesc.setForeground(new java.awt.Color(0, 51, 255));
        lblClidesc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblClidesc.setText("  ");
        lblClidesc.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblClidesc.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        buttonGroup2.add(radPOS);
        radPOS.setText("Punto de venta");
        radPOS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                radPOSMouseClicked(evt);
            }
        });

        buttonGroup2.add(radFormulario);
        radFormulario.setText("Formulario");
        radFormulario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                radFormularioMouseClicked(evt);
            }
        });

        txtFormulario.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txtFormulario.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtFormulario.setEnabled(false);
        txtFormulario.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFormularioFocusGained(evt);
            }
        });
        txtFormulario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFormularioActionPerformed(evt);
            }
        });

        buttonGroup1.add(radNotaC);
        radNotaC.setText("Nota C");
        radNotaC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                radNotaCMouseClicked(evt);
            }
        });

        btnImprimir.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZPRINT.png"))); // NOI18N
        btnImprimir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnImprimirMouseClicked(evt);
            }
        });
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        btnSalir.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/control-power.png"))); // NOI18N
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(131, 131, 131)
                .addComponent(btnImprimir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSalir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(130, 130, 130))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSalir)
                    .addComponent(btnImprimir))
                .addGap(4, 4, 4))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnImprimir, btnSalir});

        btnExaminar.setText("...");
        btnExaminar.setToolTipText("Mostrar y elegir registros");
        btnExaminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExaminarActionPerformed(evt);
            }
        });

        chkExportToPDF.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        chkExportToPDF.setSelected(true);
        chkExportToPDF.setText("Exportar a PDF");

        chkXML.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        chkXML.setSelected(true);
        chkXML.setText("Generar XML");
        chkXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkXMLActionPerformed(evt);
            }
        });

        buttonGroup2.add(radNormal);
        radNormal.setSelected(true);
        radNormal.setText("Normal");

        chkSendMail.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        chkSendMail.setText("Enviar correo");

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel1.setText("Del");

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel2.setText("al");

        chkRango.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        chkRango.setText("Imprimir por rango de fechas");
        chkRango.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkRangoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radPOS)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(radFormulario)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFormulario, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(radNormal))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkExportToPDF)
                            .addComponent(chkXML)
                            .addComponent(chkSendMail))
                        .addGap(31, 31, 31))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(datFecha1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(radFactura))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                                .addComponent(datFecha2, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(radNotaD)
                                    .addComponent(radNotaC))
                                .addGap(18, 18, 18)
                                .addComponent(txtFacnume1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(btnExaminar)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(151, 151, 151)
                                .addComponent(chkRango))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(1, 1, 1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(lblClidesc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkRango)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(datFecha1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(datFecha2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(radFactura)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txtFacnume1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExaminar)
                    .addComponent(radNotaD))
                .addGap(1, 1, 1)
                .addComponent(radNotaC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblClidesc, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(radPOS)
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(radFormulario)
                            .addComponent(txtFormulario, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radNormal))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chkXML)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkExportToPDF)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkSendMail)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4))
        );

        setSize(new java.awt.Dimension(528, 410));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        this.btnImprimirMouseClicked(null);
    }//GEN-LAST:event_btnImprimirActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        dispose();
    }//GEN-LAST:event_btnSalirActionPerformed
    /**
     * Búsqueda de la factura, ND o NC y despliegue del cliente Si el campo
     * txtFacnume tiene un cero no se ejecuta
     *
     * @param evt
     */
    private void txtFacnume1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFacnume1FocusLost
        if (txtFacnume1.getText().trim().equals("0")) {
            return;
        } // end if

        // El usuario puede digitar el número de NC positivo.  Aquí se corrige.
        documento = txtFacnume1.getText().trim();
        if (radNotaC.isSelected()) {
            if (Integer.parseInt(documento) > 0) {
                documento = String.valueOf(Integer.parseInt(documento) * -1);
            } // end if
            txtFacnume1.setText(documento);
        } // end if

        // El usuario puede digitar el número de factura o ND negativo.  Aquí se corrige.
        if (!radNotaC.isSelected()) {
            if (Integer.parseInt(documento) < 0) {
                documento = String.valueOf(Integer.parseInt(documento) * -1);
            } // end if
            txtFacnume1.setText(documento);
        } // end if

        // Cambio este parámetro para que la ventana no tape los mensajes
        this.setAlwaysOnTop(false);

        String mensaje;
        // Las facturas tienen el campo FACND en cero, las ND lo tienen
        // negativo y las NC positivo.
        if (radFactura.isSelected()) {
            facnd = "0";
            tipodoc = 1;
            mensaje = "Factura ";
        } else if (radNotaD.isSelected()) {
            facnd = "-" + documento;
            mensaje = "Nota de débito ";
            tipodoc = 2;
        } else {
            facnd = String.valueOf(Math.abs(Integer.valueOf(documento)));
            mensaje = "Nota de crédito ";
            tipodoc = 3;
        }// end if

        // La impresión en formulario solo se habilita para las facturas.
        radFormulario.setEnabled(radFactura.isSelected());
        txtFormulario.setEnabled(radFactura.isSelected());
        radPOS.setSelected(!radFactura.isSelected());
        if (!radFactura.isSelected()) {
            txtFormulario.setText("");
        } // end if

        String sqlSelect
                = "Select "
                + "   if(I.cligenerico = 1, IfNull(FC.clidesc,I.clidesc), I.clidesc) as clidesc,"
                + "   I.facConIV,"
                + "   F.facplazo,I.cligenerico "
                + "from faencabe F "
                + "Inner join inclient I on F.clicode = I.clicode "
                + "Left join faclientescontado FC "
                + "   on F.facnume = FC.facnume and F.facnd = FC.facnd "
                + "Where F.facnume = " + documento + " and F.facnd = " + facnd;
        try {
            rs = stat.executeQuery(sqlSelect);
            if (rs != null && rs.first()) {
                lblClidesc.setText(rs.getString("clidesc"));
                facConIV = rs.getBoolean("facConIV");
            } else {
                lblClidesc.setText("");
                mensaje += "no existe.";
                JOptionPane.showMessageDialog(null,
                        mensaje,
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            } // end if
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            lblClidesc.setText("");
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } finally {
            this.setAlwaysOnTop(true);
        }
    }//GEN-LAST:event_txtFacnume1FocusLost

    private void txtFacnume1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFacnume1ActionPerformed
        // Esto provoca que se ejecute el FocusLost en txtFacnume
        txtFacnume1.transferFocus();
    }//GEN-LAST:event_txtFacnume1ActionPerformed

    private void radFacturaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_radFacturaMouseClicked
        txtFacnume1FocusLost(null);
    }//GEN-LAST:event_radFacturaMouseClicked

    private void radNotaDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_radNotaDMouseClicked
        txtFacnume1FocusLost(null);
    }//GEN-LAST:event_radNotaDMouseClicked

    private void radPOSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_radPOSMouseClicked
        if (radPOS.isSelected()) {
            txtFormulario.setText("");
            txtFormulario.setEnabled(false);
        } // end if
    }//GEN-LAST:event_radPOSMouseClicked

    private void radFormularioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_radFormularioMouseClicked
        if (!radFormulario.isSelected()) {
            return;
        } // end if
        this.setAlwaysOnTop(false);

        int formulario = 0;
        // Obtengo el consecutivo de formularios.
        String sqlSelect = "Select formulario + 1 from config";
        try {
            rs = stat.executeQuery(sqlSelect);
            if (rs != null && rs.first()) {
                txtFormulario.setText(rs.getString(1));
                formulario = rs.getInt(1);
                txtFormulario.setEnabled(true);
                txtFormulario.requestFocusInWindow();
            } // end if
            // Esta segunda verificación se hace por si
            // se ha cambiado el dato en la tabla de
            // encabezado de facturas.
            sqlSelect
                    = "Select max(formulario)+1 as formulario from faencabe";
            rs = stat.executeQuery(sqlSelect);
            if (rs.first() && rs.getInt(1) > formulario) {
                txtFormulario.setText(rs.getString(1));
            } // end if
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } finally {
            this.setAlwaysOnTop(true);
        }
    }//GEN-LAST:event_radFormularioMouseClicked

    private void txtFacnume1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFacnume1FocusGained
        txtFacnume1.selectAll();
    }//GEN-LAST:event_txtFacnume1FocusGained

    private void txtFormularioFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFormularioFocusGained
        txtFormulario.selectAll();
    }//GEN-LAST:event_txtFormularioFocusGained

    private void txtFormularioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFormularioActionPerformed
        txtFormulario.transferFocus();
    }//GEN-LAST:event_txtFormularioActionPerformed

    private void btnImprimirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnImprimirMouseClicked
        List<Integer> documentos = new ArrayList<>();
        // Si el usuario decide imprimir por rango de fechas entonces preparo
        // una lista con los números de documento a imprimir.
        if (this.chkRango.isSelected()) {
            String sqlSent
                    = "Select facnume from faencabe "
                    + "Where facfech between ? and ? "
                    + "and facestado <> 'A' "
                    + "order by 1";
            PreparedStatement ps;
            try {
                ps = conn.prepareStatement(sqlSent,
                        ResultSet.TYPE_SCROLL_SENSITIVE,
                        ResultSet.CONCUR_READ_ONLY);

                java.sql.Date f1 = new java.sql.Date(this.datFecha1.getDate().getTime());
                java.sql.Date f2 = new java.sql.Date(this.datFecha2.getDate().getTime());
                ps.setDate(1, f1);
                ps.setDate(2, f2);

                ResultSet rsT = CMD.select(ps);
                while (rsT != null && rsT.next()) {
                    documentos.add(rsT.getInt(1));
                } // end while
                ps.close();
            } catch (SQLException ex) {
                Logger.getLogger(ImpresionFactura.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null,
                        ex.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            } // end try-catch
        } else {
            documentos.add(Integer.parseInt(this.txtFacnume1.getText().trim()));
        } // end if-else

        try {
            java.awt.Cursor cur = new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR);
            this.setCursor(cur);
            for (Integer doc : documentos) {
                this.txtFacnume1.setText(doc + "");
                this.txtFacnume1FocusLost(null);
                printDocument();
            } // end for
            this.setCursor(null);
        } catch (Exception ex) {
            Logger.getLogger(ImpresionFactura.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
    }//GEN-LAST:event_btnImprimirMouseClicked

    private void radNotaCMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_radNotaCMouseClicked
        txtFacnume1FocusLost(null);
    }//GEN-LAST:event_radNotaCMouseClicked

    private void btnExaminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExaminarActionPerformed
        String where;
        String sqlSent
                = "Select a.facnume,b.clidesc "
                + "from faencabe a "
                + "inner join inclient b on a.clicode = b.clicode "
                + "Where a.impresa = 0 and ";

        Buscador bd;

        bd = new Buscador(new java.awt.Frame(), true,
                //"faencabe a inner join inclient b on a.clicode = b.clicode",
                "Table definition not necesary",
                //"a.facnume,b.clidesc","b.clidesc",this.txtFacnume,conn);
                "Field definition not necesary", "b.clidesc", this.txtFacnume1, conn);

        if (this.radFactura.isSelected()) {
            where = "a.facnume > 0 and a.facnd = 0"; // Facturas
            bd.setColumnHeader(0, "Factura");
        } else if (this.radNotaD.isSelected()) {
            where = "a.facnume > 0 and a.facnd < 0"; // ND
            bd.setColumnHeader(0, "Nota débito");
        } else {
            where = "a.facnume < 0 and a.facnd > 0"; // NC
            bd.setColumnHeader(0, "Nota crédito");
        } // end if-else-if

        where += " and a.facestado = ''";
        sqlSent += where + " order by 2";

        bd.setTitle("Buscar facturas");
        bd.lblBuscar.setText("Descripción:");
        bd.setColumnHeader(1, "Cliente");

        bd.setBuiltInQuery(sqlSent);

        bd.setVisible(true);
        txtFacnume1FocusLost(null);
        bd.dispose();
    }//GEN-LAST:event_btnExaminarActionPerformed

    private void chkRangoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkRangoActionPerformed
        if (chkRango.isSelected()) {
            this.txtFacnume1.setText("");
            this.datFecha1.requestFocusInWindow();
        } // end if
    }//GEN-LAST:event_chkRangoActionPerformed

    private void chkXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkXMLActionPerformed
        chkSendMail.setSelected(true);
        if (chkXML.isSelected()) {
            this.chkSendMail.setSelected(false);
        }
    }//GEN-LAST:event_chkXMLActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExaminar;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnSalir;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JCheckBox chkExportToPDF;
    private javax.swing.JCheckBox chkRango;
    private javax.swing.JCheckBox chkSendMail;
    private javax.swing.JCheckBox chkXML;
    private com.toedter.calendar.JDateChooser datFecha1;
    private com.toedter.calendar.JDateChooser datFecha2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblClidesc;
    private javax.swing.JRadioButton radFactura;
    private javax.swing.JRadioButton radFormulario;
    private javax.swing.JRadioButton radNormal;
    private javax.swing.JRadioButton radNotaC;
    private javax.swing.JRadioButton radNotaD;
    private javax.swing.JRadioButton radPOS;
    private javax.swing.JFormattedTextField txtFacnume1;
    private javax.swing.JFormattedTextField txtFormulario;
    // End of variables declaration//GEN-END:variables

    private boolean validarImpresion() {
        boolean todoCorrecto = false;
        this.setAlwaysOnTop(false);
        // Si la etiqueta que despliega el nombre del cliente está
        // vacía significa que el documento digitado no es válido.
        if (this.lblClidesc.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(
                    null,
                    "Documento (FAC, ND, NC) no es válido.");
            txtFacnume1.requestFocusInWindow();
            this.setAlwaysOnTop(true);
            return false;
        } // end if

        // Bosco agregado 10/03/2012.
        // Si es una nota de crédito hay que asegurarse de que esté aplicada.
        int doc = Integer.parseInt(documento);
        if (doc < 0) {
            String sqlSent
                    = "Select notasd.monto   "
                    + "From notasd, faencabe "
                    + "Where notasd.notanume = ? "
                    + "and faencabe.facnume = notasd.notanume "
                    + "and faencabe.facnd > 0 "
                    + "and faencabe.facestado = '' "
                    + "limit 1";
            try {
                PreparedStatement ps = conn.prepareStatement(sqlSent);
                ps.setInt(1, doc);
                if (!UtilBD.existeRegistro(ps)) {
                    // Si no aparece como una nota aplicada podría tratarse de
                    // una nota de crédito sobre facturas de contado.  Por tal
                    // razón hay que hacer la validación antes de emitir el
                    // mensaje de error.
                    ps.clearParameters();
                    ps.close();

                    sqlSent
                            = "Select facnume from faencabe "
                            + "Where facnume = ? "
                            + "and facnd = abs(?) "
                            + "and faccsfc = 1";
                    ps = conn.prepareStatement(sqlSent);
                    ps.setInt(1, doc);
                    ps.setInt(2, doc);
                    if (!UtilBD.existeRegistro(ps)) {
                        JOptionPane.showMessageDialog(null,
                                "Esta nota no ha sido aplicada aún.\n"
                                + "Debe aplicarla antes de imprimirla.",
                                "Error",
                                JOptionPane.ERROR_MESSAGE);
                        this.setAlwaysOnTop(true);
                        return false;
                    } // end if
                } // end if
                // Si estas líneas se ejecuta es porque todo está bien.
                this.setAlwaysOnTop(true);
                return true;
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,
                        ex.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                this.setAlwaysOnTop(true);
                new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
                return false;
            } // end try-catch
        } // end if
        // Fin Bosco agregado 10/03/2012.

        // Si no se va a imprimir en formulario no valido nada más
        if (!this.radFormulario.isSelected()) {
            this.setAlwaysOnTop(true);
            return true;
        } // end if

        String formulario = txtFormulario.getText().trim();

        // Debe haber un número válido en el campo
        if (formulario.equals("") || formulario.equals("0")) {
            JOptionPane.showMessageDialog(null,
                    "Debe elegir un número de formulario válido",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            this.setAlwaysOnTop(true);
            return false;
        } // end if

        // Verificar si a la factura ya le fue asignado un formulario
        String sqlSelect
                = "Select if(Exists(Select formulario "
                + "                 from faencabe   "
                + "                 Where facnume = " + documento
                + "                 and formulario = " + formulario + "), 1, 0)";
        try {
            rs = stat.executeQuery(sqlSelect);
            if (rs != null && rs.first() && rs.getBoolean(1)) {
                JOptionPane.showMessageDialog(null,
                        "Esta factura ya fue impresa en formulario."
                        + "\nNo se puede volver a imprimir."
                        + "\nLa reimpresión solo está permitida para PV.");
                this.setAlwaysOnTop(true);
                return todoCorrecto;
            } // end if

            // Validar si existe el consecutivo de formularios
            sqlSelect
                    = "Select if(Exists(Select formulario "
                    + "                 from faencabe "
                    + "                 Where formulario = " + formulario + "), 1, 0)";

            todoCorrecto = true;
            rs = stat.executeQuery(sqlSelect);
            if (rs != null && rs.first() && rs.getBoolean(1)) {
                JOptionPane.showMessageDialog(null,
                        "Este formulario ya fue utilizado."
                        + "\nDebe cambiar el consecutivo.");
                todoCorrecto = false;
            } // end if
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch

        this.setAlwaysOnTop(true);
        return todoCorrecto;

    } // end validarImpresion

    private void printDocument() {
        if (!validarImpresion()) {
            return;
        } // end if

        // Generar el xml para Hacienda
        if (this.chkXML.isSelected()) {
            int factura = Integer.parseInt(this.txtFacnume1.getText().trim());

            FacturaXML fact = new FacturaXML(this.conn);
            fact.setMode(FacturaXML.UNATTENDED);
            if (this.radFactura.isSelected()) {
                // Las facturas se dividen (para efectos de los xml) en
                // facturas electrónicas y tiquetes electrónicos.
                // Para que una factura se considere tiquete depende del cliente,
                // si éste es genérico entonces la factura se considera tiquete.
                int tipo = FacturaXML.FACTURA;
                try {
                    if (UtilBD.esClienteGenerico(conn, factura, 0)) {
                        tipo = FacturaXML.TIQUETE;
                    } // end if
                } catch (SQLException ex) {
                    Logger.getLogger(ImpresionFactura.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null,
                            ex.getMessage(),
                            "Impresión",
                            JOptionPane.ERROR_MESSAGE);
                    new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
                } // end try-catch
                
                fact.setTipo(tipo);
            } else if (this.radNotaC.isSelected()) {
                fact.setTipo(FacturaXML.NOTACR);
            } else {
                fact.setTipo(FacturaXML.NOTADB);
            } // end if-else

            fact.setRangoDocumentos(factura, factura);
            fact.runApp();
        } // end if

        this.setAlwaysOnTop(false);

        // Proceso de impresión.
        Reportes rpt = new Reportes(this.conn);
        rpt.setExportToPDF(this.chkExportToPDF.isSelected());
        rpt.imprimirFacNDNC(
                Integer.parseInt(documento), // Facnume
                Integer.parseInt(facnd),     // Facnd
                this.radPOS.isSelected(),  // Indica si se usa el formato POS
                facConIV,
                radFormulario.isSelected());

        // Enviar el pdf y el xml por correo
        if (this.chkSendMail.isSelected()) {
            boolean continuarEnvio = true;
            String mailAddress = "";
            try {
                mailAddress = UtilBD.getCustomerMail(conn, Integer.parseInt(documento), Integer.parseInt(facnd));
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null,
                        ex.getMessage(),
                        "Impresión",
                        JOptionPane.ERROR_MESSAGE);
                new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
                continuarEnvio = false;
            } // end try-catch

            // Validar que el xml haya sido aceptado
            if (continuarEnvio) {
                if (!documentoAceptado(Integer.parseInt(documento), Integer.parseInt(facnd))) {
                    continuarEnvio = false;
                    JOptionPane.showMessageDialog(null,
                            "El documento electrónico # " + documento + " aún no ha sido\n"
                            + "aceptado por el Ministerio de Hacienda.\n\n"
                            + "Correo no enviado al cliente.",
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                } // end if
            } // end if

            if (continuarEnvio) {
                EnviarCorreoFE correo = new EnviarCorreoFE();
                correo.setDestinatario(mailAddress);
                correo.setFacnd(Integer.parseInt(facnd));
                correo.setFacnume(Integer.parseInt(documento));
                correo.setTitulo("Factura electrónica - La Flor, S.A.");
                correo.setTexto("Envío automático.");

                boolean enviado = correo.sendMail("", conn); // Si se pone algo en el primer parámetro es para cambiar el remitente (funciona como una máscara)
                if (!enviado) {
                    JOptionPane.showMessageDialog(null,
                            correo.getError_msg(),
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                } else {
                    actualizarDocumentoElectronico(mailAddress);
                } // end if-else
            } // end if
        } // end enviar por correo

        if (!radFormulario.isSelected()) {
            this.setAlwaysOnTop(true);
            return;
        } // end if

        // Actualización del número de formulario.
        String sqlUpdate
                = "Update faencabe  "
                + "Set formulario = " + txtFormulario.getText().trim() + " "
                + "Where facnume =  " + documento + " "
                + "and facnd = 0";
        try {
            int reg = stat.executeUpdate(sqlUpdate);

            // Actualizar la tabla de consecutivos
            if (reg == 1) {
                sqlUpdate
                        = "Update config "
                        + "Set formulario = " + txtFormulario.getText().trim();
                reg = stat.executeUpdate(sqlUpdate);
            } // end if
            if (reg == 0) {
                JOptionPane.showMessageDialog(
                        null,
                        "No se pudo actualizar el número de formulario."
                        + "\nComuníquese con el Administrador del sistema.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            } // end if
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
        this.setAlwaysOnTop(true);
    } // end printDocument

    private void actualizarDocumentoElectronico(String mail) {
        String sqlSent
                = "Update faestadoDocElect "
                + "   Set xmlEnviado = 'S', fechaEnviado = now(), emailDestino = ? "
                + "Where facnume = ? and facnd = ?";
        try {
            PreparedStatement ps = conn.prepareStatement(sqlSent);
            ps.setString(1, mail);
            ps.setInt(2, Integer.parseInt(this.documento));
            ps.setInt(3, Integer.parseInt(this.facnd));
            CMD.update(ps);
            ps.close();
        } catch (SQLException ex) {
            Logger.getLogger(ImpresionFactura.class.getName()).log(Level.SEVERE, null, ex);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch

    } // end actualizarDocumentoElectronico

    /**
     * Determinar si un documento electrónico ya fue aceptado por Hacienda o no.
     *
     * @param facnume
     * @param facnd
     * @return
     */
    private boolean documentoAceptado(int facnume, int facnd) {
        boolean aceptado = false;
        String sqlSent
                = "Select estado from faestadoDocElect "
                + "Where facnume = ? and facnd = ?";
        try {
            PreparedStatement ps = conn.prepareStatement(sqlSent);
            ps.setInt(1, facnume);
            ps.setInt(2, facnd);
            ResultSet rs = CMD.select(ps);
            rs.first();
            aceptado = rs.getInt(1) == 4;
            ps.close();
        } catch (SQLException ex) {
            Logger.getLogger(ImpresionFactura.class.getName()).log(Level.SEVERE, null, ex);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch

        return aceptado;
    } // end documentoAceptado
}
