/*
 * DigitacionConteo.java
 *
 * Created on 29/01/2011, 07:42:00 PM
 */

package interfase.transacciones;

import Exceptions.EmptyDataSourceException;
import Mail.Bitacora;
import accesoDatos.UtilBD;
import interfase.otros.Buscador;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import logica.utilitarios.Ut;

/**
 *
 * @author Bosco Garita
 */
@SuppressWarnings("serial")
public class DigitacionConteo extends JFrame {

    private ResultSet  rs;
    private ResultSet  rsConteo;
    private final Statement  stat;
    private Connection conn = null;
    private String bodega;
    private boolean inicio = true;
    private boolean busquedaAut = false;
    private final Bitacora b = new Bitacora();
    
    
    /** Creates new form
     * @param c
     * @throws java.sql.SQLException
     * @throws Exceptions.EmptyDataSourceException */
    public DigitacionConteo(Connection c) throws SQLException, EmptyDataSourceException {
        initComponents();
        // Defino el escuchador con una clase anónima para controlar la
        // salida de esta pantalla.  Esto funciona simpre que se haya
        // establecido el siguiente parámetro:
        // setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE)
        // Esta pantalla lo hace en initComponents().
        addWindowListener(new WindowAdapter(){
            @Override
            public void windowClosing(WindowEvent e){
                cmdCerrarActionPerformed(null);
            } // end windowClosing
        } // end class
        ); // end Listener
        
        
        conn = c;

        stat = conn.createStatement(
                ResultSet.TYPE_SCROLL_INSENSITIVE,
                ResultSet.CONCUR_UPDATABLE);
        
        // Cargar las bodegas
        rs = stat.executeQuery("Select * from bodegas");

        if (rs == null || !rs.first()){
            return;
        } // end if

        Ut.fillComboBox(cboBodegas, rs, 2, false);
        inicio = false;
        cboBodegasActionPerformed(null);
        
    } // end constructor

    public void setConexion(Connection c){ conn = c; }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel12 = new javax.swing.JLabel();
        cboBodegas = new javax.swing.JComboBox();
        jPanel5 = new javax.swing.JPanel();
        btnInformacion = new javax.swing.JButton();
        cmdGuardar = new javax.swing.JButton();
        cmdCerrar = new javax.swing.JButton();
        lblCantidadAnterior = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblConteo = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtLinea = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        txtArtcode = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuArchivo = new javax.swing.JMenu();
        mnuGuardar = new javax.swing.JMenuItem();
        mnuSalir = new javax.swing.JMenuItem();
        mnuRegistro = new javax.swing.JMenu();
        mnuSelectivo = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Digitar conteo físico");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 51, 255));
        jLabel12.setText("Bodega");

        cboBodegas.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cboBodegas.setToolTipText("Tipo de documento a consultar");
        cboBodegas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboBodegasActionPerformed(evt);
            }
        });

        btnInformacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/information.png"))); // NOI18N
        btnInformacion.setToolTipText("Información");
        btnInformacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInformacionActionPerformed(evt);
            }
        });

        cmdGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZSAVE.png"))); // NOI18N
        cmdGuardar.setToolTipText("Guardar");
        cmdGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGuardarActionPerformed(evt);
            }
        });

        cmdCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/control-power.png"))); // NOI18N
        cmdCerrar.setToolTipText("Salir");
        cmdCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCerrarActionPerformed(evt);
            }
        });

        lblCantidadAnterior.setBackground(new java.awt.Color(248, 248, 163));
        lblCantidadAnterior.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        lblCantidadAnterior.setForeground(java.awt.Color.blue);
        lblCantidadAnterior.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCantidadAnterior.setText("0");
        lblCantidadAnterior.setToolTipText("Cantidad anterior");
        lblCantidadAnterior.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblCantidadAnterior.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblCantidadAnterior.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblCantidadAnteriorMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(cmdGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdCerrar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnInformacion))
                    .addComponent(lblCantidadAnterior, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8))
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnInformacion, cmdCerrar, cmdGuardar});

        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(lblCantidadAnterior)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                        .addComponent(cmdGuardar)
                        .addComponent(cmdCerrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(btnInformacion)))
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnInformacion, cmdCerrar, cmdGuardar});

        tblConteo.setAutoCreateRowSorter(true);
        tblConteo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Línea", "Código", "Descripción", "Cantidad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Short.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblConteo.setToolTipText("Haga click sobre uno de los encabezados de columna para cambiar el ordenamiento");
        tblConteo.setRowSelectionAllowed(false);
        tblConteo.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblConteo.getTableHeader().setReorderingAllowed(false);
        tblConteo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblConteoMouseClicked(evt);
            }
        });
        tblConteo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblConteoKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblConteo);
        tblConteo.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (tblConteo.getColumnModel().getColumnCount() > 0) {
            tblConteo.getColumnModel().getColumn(0).setMinWidth(40);
            tblConteo.getColumnModel().getColumn(0).setPreferredWidth(50);
            tblConteo.getColumnModel().getColumn(0).setMaxWidth(70);
            tblConteo.getColumnModel().getColumn(1).setMinWidth(50);
            tblConteo.getColumnModel().getColumn(1).setPreferredWidth(85);
            tblConteo.getColumnModel().getColumn(1).setMaxWidth(95);
            tblConteo.getColumnModel().getColumn(2).setMinWidth(100);
            tblConteo.getColumnModel().getColumn(2).setPreferredWidth(200);
            tblConteo.getColumnModel().getColumn(2).setMaxWidth(300);
            tblConteo.getColumnModel().getColumn(3).setMinWidth(50);
            tblConteo.getColumnModel().getColumn(3).setPreferredWidth(65);
            tblConteo.getColumnModel().getColumn(3).setMaxWidth(75);
        }

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Línea");

        txtLinea.setForeground(new java.awt.Color(255, 0, 51));
        txtLinea.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txtLinea.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtLinea.setText("0");
        txtLinea.setToolTipText("Buscar");
        txtLinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLineaActionPerformed(evt);
            }
        });
        txtLinea.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtLineaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtLineaFocusLost(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Código");

        txtArtcode.setToolTipText("Buscar");
        txtArtcode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtArtcodeActionPerformed(evt);
            }
        });
        txtArtcode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtArtcodeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtArtcodeFocusLost(evt);
            }
        });

        mnuArchivo.setText("Archivo");

        mnuGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        mnuGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZSAVE.JPG"))); // NOI18N
        mnuGuardar.setText("Guardar");
        mnuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuGuardarActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuGuardar);

        mnuSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.CTRL_MASK));
        mnuSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/control-power.png"))); // NOI18N
        mnuSalir.setText("Salir");
        mnuSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSalirActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuSalir);

        jMenuBar1.add(mnuArchivo);

        mnuRegistro.setText("Registro");

        mnuSelectivo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, 0));
        mnuSelectivo.setText("Conteo selectivo");
        mnuSelectivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSelectivoActionPerformed(evt);
            }
        });
        mnuRegistro.add(mnuSelectivo);

        jMenuBar1.add(mnuRegistro);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboBodegas, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtLinea, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtArtcode, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(cboBodegas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(txtLinea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtArtcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4))
        );

        setSize(new java.awt.Dimension(575, 572));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void mnuSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSalirActionPerformed
        dispose();
}//GEN-LAST:event_mnuSalirActionPerformed

    private void cboBodegasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboBodegasActionPerformed
        if (inicio) {
            return;
        }

        // Si el rs ya está cerrado lo vuelvo a cargar
        try{
            if (rs.isClosed()){
                rs = stat.executeQuery("Select * from bodegas");
            } // end if
            
            //Sincronizar el combo con el rs
            if (Ut.seek(
                    rs,
                    cboBodegas.getSelectedItem().toString(),
                    "descrip")){
                bodega = rs.getString("bodega");
            } // end if
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
            return;
        } // end catch
        
        
        
        // Inicializo la tabla para evitar que queden datos
        for (int row = 0; row < tblConteo.getRowCount(); row++){
            tblConteo.setValueAt(null, row, 0);
            tblConteo.setValueAt(null, row, 1);
            tblConteo.setValueAt(null, row, 2);
            tblConteo.setValueAt(null, row, 3);
        } // end for

        // Cargar la tabla con los datos del conteo.
        // Solamente se cargan los datos de la bodega seleccionada
        String sqlSelect =
            "Select " +
            "    a.linea,  " +
            "    a.bodega, " +
            "    a.artcode," +
            "    b.artdesc," +
            "    a.cantidad," +
            "    a.cantidad as anterior " +
            "from conteo a " +
            "Inner join inarticu b on a.artcode = b.artcode " +
            "Where a.bodega = " + "'" + bodega + "'" +
            " and InUseByUser in (user(), '')";
         
        try{
            Statement st = conn.createStatement(
                ResultSet.TYPE_SCROLL_INSENSITIVE,
                ResultSet.CONCUR_UPDATABLE);
            rsConteo = st.executeQuery(sqlSelect);
            if (rsConteo == null || !rsConteo.first()){
                return;
            } // end if
            // Establezco el tamaño exacto de filas de la tabla
            rsConteo.last();
            int dataRows = rsConteo.getRow();
            DefaultTableModel dtm = (DefaultTableModel) tblConteo.getModel();
            dtm.setRowCount(dataRows);
            tblConteo.setModel(dtm);

            int row = 0;
            rsConteo.beforeFirst();
            while(rsConteo.next()){
                tblConteo.setValueAt(rsConteo.getShort("linea"), row, 0);
                tblConteo.setValueAt(rsConteo.getString("artcode"), row, 1);
                tblConteo.setValueAt(rsConteo.getString("artdesc"), row, 2);
                tblConteo.setValueAt(rsConteo.getDouble("cantidad"), row, 3);
                row++;
            } // end while
        }catch (SQLException ex) {
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        }
    }//GEN-LAST:event_cboBodegasActionPerformed

    private void cmdGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGuardarActionPerformed
        // La clase Conteo corre en un hilo separado y muestra un
        // JProgressBar dentro de un JFrame que se crea en es mismo momento.
        // Esta clase recibe a este mismo objeto para efectos de ejecutar 
        // algunas tareas desde dentro de la misma clase.
        ConteoProgressBar conteo = new ConteoProgressBar(tblConteo,rsConteo,stat,this);
        conteo.setTitle("Guardar datos");
        conteo.setBorderTitle("Guardando registros..");
        conteo.setMaximumValue(tblConteo.getRowCount());
        conteo.setAccion(ConteoProgressBar.GUARDARCONTEO);
        conteo.setVisible(true);
        conteo.start();
        
}//GEN-LAST:event_cmdGuardarActionPerformed

    private void cmdCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCerrarActionPerformed
        // Antes de salir hay que verificar si hay cambios no guardados
        // para eso hay que realizar una búsqueda en el ResultSe rsConteo
        // comparando los datos de la columna cantidad del JTable contra
        // los datos que están en el campo "anterior".  Si estos datos son
        // diferentes significa que el usuario no ha guardato y por lo tanto
        // hay que advertir sobre la posible pérdida de datos y capturar
        // la desición del usuario.
        
        ConteoProgressBar conteo = new ConteoProgressBar(tblConteo,rsConteo,stat,this);
        conteo.setTitle("Verificar datos");
        conteo.setBorderTitle("Revisando registros..");
        conteo.setMaximumValue(tblConteo.getRowCount());
        conteo.setBodega(bodega);
        conteo.setAccion(ConteoProgressBar.VERIFICARDATOS);
        conteo.setVisible(true);
        conteo.start();
        
}//GEN-LAST:event_cmdCerrarActionPerformed

    private void mnuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuGuardarActionPerformed
        cboBodegasActionPerformed(evt);
}//GEN-LAST:event_mnuGuardarActionPerformed

    private void txtLineaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLineaFocusGained
        txtLinea.selectAll();
}//GEN-LAST:event_txtLineaFocusGained

    private void txtArtcodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtArtcodeFocusGained
        txtArtcode.selectAll();
    }//GEN-LAST:event_txtArtcodeFocusGained

    private void txtLineaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLineaFocusLost
        // Buscar en la tabla la línea que se encutra en txtLinea
        int linea = Integer.parseInt(txtLinea.getText().trim());
        
        // Si el valor es cero no realizo la búsqueda
        if (linea == 0) {
            return;
        }

        // Si el valor es encontrado la celda quedará seleccionada
        if (!Ut.seek(tblConteo, linea, 0)){
            JOptionPane.showMessageDialog(null, 
                    "La línea digitada no existe.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        } // end if
    }//GEN-LAST:event_txtLineaFocusLost

    private void txtLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLineaActionPerformed
        txtLinea.transferFocus();
    }//GEN-LAST:event_txtLineaActionPerformed

    private void txtArtcodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtArtcodeActionPerformed
        txtArtcode.transferFocus();
    }//GEN-LAST:event_txtArtcodeActionPerformed

    private void txtArtcodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtArtcodeFocusLost
        // Si el buscador automático está activado no hago nada
        if (this.busquedaAut){
            return;
        }
        
        // Buscar en la tabla el código que se encutra en txtArtcode
        String artcode = txtArtcode.getText().trim();

        // Si el código se encunentra en blanco no realizo la búsqueda
        if (artcode.equals("")) {
            return;
        }

        // Si encuentro el artículo por código entonces no hace falta el resto
        // del código.
        if (Ut.seek(tblConteo, artcode, 1)){
            return;
        } // end if
        
        // Bosco agregado 23/01/2016. Buscador automático.
        this.busquedaAut = true;
        JTextField tmp = new JTextField();
        tmp.setText(txtArtcode.getText());
        Buscador bd;
        // Ejecuto el buscador automático
        bd = new Buscador(
                    new java.awt.Frame(),
                    true,
                    "vistaconteo",
                    "artcode,bodega,artdesc,artexis,cantidad,diferencia",
                    "artdesc",
                    tmp,
                    conn,
                    3,
                    new String[] {"Código","Bodega","Descripción","Teórico","Físico","Diferencia"}
                    );
        bd.setTitle("Buscar artículos");
        bd.lblBuscar.setText("Descripción:");
        bd.buscar(txtArtcode.getText());
        bd.setColumnHeader(0, "Artículo");
        bd.setColumnHeader(1, "Bodega");
        bd.setColumnHeader(2, "Descripción");
        bd.setColumnHeader(3, "Teórico");
        bd.setColumnHeader(4, "Físico");
        bd.setColumnHeader(5, "Diferencia");
        
        bd.setVisible(true);
        // Aún cuando aquí se cambie el valor, éste no cambiará hasta que
        // corra por segunda vez.
        txtArtcode.setText(tmp.getText());

        // Aun cuando se cambia el valor aquí, el listener obligará al
        // proceso a correr dos veces: 1 con el primer valor y la otra
        // con el nuevo valor.  Si no se cambiara el valor de la variable
        // artcode entonces mostraria un error de "Artículo no existe"
        // porque inebitablemente el listener correrá con el valor original.
        // La única forma que he encontrado es que corra las dos veces con
        // el valor nuevo.
        artcode = tmp.getText();
        this.busquedaAut = false;
        txtArtcode.transferFocus();
        // Fin 
        
        // Si el valor es encontrado la celda quedará seleccionada
        if (!Ut.seek(tblConteo, artcode, 1)){
            JOptionPane.showMessageDialog(null, 
                    "El artículo digitado no existe.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        } // end if
    }//GEN-LAST:event_txtArtcodeFocusLost
    /**
     * Cuando el usuario decide hacer un conteo selectivo el sistema
     * tomará todas las cantidades en existencia y las pasará al campo
     * cantidad que sería lo que él tendría que digitar.  Esto se hace
     * con el fin de que el usuaria se dedique a cambiar los datos que
     * se contaron nada más.
     * Con lo que hay que tener cuidado es que si el usuario decide usar
     * la opción de Conteo Selectivo el sistema ignorará cualquier dato
     * que estén modificando otros usuarios en esta tabla de conteo y
     * volverá a cargar todo para uso del usuario que utilizó esta opción.
     * @param evt
     */
    private void mnuSelectivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSelectivoActionPerformed
        // Primero hago una revisión porque si no hay registros cargados
        // entonces el usuario lo que debe hacer es preparar el conteo.
        if (Ut.countNotNull(tblConteo, 0) == 0){
            JOptionPane.showMessageDialog(null,
                    "No existen datos para el conteo selectivo.\n\n" +
                    "Debe ejecutar el proceso de 'Preparar tabla para la toma física'\n" +
                    "en el menú Cierre y luego, en esta misma pantalla, elegir de nuevo\n" +
                    "la bodega para que se muestren los datos en la regilla y entonces\n" +
                    "si podrá usar esta opción.",
                    "Mensaje",
                    JOptionPane.INFORMATION_MESSAGE);
            return;
        } // end if

        // Se advierte al usuario.
        if (JOptionPane.showConfirmDialog(null,
                "Si decide hacer conteo selectivo tome en cuenta lo siguiente:\n" +
                "1. El sistema pondrá lo que hay en existencia en conteo\n" +
                "2. Si hay otros usuarios digitando conteo perderán sus datos\n" +
                "\n¿Realmente desea hacer esto?",
                "Confirme por favor",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE) != JOptionPane.YES_OPTION){
            return;
        } // end if


        String sqlUpdate = "Call ConteoSelectivo('" + bodega + "')";
        try {
            // Este metodo devuelve la cantidad de registros afectados
            // pero no lo reviso aquí porque la ejecución de código pasó
            // el filtro que existe al inicio de este evento es porque si
            // hay datos.  Por otra parte, si se produjera algún error
            // el mismo método tiene su propio mensaje que lo indicaría.
            UtilBD.SQLUpdate(conn, sqlUpdate);
        } catch (SQLException ex) {
            Logger.getLogger(DigitacionConteo.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        } // end try-catch

        // Vuelvo a cargar los datos
        cboBodegasActionPerformed(null);
    }//GEN-LAST:event_mnuSelectivoActionPerformed

    private void tblConteoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblConteoMouseClicked
        int row, col;
        row = tblConteo.getSelectedRow();
        col = tblConteo.getSelectedColumn();
        if (row < 0 || col != 3){
            return;
        } // end if
        if (tblConteo.getValueAt(row, col) != null){
            lblCantidadAnterior.setText(tblConteo.getValueAt(row, col).toString());
        } else {
            lblCantidadAnterior.setText("0");
        }
        tblConteo.setValueAt(null, row, col);
    }//GEN-LAST:event_tblConteoMouseClicked
/**
 * Este evento vigila si el usuario presiona alguna de las siguientes teclas:
 * ENTER, ARRIBA, ABAJO, CTRL
 * Si el usuario presiona una tecla distinta de éstas entonces tomo el valor
 * de la celda correspondiente (siguiente o anterior) y lo guardo en un textField
 * visible al usuario.  En el caso de CTRL también hago eso mismo pero antes 
 * seteo el valor a null.
 * La idea de poner el valor en null es para que cualuier valor que el usuario 
 * digige reemplace lo que está en la celda.
 * @param evt 
 */
    private void tblConteoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblConteoKeyPressed
        int row, col;
        row = tblConteo.getSelectedRow();
        col = tblConteo.getSelectedColumn();
        
        if (row < 0 || col != 3){
            return;
        } // end if
        // Si el usuario presionó ENTER o DOWN...
        switch (evt.getKeyCode()) {
            case java.awt.event.KeyEvent.VK_ENTER:
            case java.awt.event.KeyEvent.VK_DOWN:
                // ... sumo 1 a la fila.
                row++;
                if (row >= tblConteo.getRowCount()){
                    return;
                } // end if
                // Si el usuario presionó ARRIBA...
                break;
            case java.awt.event.KeyEvent.VK_UP:
                // ... resto 1 a la fila.
                row--;
                if (row < 0){
                    return;
                } // end if
                // Si el usuario presionó CTRL...
                break;
            case java.awt.event.KeyEvent.VK_CONTROL:
                // ... guardo el valor de la celda correspondiente para que el
                // usuario vea el valo anterior y luego la seteo con null
                if (tblConteo.getValueAt(row, col) != null){
                    lblCantidadAnterior.setText(tblConteo.getValueAt(row, col).toString());
                } else {
                    lblCantidadAnterior.setText("0");
                }
                tblConteo.setValueAt(null, row, col);
                return;
            default:
                // Si el usuario no presionó ENTER, UP, DOWN o CTRL
                return;
        }
        
        // Guardo el valor anterior de la celda.
        if (tblConteo.getValueAt(row, col) != null){
                lblCantidadAnterior.setText(tblConteo.getValueAt(row, col).toString());
        } else {
            lblCantidadAnterior.setText("0");
        }
        
    }//GEN-LAST:event_tblConteoKeyPressed

    private void btnInformacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInformacionActionPerformed
        JOptionPane.showMessageDialog(null,
            "Al hacer clic con el Mouse sobre una celda de la columna" +
            "\n" +
            "cantidad ésta quedará vacía y el valor se trasladará al" +
            "\n" +
            "campo que aparece al pie de esta misma columna." +
            "\n" +
            "Esto mismo sucederá si presiona la tecla CTRL." +
            "\n\n" +
            "Para recuperar el valor de la celda deberá hacer" +
            "\n" +
            "clic en el campo mencionado anteriormente.",
            "Información",
            JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnInformacionActionPerformed

    private void lblCantidadAnteriorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCantidadAnteriorMouseClicked
        int row, col;
        if (lblCantidadAnterior.getText().trim().isEmpty()){
            return;
        } // end if
        row = tblConteo.getSelectedRow();
        col = tblConteo.getSelectedColumn();
        tblConteo.setValueAt(Double.parseDouble(lblCantidadAnterior.getText()), row, col);
    }//GEN-LAST:event_lblCantidadAnteriorMouseClicked


    /**
     * @param c
    */
    public static void main(Connection c) {
        try {
            //JFrame.setDefaultLookAndFeelDecorated(true);
            // Bosco agregado 18/07/2011
            // Integración del segundo nivel de seguridad.
            if (!UtilBD.tienePermiso(c,"DigitacionConteo")){
                JOptionPane.showMessageDialog(null,
                        "Usted no está autorizado para ejecutar este proceso",
                        "Error - Permisos",
                        JOptionPane.ERROR_MESSAGE);
                return;
            } // Fin Bosco agregado 18/07/2011
            // Fin Bosco agregado 18/07/2011
        } catch (Exception ex) {
            Logger.getLogger(DigitacionConteo.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            DigitacionConteo run = new DigitacionConteo(c);
            run.setVisible(true);
        } catch (SQLException | EmptyDataSourceException ex) {
             JOptionPane.showMessageDialog(null,
                     ex.getMessage(),
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
        }
    } // end run
    
    public void cargarDatos(){
        cboBodegasActionPerformed(null);
    }
    
    public Connection getConn(){
        return this.conn;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnInformacion;
    private javax.swing.JComboBox cboBodegas;
    private javax.swing.JButton cmdCerrar;
    private javax.swing.JButton cmdGuardar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCantidadAnterior;
    private javax.swing.JMenu mnuArchivo;
    private javax.swing.JMenuItem mnuGuardar;
    private javax.swing.JMenu mnuRegistro;
    private javax.swing.JMenuItem mnuSalir;
    private javax.swing.JMenuItem mnuSelectivo;
    private javax.swing.JTable tblConteo;
    private javax.swing.JTextField txtArtcode;
    private javax.swing.JFormattedTextField txtLinea;
    // End of variables declaration//GEN-END:variables
} // end class
