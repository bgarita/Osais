package interfase.transacciones;

import Mail.Bitacora;
import accesoDatos.CMD;
import accesoDatos.UtilBD;
import static accesoDatos.UtilBD.getCajaForThisUser;
import interfase.consultas.ConsultaFactNDNC_CXC;
import interfase.otros.Buscador;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import logica.Cacaja;
import logica.Catransa;
import logica.Usuario;
import logica.utilitarios.FormatoTabla;
import logica.utilitarios.Ut;

/**
 *
 * @author bosco
 */
public class PendienteCXC extends javax.swing.JFrame {
    private static final long serialVersionUID = 10L;
    private final Bitacora b = new Bitacora();

    /**
     * Creates new form PendienteCXC
     */
    private final Connection conn;
    private final FormatoTabla formato;
    
    public PendienteCXC(Connection c) {
        initComponents();
        this.conn = c;
        this.txtUser.setText(Usuario.USUARIO);
        formato = new FormatoTabla();
        try {
            formato.formatColumn(tblDetalle, 4, FormatoTabla.H_RIGHT, Color.BLUE);
            formato.formatColumn(tblDetalle, 7, FormatoTabla.H_RIGHT, Color.MAGENTA);
            formato.formatColumn(tblDetalle, 8, FormatoTabla.H_RIGHT, Color.ORANGE);
        } catch (Exception ex) {
            Logger.getLogger(PendienteCXC.class.getName()).log(Level.SEVERE, null, ex);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
        cargarDatos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblDetalle = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        txtMonto = new javax.swing.JFormattedTextField();
        jSeparator1 = new javax.swing.JSeparator();
        btnAgregar = new javax.swing.JButton();
        btnPago = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtSaldocxc = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        txtBalanceD = new javax.swing.JFormattedTextField();
        jLabel6 = new javax.swing.JLabel();
        txtCliente = new javax.swing.JTextField();
        txtUser = new javax.swing.JTextField();
        btnCerrarDia = new javax.swing.JButton();
        btnRecalcular = new javax.swing.JButton();
        lblSumaSaldo = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtFacnume = new javax.swing.JFormattedTextField();
        btnBrowse = new javax.swing.JButton();
        btnVerFactura = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Pendientes de cobro");

        tblDetalle.setAutoCreateRowSorter(true);
        tblDetalle.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Fecha", "Cliente", "Usuario", "Monto", "Fecha pago", "Recibido por", "Monto", "Saldo", "Factura"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDetalle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDetalleMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblDetalle);
        if (tblDetalle.getColumnModel().getColumnCount() > 0) {
            tblDetalle.getColumnModel().getColumn(0).setMaxWidth(45);
            tblDetalle.getColumnModel().getColumn(1).setPreferredWidth(90);
            tblDetalle.getColumnModel().getColumn(1).setMaxWidth(120);
            tblDetalle.getColumnModel().getColumn(3).setPreferredWidth(150);
            tblDetalle.getColumnModel().getColumn(3).setMaxWidth(200);
            tblDetalle.getColumnModel().getColumn(4).setMaxWidth(120);
            tblDetalle.getColumnModel().getColumn(5).setPreferredWidth(100);
            tblDetalle.getColumnModel().getColumn(5).setMaxWidth(120);
            tblDetalle.getColumnModel().getColumn(7).setMaxWidth(120);
            tblDetalle.getColumnModel().getColumn(8).setMaxWidth(120);
            tblDetalle.getColumnModel().getColumn(9).setPreferredWidth(80);
            tblDetalle.getColumnModel().getColumn(9).setMaxWidth(100);
        }

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel1.setText("ID");

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel2.setText("Usuario");

        jLabel3.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel3.setText("Monto");

        txtID.setEditable(false);
        txtID.setForeground(java.awt.Color.blue);
        txtID.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtMonto.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtMonto.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtMonto.setToolTipText("0.00");
        txtMonto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtMontoFocusGained(evt);
            }
        });
        txtMonto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMontoActionPerformed(evt);
            }
        });

        btnAgregar.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        btnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/blogs--plus.png"))); // NOI18N
        btnAgregar.setMnemonic('A');
        btnAgregar.setText("Agregar registro");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnPago.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        btnPago.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/money_add.png"))); // NOI18N
        btnPago.setMnemonic('R');
        btnPago.setText("Registrar pago");
        btnPago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPagoActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel4.setText("Saldo por cobrar:");

        txtSaldocxc.setEditable(false);
        txtSaldocxc.setForeground(java.awt.Color.blue);
        txtSaldocxc.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtSaldocxc.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel5.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel5.setText("Balance diario:");

        txtBalanceD.setEditable(false);
        txtBalanceD.setForeground(java.awt.Color.blue);
        txtBalanceD.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtBalanceD.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel6.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel6.setText("Cliente");

        txtCliente.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtClienteFocusGained(evt);
            }
        });
        txtCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtClienteActionPerformed(evt);
            }
        });

        txtUser.setEditable(false);
        txtUser.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtUserFocusGained(evt);
            }
        });
        txtUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUserActionPerformed(evt);
            }
        });

        btnCerrarDia.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        btnCerrarDia.setText("Cerrar día");
        btnCerrarDia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarDiaActionPerformed(evt);
            }
        });

        btnRecalcular.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        btnRecalcular.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/calculator.png"))); // NOI18N
        btnRecalcular.setMnemonic('c');
        btnRecalcular.setText("Recalcular");
        btnRecalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecalcularActionPerformed(evt);
            }
        });

        lblSumaSaldo.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        lblSumaSaldo.setForeground(java.awt.Color.magenta);
        lblSumaSaldo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSumaSaldo.setText(" ");

        jLabel7.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel7.setText("Factura");

        txtFacnume.setColumns(6);
        txtFacnume.setForeground(new java.awt.Color(255, 0, 51));
        txtFacnume.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0"))));
        txtFacnume.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtFacnume.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFacnumeFocusGained(evt);
            }
        });
        txtFacnume.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFacnumeActionPerformed(evt);
            }
        });

        btnBrowse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/binocular.png"))); // NOI18N
        btnBrowse.setToolTipText("Seleccionar factura...");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        btnVerFactura.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        btnVerFactura.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/database_lightning.png"))); // NOI18N
        btnVerFactura.setText("Ver factura");
        btnVerFactura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerFacturaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(3, 3, 3)
                        .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jLabel7)
                        .addGap(2, 2, 2)
                        .addComponent(txtFacnume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBrowse)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addGap(4, 4, 4)
                        .addComponent(txtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addGap(4, 4, 4)
                        .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addGap(4, 4, 4)
                        .addComponent(txtMonto, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAgregar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPago)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRecalcular)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnVerFactura)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCerrarDia))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSaldocxc, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(93, 93, 93)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtBalanceD, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblSumaSaldo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAgregar, btnCerrarDia, btnPago, btnRecalcular, btnVerFactura});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMonto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(txtFacnume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregar)
                    .addComponent(btnPago)
                    .addComponent(btnCerrarDia)
                    .addComponent(btnRecalcular)
                    .addComponent(btnVerFactura))
                .addGap(4, 4, 4)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(txtBalanceD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblSumaSaldo))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(txtSaldocxc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tblDetalleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDetalleMouseClicked
        // Primero limpio los controles para evitar basura.
        limpiarControles();
        
        int row = this.tblDetalle.getSelectedRow();
        double saldo;
        
        if (row < 0 || this.tblDetalle.getValueAt(row, 0) == null){
            return;
        } // end if
        
        try {
            saldo = Double.parseDouble(
                    Ut.quitarFormato(this.tblDetalle.getValueAt(row, 8).toString()));
        } catch (Exception ex) {
            Logger.getLogger(PendienteCXC.class.getName()).log(Level.SEVERE, null, ex);
            saldo = 0;
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
        
        if (saldo == 0){
            return;
        } // end if
        
        this.txtID.setText(this.tblDetalle.getValueAt(row, 0).toString());
        this.txtCliente.setText(this.tblDetalle.getValueAt(row, 2).toString());
        this.txtUser.setText(Usuario.USUARIO);
        this.txtMonto.setText(this.tblDetalle.getValueAt(row, 8).toString());
        this.txtFacnume.setText(this.tblDetalle.getValueAt(row, 9).toString());
        
        // Deshabilito el botón agregar y los campos que no deben ser modificados
        this.btnAgregar.setEnabled(false);
        this.txtCliente.setEnabled(false);
        
        sumarCeldas();
        
    }//GEN-LAST:event_tblDetalleMouseClicked

    private void btnPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPagoActionPerformed
        Object ID = this.txtID.getText().trim();
        int row = Ut.seek(tblDetalle, ID, 0);
        if (row < 0){
            JOptionPane.showMessageDialog(null, 
                    "No pude localizar la fila # " + ID + " en la tabla.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if
        
        // Validar que el monto no sea negativo o mayor que el saldo
        double saldo, abono = 0;
        try {
            saldo = Double.parseDouble(
                    Ut.quitarFormato(this.tblDetalle.getValueAt(row, 8).toString()));
            abono = Double.parseDouble(Ut.quitarFormato(this.txtMonto.getText().trim()));
        } catch (Exception ex) {
            Logger.getLogger(PendienteCXC.class.getName()).log(Level.SEVERE, null, ex);
            saldo = 0;
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
        
        if (abono <= 0){
            JOptionPane.showMessageDialog(null, 
                    "El monto del abono no es válido.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if
        
        if (abono > saldo){
            JOptionPane.showMessageDialog(null, 
                    "El monto del abono es mayor que el saldo.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if
        
        // El usuario no debe quedar en blanco.
        if (this.txtUser.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(null, 
                    "El usuario no puede quedar en blanco.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if
        
        // Actualizar la base de datos
        String sqlSent;
        PreparedStatement ps;
        ResultSet rs;
        String errorMsg = "";
        String cliente;
        
        
        try {
            // Inicio la transacción
            CMD.transaction(conn, CMD.START_TRANSACTION);
        } catch (SQLException ex) {
            Logger.getLogger(PendienteCXC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return;
        } // end try-catch
        
        sqlSent = 
                "Update cxcotros Set   " +
                "   fechapago = now(), " +
                "   recibidopor = ?,   " +
                "   montorecibido = montorecibido + ?  " +
                "Where ID = ?";
        
        try {
            ps = conn.prepareStatement(sqlSent);
            ps.setString(1, this.txtUser.getText().trim());
            ps.setDouble(2, abono);
            ps.setInt(3, Integer.parseInt(ID.toString()));
            CMD.update(ps);
            ps.close();
            
            //****************************************************************
            // Aquí se ejecuta el código para registrar en caja.
            // La condición es que el usuario sea un cajero.
            //****************************************************************
            /*
             Obtener el cliente para este registro
            */
            // En este caso el codigo de cliente no es relevante.
            // Si llegara a serlo hay que tomarlo de faencabe usando
            // el campo documento de cxcotros como referencia.
            
            cliente = "N/A";
            errorMsg = registrarCaja(ID.toString(), cliente,"D",abono);
            
            if (errorMsg.isEmpty()){
                this.limpiarControles();
                this.cargarDatos();
            } // end if
            
            ps.close();
            
            //this.btnAgregar.setEnabled(true);
            //this.txtUser.setEditable(true);
            this.txtCliente.setEnabled(true);
        } catch (SQLException | NumberFormatException ex) {
            Logger.getLogger(PendienteCXC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            errorMsg = ex.getMessage();
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
        
        try {
            if (errorMsg.isEmpty()){
                CMD.transaction(conn, CMD.COMMIT);
            } else {
                CMD.transaction(conn, CMD.ROLLBACK);
            } // end if-else
        } catch(SQLException ex){
            Logger.getLogger(PendienteCXC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            System.exit(1); // No debe seguir activo
            return;
        } // end try-catch
        
        if (errorMsg.isEmpty()){
            JOptionPane.showMessageDialog(null, 
                    "Registro actualizado satisfactoriamente.",
                    "Mensaje",
                    JOptionPane.INFORMATION_MESSAGE);
        } // end if
        
    }//GEN-LAST:event_btnPagoActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        // Validar que el monto sea mayor a cero
        double montocxc;
        try {
            montocxc = Double.parseDouble(
                    Ut.quitarFormato(this.txtMonto.getText().trim()));
        } catch (Exception ex) {
            Logger.getLogger(PendienteCXC.class.getName()).log(Level.SEVERE, null, ex);
            montocxc = 0;
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
        
        if (montocxc <= 0){
            JOptionPane.showMessageDialog(null, 
                    "El monto debe ser mayor que cero.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if
        
        // El usuario no debe quedar en blanco.
        if (this.txtUser.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(null, 
                    "El usuario no puede quedar en blanco.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if
        
        // El cliente no debe quedar en blanco.
        if (this.txtCliente.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(null, 
                    "El cliente no puede quedar en blanco.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if
        
        // Actualizar la base de datos
        String sqlSent;
        PreparedStatement ps;
        ResultSet rs;
        int facnume, ID, clicode;
        String errorMsg = "";
        
        sqlSent = 
                "Insert into cxcotros    " +
                "   Select (Select max(id) + 1 from cxcotros), now(), ?, ?, ?, null, '', 0,?" ;
        try {
            // Inicio la transacción
            CMD.transaction(conn, CMD.START_TRANSACTION);
        } catch (SQLException ex) {
            Logger.getLogger(PendienteCXC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return;
        } // end try-catch
        
        try {
            facnume = Integer.parseInt(this.txtFacnume.getText().trim());
            ps = conn.prepareStatement(sqlSent);
            ps.setString(1, this.txtCliente.getText().trim());
            ps.setString(2, this.txtUser.getText().trim());
            ps.setDouble(3, montocxc);
            ps.setInt(4, facnume);
            CMD.update(ps);
            ps.close();
            
            //****************************************************************
            // Aquí se ejecuta el código para registrar en caja.
            // La condición es que el usuario sea un cajero.
            //****************************************************************
            /*
             Obtener el número de ID y el cliente para este registro
            */
            sqlSent = 
                    "Select " +
                    "   (Select max(id) from cxcotros) as id, " +
                    "   (Select clicode from faencabe Where facnume = ?) as clicode";
            ps = conn.prepareStatement(sqlSent, 
                    ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ps.setInt(1, facnume);
            rs = CMD.select(ps);
            if (rs == null || !rs.first()){
                errorMsg = "No pude obtener el número de registro para esta transacción";
            } // end if
            
            // Si no hay error procedo a establecer el número de ID y a registrar la transacción
            if (errorMsg.isEmpty()){
                ID      = rs.getInt("id");
                clicode = rs.getInt("clicode");
                errorMsg = registrarCaja(ID+"", clicode+"","R",montocxc);
            } // end if
            
            if (errorMsg.isEmpty()){
                this.limpiarControles();
                this.cargarDatos();
            } // end if
            
            ps.close();
        } catch (SQLException | NumberFormatException ex) {
            Logger.getLogger(PendienteCXC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            errorMsg = ex.getMessage();
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
        
        
        try {
            if (errorMsg.isEmpty()){
                CMD.transaction(conn, CMD.COMMIT);
            } else {
                CMD.transaction(conn, CMD.ROLLBACK);
            } // end if-else
        } catch(SQLException ex){
            Logger.getLogger(PendienteCXC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            System.exit(1); // No debe seguir activo
            return;
        } // end try-catch
        
        if (!errorMsg.isEmpty()){
            JOptionPane.showMessageDialog(null, 
                    errorMsg,
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if
        
        JOptionPane.showMessageDialog(null, 
                "Registro agregado satisfactoriamente.",
                "Mensaje",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void txtClienteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtClienteFocusGained
        txtCliente.selectAll();
    }//GEN-LAST:event_txtClienteFocusGained

    private void txtClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtClienteActionPerformed
        txtCliente.transferFocus();
    }//GEN-LAST:event_txtClienteActionPerformed

    private void txtUserFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUserFocusGained
        txtUser.selectAll();
    }//GEN-LAST:event_txtUserFocusGained

    private void txtUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUserActionPerformed
        txtUser.transferFocus();
    }//GEN-LAST:event_txtUserActionPerformed

    private void txtMontoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMontoFocusGained
        txtMonto.selectAll();
    }//GEN-LAST:event_txtMontoFocusGained

    private void txtMontoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMontoActionPerformed
        txtMonto.transferFocus();
    }//GEN-LAST:event_txtMontoActionPerformed

    private void btnCerrarDiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarDiaActionPerformed
        int resp =
                JOptionPane.showConfirmDialog(null, 
                        "Este cierre debe ejecutarse cuando ya haya cerrado la caja!\n" +
                        "Recuerde que una vez cerrado el día no podrá ver los registros\n" +
                        "cancelados el día de hoy.  De igual forma tampoco podrá ver\n" +
                        "los pagos realizados hoy.\n" +
                        "Solo se mostrará el movimiento neto.\n\n" +
                        "¿Realmente desea cerrar el día?", 
                        "Advertencia",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.WARNING_MESSAGE);
        if (resp != JOptionPane.YES_OPTION){
            return;
        } // end if
        
        // Traslado toda la tabla al histórico antes de realizar cualquier acción
        String sqlSent =
                "Insert into hcxcotros " +
                "   Select id,fechacrea,user,montocxc,fechapago,recibidopor," +
                "   montorecibido, now() " +
                "   from cxcotros";
        try {
            PreparedStatement ps = conn.prepareStatement(sqlSent);
            CMD.transaction(conn, CMD.START_TRANSACTION);
            
            CMD.update(ps);
            ps.close();
            
            // Traslado el saldo y elimino los abonos
            sqlSent = 
                    "Update cxcotros Set " +
                    "   montocxc = (montocxc - montorecibido), " +
                    "   montorecibido = 0, " +
                    "   fechapago = null,  " +
                    "   recibidopor = ''";
            ps = conn.prepareStatement(sqlSent);
            CMD.update(ps);
            ps.close();
            
            // Elimino los registros que hayan quedado cancelados
            sqlSent =
                    "Delete from cxcotros Where montocxc = 0";
            ps = conn.prepareStatement(sqlSent);
            CMD.update(ps);
            ps.close();
            
            CMD.transaction(conn, CMD.COMMIT);
        } catch (SQLException ex) {
            Logger.getLogger(PendienteCXC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            try {
                CMD.transaction(conn, CMD.ROLLBACK);
            } catch (SQLException ex1) {
                Logger.getLogger(PendienteCXC.class.getName()).log(Level.SEVERE, null, ex1);
                JOptionPane.showMessageDialog(null, 
                        "Ha ocurrido un error en el motor de base de datos.\n" +
                        "El sistema se cerrará para proteger la integridad.", 
                        "Error", 
                        JOptionPane.ERROR_MESSAGE);
                b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
                System.exit(1);
            } // end try-catch
            return;
        } // end try-catch
        
        JOptionPane.showMessageDialog(null, 
                "Cierre diario terminado satisfactoriamente.",
                "Mensaje",
                JOptionPane.INFORMATION_MESSAGE);
        this.cargarDatos();
    }//GEN-LAST:event_btnCerrarDiaActionPerformed

    private void btnRecalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecalcularActionPerformed
        this.limpiarControles();
        this.cargarDatos();
        this.txtCliente.setEnabled(true);
        //this.txtUser.setEnabled(true);
        this.btnAgregar.setEnabled(true);
    }//GEN-LAST:event_btnRecalcularActionPerformed

    private void txtFacnumeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFacnumeActionPerformed
        String sqlSent = 
                "Select clidesc from " +
                "faencabe a " +
                "Inner join inclient i on a.clicode = i.clicode " +
                "Where facnume = ?";
        PreparedStatement ps;
        ResultSet rs;
        
        try {
            int facnume = Integer.parseInt(this.txtFacnume.getText().trim());
            ps = conn.prepareStatement(sqlSent,
                    ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ps.setInt(1, facnume);
            rs = CMD.select(ps);
            this.btnAgregar.setEnabled(true);
            if (!rs.first()){
                ps.close();
                JOptionPane.showMessageDialog(null, 
                        "Factura no existe.", 
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                this.btnAgregar.setEnabled(false);
                return;
            } // end if
            
            this.txtCliente.setText(rs.getString(1));
            ps.close();
        } catch (NumberFormatException | SQLException ex) {
            Logger.getLogger(PendienteCXC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
        
        this.txtFacnume.transferFocus();
        this.txtUser.setText(Usuario.USUARIO);
    }//GEN-LAST:event_txtFacnumeActionPerformed

    private void txtFacnumeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFacnumeFocusGained
        this.btnAgregar.setEnabled(false);
    }//GEN-LAST:event_txtFacnumeFocusGained

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        String sqlSent, title;
        JTextField obFactura, obMonto;
        Buscador bd;
        obFactura = new JTextField("0");
        obMonto = new JTextField("0");
        
        title = "Últimas 50 facturas de contado...";
        
        sqlSent =
                "Select  " +
                "	f.facnume, " +
                "	i.clidesc, " +
                "	f.facmont, " +
                "	f.facfechac " +
                "from faencabe f " +
                "Inner join inclient i on f.clicode = i.clicode " +
                "Where f.facnume > 0 and f.facnd = 0 " +
                "and f.facplazo = 0 " +
                "and f.facestado = '' " +
                "order by 4 desc " +
                "Limit 50";
        
        bd = new Buscador(new java.awt.Frame(), true,
            //"faencabe a inner join inclient b on a.clicode = b.clicode",
            "Table definition not necesary",
            //"a.facnume,b.clidesc","b.clidesc",this.txtFacnume,conn);
        "Field definition not necesary","f.facnume",obFactura,conn);

        bd.setTitle(title);
        bd.lblBuscar.setText("Descripción:");
        
        bd.setBuiltInQuery(sqlSent);
        
        bd.setColumnHeader(0, "Factura");
        bd.setColumnHeader(1, "Cliente");
        bd.setColumnHeader(2, "Monto");
        bd.setColumnHeader(3, "Fecha y hora de registro");
        
        bd.setObjetoRetorno2(obMonto, 2);

        bd.setVisible(true);
        bd.dispose();

        if (obFactura.getText().trim().isEmpty()){
            return;
        } // end if
        
        this.txtFacnume.setText(obFactura.getText().trim());
        this.txtMonto.setText(obMonto.getText().trim());
        this.txtFacnumeActionPerformed(evt);
        this.txtCliente.requestFocusInWindow();
    }//GEN-LAST:event_btnBrowseActionPerformed

    private void btnVerFacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerFacturaActionPerformed
        ConsultaFactNDNC_CXC c;
        try {
            c = new ConsultaFactNDNC_CXC(conn, this.txtFacnume.getText().trim(), "1");
            c.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(PendienteCXC.class.getName()).log(Level.SEVERE, null, ex);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
        
    }//GEN-LAST:event_btnVerFacturaActionPerformed

    /**
     * @param c
     */
    public static void main(final Connection c) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PendienteCXC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PendienteCXC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PendienteCXC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PendienteCXC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        try {
            /* Create and display the form */
            if (!UtilBD.tienePermiso(c,"PendienteCXC")){
                JOptionPane.showMessageDialog(null,
                        "Usted no está autorizado para ejecutar este proceso",
                        "Error - Permisos",
                        JOptionPane.ERROR_MESSAGE);
                return;
            } // end if
        } catch (Exception ex) {
            Logger.getLogger(PendienteCXC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new PendienteCXC(c).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnCerrarDia;
    private javax.swing.JButton btnPago;
    private javax.swing.JButton btnRecalcular;
    private javax.swing.JButton btnVerFactura;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblSumaSaldo;
    private javax.swing.JTable tblDetalle;
    private javax.swing.JFormattedTextField txtBalanceD;
    private javax.swing.JTextField txtCliente;
    private javax.swing.JFormattedTextField txtFacnume;
    private javax.swing.JTextField txtID;
    private javax.swing.JFormattedTextField txtMonto;
    private javax.swing.JFormattedTextField txtSaldocxc;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables

    private void cargarDatos() {
        // Se deben cargar solo los registros con saldo > 0 o que sean de hoy
        String sqlSent;
        PreparedStatement ps;
        ResultSet rs;
        Date hoy = new Date();
        double saldocxc = 0, montoHoy = 0, pagoHoy = 0, balanceD = 0;
        
        // Cargar los registros con saldo y los que son de hoy
        sqlSent = 
                "SELECT `cxcotros`.`id`,         " +
                "    dtoc(`cxcotros`.`fechacrea`) as fechacrea," +
                "    `cxcotros`.`cliente`,       " +
                "    `cxcotros`.`user`,          " +
                "    `cxcotros`.`montocxc`,      " +
                "    dtoc(`cxcotros`.`fechapago`) as fechapago," +
                "    `cxcotros`.`recibidopor`,   " +
                "    `cxcotros`.`montorecibido`, " +
                "   (`cxcotros`.`montocxc` - `cxcotros`.`montorecibido`) as saldo, " +
                "   `cxcotros`.facnume " +
                "FROM `cxcotros`" +
                "WHERE (montocxc - recibidopor) > 0 " +
                "or Date(fechacrea) = Date(now())";
        try {
            ps = conn.prepareStatement(sqlSent, 
                    ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs = CMD.select(ps);
            
            if (rs == null || !rs.first()){
                ps.close();
                return;
            } // end if
            
            // Obtener el número de registros
            rs.last();
            int rows = rs.getRow();
            
            // Establecer el tamaño de la tabla
            DefaultTableModel dtm = (DefaultTableModel) this.tblDetalle.getModel();
            if (rows > dtm.getRowCount()){
                dtm.setRowCount(rows);
                this.tblDetalle.setModel(dtm);
            } // end if
            
            Ut.clearJTable(tblDetalle);
            
            // Recorrer el rs para cargar la tabla
            for (int row = 1; row <= rows; row++){
                rs.absolute(row);
                saldocxc += rs.getDouble("saldo");
                
                if (rs.getString("fechacrea").equals(Ut.dtoc(hoy))){
                    montoHoy += rs.getDouble("montocxc");
                } // end if
                
                if (rs.getString("fechapago") != null 
                        && rs.getString("fechapago").equals(Ut.dtoc(hoy))){
                    pagoHoy  += rs.getDouble("montorecibido");
                } // end if
                
                this.tblDetalle.setValueAt(rs.getObject("id"), (row-1), 0);
                this.tblDetalle.setValueAt(rs.getObject("fechacrea"), (row-1), 1);
                this.tblDetalle.setValueAt(rs.getObject("cliente"), (row-1), 2);
                this.tblDetalle.setValueAt(rs.getObject("user"), (row-1), 3);
                this.tblDetalle.setValueAt(
                        Ut.setDecimalFormat(rs.getString("montocxc"),"#,##0.00"), (row-1), 4);
                this.tblDetalle.setValueAt(rs.getObject("fechapago"), (row-1), 5);
                this.tblDetalle.setValueAt(rs.getObject("recibidopor"), (row-1), 6);
                this.tblDetalle.setValueAt(
                        Ut.setDecimalFormat(rs.getString("montorecibido"),"#,##0.00"), (row-1), 7);
                this.tblDetalle.setValueAt(
                        Ut.setDecimalFormat(rs.getString("saldo"),"#,##0.00"), (row-1), 8);
                this.tblDetalle.setValueAt(rs.getObject("facnume"), (row-1), 9);
            } // end for
            ps.close();
            
            this.txtSaldocxc.setText(Ut.setDecimalFormat(saldocxc + "","#,##0.00"));
            this.txtBalanceD.setText(Ut.setDecimalFormat((pagoHoy - montoHoy) + "","#,##0.00"));
            
        } catch (Exception ex) {
            Logger.getLogger(PendienteCXC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
    } // end cargarDatos
   
    private void limpiarControles() {
        this.txtID.setText("");
        this.txtCliente.setText("");
        this.txtUser.setText("");
        this.txtMonto.setText("0.00");
        this.txtBalanceD.setText("0.00");
        this.txtSaldocxc.setText("0.00");
        this.lblSumaSaldo.setText("");
        this.txtFacnume.setText("0");
    } // end limpiarControles

    private void sumarCeldas() {
        double saldo = 0;
        int[] rows = this.tblDetalle.getSelectedRows();
        for (int row:rows){
            if (tblDetalle.getValueAt(row, 8) == null){
                continue;
            } // end if
            try {
                saldo  +=
                        Double.parseDouble(
                                Ut.quitarFormato(
                                tblDetalle.getValueAt(row, 8).toString()));
            } catch (Exception ex) {
                Logger.getLogger(PendienteCXC.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, 
                        ex.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                saldo = 0;
                b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
                break;
            } // end try-catch
        } // end for
        
        
        try {
            this.lblSumaSaldo.setText(
                    "SUMA(Saldo) = " + Ut.setDecimalFormat(saldo+"", "#,##0.00"));
        } catch (Exception ex) {
            Logger.getLogger(PendienteCXC.class.getName()).log(Level.SEVERE, null, ex);
            Logger.getLogger(PendienteCXC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
    } // end sumarCeldas
    
    // Este método es distinto de los otros ya que este no debe actualizar
    // el módulo que lo invocó como facturación o CXP.
    private String registrarCaja(String factura, String cliente, String tipomov, double monto) {
        int tipopago;           // 0 = Desconocido, 1 = Efectivo, 2 = cheque, 3 = tarjeta, 4 = Transferencia
        int idbanco;            // Código de banco
        int recnumeca;          // Número de recibo de caja
        Calendar cal;           // Se usa para obtener la fecha de hoy
        String sqlSent;         // Se usa para crear las sentencias SQL
        PreparedStatement ps;   // Sentencias SQL preparadas
        int idtarjeta;          // Número de tarjeta de débito o crédito
        String errorMsg;        // Mensajes de error
        Cacaja caja;            // Objeto para el manejo de la caja
        Catransa tran;          // Objeto para el registro de la transacción en cajas
        
        errorMsg = "";
        
        // Determinar a cual caja esta asignado el usuario
        int cajaN; // Numero de caja
        try {
            cajaN = getCajaForThisUser(Usuario.USUARIO, conn);
        } catch (SQLException ex) {
            Logger.getLogger(RegistroFacturasC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            errorMsg = ex.getMessage();
            cajaN = -1;
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
        
        // Crear el objeto caja con el número correspondiente al usuario
        caja = new Cacaja(cajaN, conn);
        
        if (errorMsg.isEmpty()){
            if (caja.isError()){
                errorMsg = caja.getMensaje_error();
            } else {
                // Abrir la caja y determinar cualquier tipo de error como
                // que el usuario no esté asignado a la caja o que esté inactivo.
                caja.abrir(conn);
                
                if (caja.isError()){
                    errorMsg = caja.getMensaje_error();
                } // end if
            } // end if - else
            
        } // end if (errorMsg.isEmpty())
        
        if (!errorMsg.isEmpty()){
            return errorMsg;
        } // end if
        
        // Crear el objeto de transacciones
        tran = new Catransa(conn);
        
        // Obtener el consecutivo de cajas
        recnumeca = tran.getSiguienteRecibo();
        
        if (tran.isError()){
            return tran.getMensaje_error();
        } // end if
        
        
        tipopago = 1;
        idbanco  = 0;
        idtarjeta= 0;
        
        
        tran.setMonto(monto);
        tran.setRecnume(recnumeca);
        tran.setDocumento(factura);
        /*
        Cuando el cliente queda debiendo en una factura de contado hay que
        registrar el movimiento en caja como un retiro ya que la factura si 
        se registró completa como un depósito.  Si no se hace así el dinero
        va a faltar en caja.
        */
        tran.setTipodoc(tipomov.equals("R") ? "FAC":"REC");
        tran.setTipomov(tipomov);
        
        cal = GregorianCalendar.getInstance();
        
        tran.setFecha(new java.sql.Date(cal.getTimeInMillis())); 
        tran.setCedula(cliente);
        tran.setNombre(this.txtCliente.getText().trim());
        tran.setTipopago(tipopago);
        tran.setReferencia("");
        tran.setIdcaja(caja.getIdcaja());
        tran.setCajero(caja.getUser());
        tran.setModulo("CX0"); // Se utiliza este código para diferenciarlo de CXC
        tran.setIdbanco(idbanco);
        tran.setIdtarjeta(idtarjeta);
        
        // Actualizar la tabla de transacciones
        // El parámetro: true=Depósito, false=Retiro
        tran.registrar(tran.getTipomov().equals("D")); // Hace el insert en catransa
        if (tran.isError()){
            errorMsg = tran.getMensaje_error();
        } // end if
        
        // Actualizar el saldo en caja 
        if (errorMsg.isEmpty()){
            // Actualizo los montos según el tipo de movimiento
            if (tran.getTipomov().equals("D")){
                caja.setDepositos(caja.getDepositos() + tran.getMonto());
                caja.setSaldoactual(caja.getSaldoactual() + tran.getMonto());
            } else {
                caja.setRetiros(caja.getRetiros() + tran.getMonto());
                caja.setSaldoactual(caja.getSaldoactual() - tran.getMonto());
            } // end if

            // Si el pago es en efectivo se debe actualizar este rubro
            if (tipopago == 1){
                if (tran.getTipomov().equals("D")){
                    caja.setEfectivo(caja.getEfectivo() + monto);
                } else {
                    caja.setEfectivo(caja.getEfectivo() - monto);
                } // end if-else
                
            } // end if
            
            caja.actualizarTransacciones(); // Saldos y fechas
            
            if (caja.isError()){
                errorMsg = caja.getMensaje_error();
            } // end if
        } // end if
        
        // Si ha ocurrido algún error envío el mensaje y termino la ejecución
        if (!errorMsg.isEmpty()){
            return errorMsg;
        } // end if
        
        
        // Actualizo el consecutivo de recibos de caja
        sqlSent = 
                "Update config set " +
                "   recnumeca = ?";
        try {
            ps = conn.prepareStatement(sqlSent);
            ps.setInt(1, tran.getRecnume());
            CMD.update(ps);
        } catch (SQLException ex) {
            Logger.getLogger(RegistroFacturasV.class.getName()).log(Level.SEVERE, null, ex);
            errorMsg = ex.getMessage();
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
        
        
        return errorMsg;
    } // end registrarCaja
    
} // end class
