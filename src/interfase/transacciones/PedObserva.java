/*
 * Factext.java
 *
 * Created on 01/05/2011, 12:42:40 PM
 */

package interfase.transacciones;

import Mail.Bitacora;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author Administrador
 */
public class PedObserva extends java.awt.Dialog {
    private static final long serialVersionUID = 22L;
    private final String clicode;
    private final Connection conn;

    /** Creates new form Factext
     * @param parent
     * @param modal
     * @param c
     * @param clicode
     * @param clidesc
     * @param editable */
    public PedObserva(
            java.awt.Frame parent,
            boolean modal,
            Connection c,
            String clicode,
            String clidesc,
            boolean editable) {
        super(parent, modal);

        initComponents();

        this.clicode = clicode;
        this.lblClidesc.setText(clidesc);

        // Permito o no permito modificaciones, depende del lugar desde donde se invoque.
        this.txaObserv.setEditable(editable);
        this.cmdAceptar.setEnabled(editable);

        conn = c;
        if (clicode == null || clicode.isEmpty()){
            this.cmdAceptar.setEnabled(false);
            this.txaObserv.setEnabled(false);
            return;
        } // end if
        
        // Corro el SP que se encarga de registrar y consultar las observaciones
        this.setObservaciones(false); // false=No modificar datos
    } // constructor

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txaObserv = new javax.swing.JTextArea();
        cmdAceptar = new javax.swing.JButton();
        lblClidesc = new javax.swing.JLabel();
        cmdSalir = new javax.swing.JButton();

        setModal(true);
        setTitle("Observaciones");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        txaObserv.setColumns(20);
        txaObserv.setLineWrap(true);
        txaObserv.setRows(5);
        txaObserv.setToolTipText("Máximo 5000 caracteres");
        txaObserv.setWrapStyleWord(true);
        txaObserv.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txaObservKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(txaObserv);

        cmdAceptar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmdAceptar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/disk.png"))); // NOI18N
        cmdAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAceptarActionPerformed(evt);
            }
        });

        lblClidesc.setForeground(new java.awt.Color(0, 0, 255));
        lblClidesc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblClidesc.setText("jLabel1");

        cmdSalir.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmdSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/control-power.png"))); // NOI18N
        cmdSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblClidesc, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 513, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(cmdAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(cmdSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cmdAceptar, cmdSalir});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane1, lblClidesc});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblClidesc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cmdSalir)
                    .addComponent(cmdAceptar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cmdAceptar, cmdSalir});

        setSize(new java.awt.Dimension(541, 333));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private void cmdAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAceptarActionPerformed
        if (txaObserv.getText() == null){
            txaObserv.setText("");
        }

        if (txaObserv.getText().trim().length() > 5000){
            this.txaObserv.setText(this.txaObserv.getText().substring(0, 4999));
        }else{
            this.txaObserv.setText(this.txaObserv.getText());
        }

        this.setObservaciones(true); // true=Modificar base de datos

        this.closeDialog(null);
    }//GEN-LAST:event_cmdAceptarActionPerformed

    private void txaObservKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txaObservKeyTyped
        if (txaObserv.getText().trim().length() >= 5000){
            JOptionPane.showMessageDialog(null,
                    "Ya alcancó la longitud de texto máxima." +
                    "\nSolo se guardarán 5000 caracteres",
                    "Advertencia", JOptionPane.WARNING_MESSAGE);
        } // end if
    }//GEN-LAST:event_txaObservKeyTyped

    private void cmdSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSalirActionPerformed
        this.closeDialog(null);
    }//GEN-LAST:event_cmdSalirActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdAceptar;
    private javax.swing.JButton cmdSalir;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblClidesc;
    private javax.swing.JTextArea txaObserv;
    // End of variables declaration//GEN-END:variables

    private void setObservaciones(boolean modificar){
        int clicodex = Integer.parseInt(clicode);
        short cambiar = (short) (modificar ? 1 : 0);
        String sqlCall = "Call ObservacionesPedidos(?,?,?)";

        try{
            CallableStatement cs = conn.prepareCall(sqlCall);

            // Registrar los parámetros de entrada
            cs.setInt(1, clicodex);
            cs.setString(2, txaObserv.getText());
            cs.setShort(3, cambiar);

            // Se usa executeQuery porque devuelve datos.
            ResultSet rs = cs.executeQuery();

            // Actualizar el txaObserv
            if (rs != null && rs.first()){
                txaObserv.setText(rs.getString(1));
            } // end if
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
    } // end setObservaciones
}
