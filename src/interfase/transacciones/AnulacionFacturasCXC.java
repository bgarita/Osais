/*
 * AnulacionFacturasCXC.java
 *
 * Created on 21/06/2010, 09:30:04 PM
 */
package interfase.transacciones;

import Mail.Bitacora;
import accesoDatos.CMD;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import logica.Catransa;
import logica.contabilidad.CoasientoE;
import logica.utilitarios.Ut;

/**
 *
 * @author Bosco
 */
public class AnulacionFacturasCXC extends java.awt.Dialog {

    private static final long serialVersionUID = 1L;
    private final Connection conn;  // Conexión a la base de datos
    private String facnume;         // Aquí estará el facnume pasado por parámetro
    private ResultSet rs = null;    // Uso general
    private int reccaja;            // Referencia de caja
    private final Bitacora b = new Bitacora();

    public AnulacionFacturasCXC(
            java.awt.Frame parent,
            boolean modal,
            Connection c,
            String documento) {

        super(parent, modal);
        initComponents();

        this.setAlwaysOnTop(false);

        conn = c;
        facnume = documento.trim();

        // Si el número de documento recibido es un cero entonces habilito
        // el campo para que el usuario pueda digitar un número.
        txtFacnume.setEnabled(Integer.parseInt(facnume) == 0);

        txtFacnume.setText(facnume);

        reccaja = 0;

        // Si el campo está habilitado le pongo el focus...
        if (txtFacnume.isEnabled()) {
            txtFacnume.requestFocusInWindow();
        } else { // ... caso contrario ejecuto el evento que busca el facnume
            txtFacnumeFocusLost(null);
            btnAnular.requestFocusInWindow();
            btnAnularMouseClicked(null);

            // Si el formulario está visible es porque ocurrió un error
            if (this.isVisible()) {
                return;
            } // end if

            btnSalirActionPerformed(null);
        } // end if

    } // end constructor

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        btnAnular = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        txtFacnume = new javax.swing.JFormattedTextField();
        lblClidesc = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        radFactura = new javax.swing.JRadioButton();
        radNC = new javax.swing.JRadioButton();
        radND = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtMonto = new javax.swing.JTextField();
        lblMoneda = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtFecha = new javax.swing.JTextField();

        setIconImage(null);
        setModalityType(java.awt.Dialog.ModalityType.DOCUMENT_MODAL);
        setTitle("Anular facturas, NC, ND  (CXC)");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        btnAnular.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnAnular.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZUNDO.png"))); // NOI18N
        btnAnular.setText("Anular");
        btnAnular.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAnularMouseClicked(evt);
            }
        });
        btnAnular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnularActionPerformed(evt);
            }
        });

        btnSalir.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/control-power.png"))); // NOI18N
        btnSalir.setText("Cerrar");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        txtFacnume.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txtFacnume.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtFacnume.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFacnumeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFacnumeFocusLost(evt);
            }
        });
        txtFacnume.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFacnumeActionPerformed(evt);
            }
        });

        lblClidesc.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblClidesc.setForeground(new java.awt.Color(0, 51, 255));
        lblClidesc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblClidesc.setText("  ");
        lblClidesc.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        buttonGroup1.add(radFactura);
        radFactura.setSelected(true);
        radFactura.setText("Factura");
        radFactura.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                radFacturaMouseClicked(evt);
            }
        });

        buttonGroup1.add(radNC);
        radNC.setText("N. Crédito");
        radNC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                radNCMouseClicked(evt);
            }
        });

        buttonGroup1.add(radND);
        radND.setText("N. Débito");
        radND.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                radNDMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radNC)
                    .addComponent(radND)
                    .addComponent(radFactura))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(radFactura)
                .addGap(2, 2, 2)
                .addComponent(radNC)
                .addGap(2, 2, 2)
                .addComponent(radND)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Monto");

        txtMonto.setEditable(false);
        txtMonto.setForeground(new java.awt.Color(204, 0, 204));
        txtMonto.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        lblMoneda.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        lblMoneda.setForeground(new java.awt.Color(0, 51, 255));
        lblMoneda.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMoneda.setText("  ");
        lblMoneda.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Fecha");

        txtFecha.setEditable(false);
        txtFecha.setForeground(new java.awt.Color(204, 0, 204));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtMonto)
                            .addComponent(txtFecha)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblMoneda, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtMonto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addComponent(lblMoneda)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addComponent(btnAnular)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSalir)
                        .addGap(0, 123, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblClidesc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(txtFacnume, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 162, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAnular, btnSalir});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFacnume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(lblClidesc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(btnSalir)
                    .addComponent(btnAnular))
                .addGap(4, 4, 4))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnAnular, btnSalir});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jPanel1, jPanel2});

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private void btnAnularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnularActionPerformed
        this.btnAnularMouseClicked(null);
    }//GEN-LAST:event_btnAnularActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        this.closeDialog(null);
    }//GEN-LAST:event_btnSalirActionPerformed
    /**
     * Búsqueda del facnume y despliegue del cliente
     *
     * @param evt
     */
    private void txtFacnumeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFacnumeFocusLost
        int facnd;
        facnume = txtFacnume.getText().trim();

        // Permito que el número sea cero o blanco para que el usuario
        // pueda usar otras opciones.
        if (facnume.equals("") || facnume.equals("0")) {
            lblClidesc.setText("");
            txtFecha.setText("");
            txtMonto.setText("0.00");
            lblMoneda.setText("");
            return;
        } // end if

        // Defino el tipo de documento
        facnd = tipoDocumento();

        // Busco el registro solamente en la tabla actual ya que si se en-
        // cuentra en el histórico ya no se podrá anular.
        String sqlSelect
                = "Select                             "
                + "   inclient.clidesc,               "
                + "   Dtoc(faencabe.facfech) as fecha,"
                + "   faencabe.facmont as monto,      "
                + "   faencabe.reccaja,               "
                + "   monedas.descrip                 "
                + "from faencabe                      "
                + "Inner join inclient on faencabe.clicode = inclient.clicode "
                + "Inner join monedas  on faencabe.codigoTC = monedas.codigo  "
                + "Where facnume = " + facnume + " "
                + "and facnd =     " + facnd + " "
                + "and facestado = '' and facCerrado = 'N'";
        PreparedStatement ps;
        try {
            if (Ut.isSQLInjection(sqlSelect)) {
                return;
            } // end if
            ps = conn.prepareStatement(
                    sqlSelect, ResultSet.TYPE_SCROLL_SENSITIVE,
                    ResultSet.CONCUR_READ_ONLY);
            rs = CMD.select(ps);
            if (Ut.goRecord(rs, Ut.FIRST)) {
                lblClidesc.setText(rs.getString("clidesc"));
                txtFecha.setText(rs.getString("Fecha"));
                txtMonto.setText(
                        Ut.setDecimalFormat(
                                rs.getString("Monto"), "#,##0.00"));
                lblMoneda.setText(rs.getString("descrip"));
                this.reccaja = rs.getInt("reccaja");
            } else {
                lblClidesc.setText("");
                txtFecha.setText("");
                txtMonto.setText("0.00");
                lblMoneda.setText("");
                this.reccaja = 0;
                JOptionPane.showMessageDialog(null,
                        "Registro no encontrado."
                        + "\nPodría darse alguna de la siguientes "
                        + "situaciones:\n"
                        + "1. El registro ya se encuentra anulado.\n"
                        + "2. El registro se encuentra en un período cerrado.\n"
                        + "3. El registro no existe en la base de datos.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            } // end if
            ps.close();
        } catch (Exception ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        } // end try-catch
    }//GEN-LAST:event_txtFacnumeFocusLost

    private void txtFacnumeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFacnumeActionPerformed
        // Esto provoca que se ejecute el FocusLost en txtRecnume
        txtFacnume.transferFocus();
    }//GEN-LAST:event_txtFacnumeActionPerformed

    private void txtFacnumeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFacnumeFocusGained
        txtFacnume.selectAll();
    }//GEN-LAST:event_txtFacnumeFocusGained

    private void btnAnularMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAnularMouseClicked
        /*
         * Bosco modificado 06/10/2013
         * Agrego toda la interface contable.
         */
        if (!validarAccion()) {
            this.setVisible(true);
            return;
        } // end if

        int facnd = tipoDocumento();
        boolean hayTransaccion = false;
        String sqlSent;
        PreparedStatement ps;
        boolean genasienfac = false;
        Catransa tranCaja;

        // Confirmar la anulación
        int respuesta
                = JOptionPane.showConfirmDialog(null,
                        "¿Realmente desea anular este registro?",
                        "Confirme..",
                        JOptionPane.YES_NO_OPTION);
        if (respuesta == JOptionPane.NO_OPTION) {
            return;
        } // end if

        tranCaja = new Catransa(conn);

        try {
            // Verificar si hay interface contable
            sqlSent = "Select genasienfac from config";
            ps = conn.prepareStatement(sqlSent,
                    ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs = CMD.select(ps);
            if (Ut.goRecord(rs, Ut.FIRST)) {
                genasienfac = rs.getBoolean("genasienfac");
            } // end if
            ps.close();

            hayTransaccion = CMD.transaction(conn, CMD.START_TRANSACTION);

            // Si existe referencia de caja procedo primero a anular el 
            // registro en caja. El segundo parámetro le indica que no debe
            // hacer un un start transction.
            tranCaja.anularRegistro(reccaja, false);

            if (tranCaja.isError()) {
                CMD.transaction(conn, CMD.ROLLBACK);
                JOptionPane.showMessageDialog(null,
                        tranCaja.getMensaje_error(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                this.setVisible(true);
                return;
            } // end if

            sqlSent
                    = "Call AnularFacNCNDCXC(" + facnume + "," + facnd + ")";

            // Utilizo CMD.select() porque el SP devuelve un RS
            // ya sea para indicar el error o para indicar que todo
            // salió bien.
            ps = conn.prepareStatement(sqlSent,
                    ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs = CMD.select(ps);
            Ut.goRecord(rs, Ut.FIRST);

            if (rs.getBoolean(1)) {
                // Si el mensaje viene con un Warning sigo adelante
                int tipoM = rs.getString(2).contains("Warning")
                        ? JOptionPane.WARNING_MESSAGE : JOptionPane.ERROR_MESSAGE;
                String tituloM = tipoM == JOptionPane.WARNING_MESSAGE
                        ? "Adevertencia" : "Error";
                String msg = tipoM == JOptionPane.WARNING_MESSAGE
                        ? rs.getString(2).trim() + "\n El proceso continuará." : "\n El proceso se revertirá.";

                JOptionPane.showMessageDialog(null,
                        msg,
                        tituloM,
                        tipoM);

                if (tipoM == JOptionPane.ERROR_MESSAGE) {
                    CMD.transaction(conn, CMD.ROLLBACK);
                    this.setVisible(true);
                    return;
                } // end if
            } // end if
            ps.close();

            // Si hay interface contable...
            if (genasienfac) {
                // Obtener el número y tipo de asiento a anular
                sqlSent
                        = "Select no_comprob, tipo_comp "
                        + "From faencabe "
                        + "Where facnume = " + facnume + " "
                        + "and facnd = " + facnd;
                ps = conn.prepareStatement(sqlSent,
                        ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                rs = CMD.select(ps);
                Ut.goRecord(rs, Ut.FIRST);
                String no_comprob = rs.getString("no_comprob");
                short tipo_comp = rs.getShort("tipo_comp");
                ps.close();
                /*
                 * Cargar la clase de asientos.
                 * Esta clase no valida si el asiento fue anulado anteriormente
                 * porque se supone que antes de anular el asiento se debe anular
                 * la factura, ND o NC y el proceso valida que el registro no esté
                 * anulado y si lo está ni siquiera pasa por acá.
                 * Puede ser que más adelante se vuelva necesario que se haga
                 * esa validación debido a que esa clase va a ser utilizada por
                 * todos los procesos y es posible que alguno no valide la 
                 * anulación en los auxiliares (Bosco 06/10/2013).
                 */

                CoasientoE asientoE
                        = new CoasientoE(no_comprob, tipo_comp, conn);
                if (!asientoE.anular()) {
                    CMD.transaction(conn, CMD.ROLLBACK);
                    JOptionPane.showMessageDialog(null,
                            asientoE.getMensaje_error(),
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                    this.setVisible(true);
                    return;
                } // end if
            } // end if

            CMD.transaction(conn, CMD.COMMIT);
            JOptionPane.showMessageDialog(null,
                    "Registro anulado satisfactoriamente.",
                    "Mensaje",
                    JOptionPane.INFORMATION_MESSAGE);

            lblClidesc.setText("");
            txtFecha.setText("");
            txtMonto.setText("0.00");

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            lblClidesc.setText("");
            txtFecha.setText("");
            txtMonto.setText("0.00");
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);

            if (hayTransaccion) {
                try {
                    CMD.transaction(conn, CMD.ROLLBACK);
                } catch (SQLException ex1) {
                    JOptionPane.showMessageDialog(null,
                            ex1.getMessage(),
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                    b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
                } // end try-catch
            } // end if
            this.setVisible(true);
        } // end try-catch
    }//GEN-LAST:event_btnAnularMouseClicked

    private void radFacturaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_radFacturaMouseClicked
        facnume = txtFacnume.getText().trim();
        if (facnume.equals("") || facnume.equals("0")) {
            txtFacnume.requestFocusInWindow();
            return;
        }// end if

        txtFacnumeFocusLost(null);
    }//GEN-LAST:event_radFacturaMouseClicked

    private void radNCMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_radNCMouseClicked
        radFacturaMouseClicked(null);
    }//GEN-LAST:event_radNCMouseClicked

    private void radNDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_radNDMouseClicked
        radFacturaMouseClicked(null);
    }//GEN-LAST:event_radNDMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnular;
    private javax.swing.JButton btnSalir;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblClidesc;
    private javax.swing.JLabel lblMoneda;
    private javax.swing.JRadioButton radFactura;
    private javax.swing.JRadioButton radNC;
    private javax.swing.JRadioButton radND;
    private javax.swing.JFormattedTextField txtFacnume;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtMonto;
    // End of variables declaration//GEN-END:variables

    private boolean validarAccion() {
        boolean continuar = true;
        String sqlSent;
        PreparedStatement ps;
        ResultSet rsx;

        // Si la etiqueta que despliega el nombre del cliente está
        // vacía significa que el documento digitado no es válido.
        if (this.lblClidesc.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,
                    "Documento no válido.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            txtFacnume.requestFocusInWindow();
            continuar = false;
        } // end if

        if (!continuar) {
            return false;
        }

        // Si el documento tiene una referencia a cajas pero ya no se 
        // se encuentra en caja no se puede anular.  Esto puede suceder
        // cuando la factura, ND o NC no se anula el mismo día ya que la 
        // caja si debe cerrar diariamente.
        try {
            // Si existe referencia de caja verifico si aún se encuentra 
            // en la tabla de trabajo diario.
            if (reccaja > 0) {
                sqlSent = "Select recnume from catransa where recnume = ?";
                ps = conn.prepareStatement(sqlSent,
                        ResultSet.TYPE_SCROLL_SENSITIVE,
                        ResultSet.CONCUR_READ_ONLY);
                ps.setInt(1, reccaja);
                rsx = CMD.select(ps);

                if (rsx == null || !rsx.first()) {
                    continuar = false;
                    String documentoOpuesto = "Factura o Nota de Débito";
                    if (this.radFactura.isSelected() || this.radND.isSelected()) {
                        documentoOpuesto = "Nota de Crédito";
                    } // end if

                    String mensaje
                            = "Este documento ya no se puede anular porque\n"
                            + "pertenece a una caja ya cerrada.\n";
                    mensaje += "Debe crear una " + documentoOpuesto + ".";

                    JOptionPane.showMessageDialog(null,
                            mensaje,
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                } // end if

                ps.close();
            } // end if
        } catch (SQLException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
            continuar = false;
        } // end try-catch

        if (!continuar){
            return false;
        }
        
        // Bosco agregado 21/12/2018
        // Si el documento ya fue reportado a Hacienda no se debe anular,
        // lo que procede es hacer una nota de crédito o débito según corresponda.
        /*
        Aqui se debe crear el codigo para validar cuando un documento ya fue
        aceptado por Hacienda.  Aun no se ha creado el campo en faencabe para
        guardar la respuesta de Hacienda.
        */
        return continuar;
    } // end validarAccion

    /**
     * Este método define el tipo de documento a utilizar para la consulta en la
     * base de datos. También define el documento cuando el usuario no lo digitó
     * correctamente; es decir si tenía que ser negativo o no.
     *
     * @return String facnd tipo de documento
     */
    private int tipoDocumento() {
        // Defino el tipo de documento
        // 0 = Factura, abs(facnume) = NC, facnume *-1 = ND
        int facnd = 0;
        facnume = txtFacnume.getText().trim();
        if (this.radFactura.isSelected()) {
            facnd = 0;
            facnume
                    = String.valueOf(
                            Math.abs(Integer.parseInt(facnume)));
        } else if (this.radNC.isSelected()) {
            facnume
                    = Integer.parseInt(facnume) > 0
                            ? "-" + facnume : facnume;
            facnd = Math.abs(Integer.parseInt(facnume));
        } else if (this.radND.isSelected()) {
            facnume
                    = Integer.parseInt(facnume) < 0
                            ? String.valueOf(
                                    Math.abs(Integer.parseInt(facnume))) : facnume;
            facnd = Integer.parseInt(facnume) * -1;
        } // end if
        this.txtFacnume.setText(facnume);
        return facnd;
    } // end tipoDocumento
} // end class
