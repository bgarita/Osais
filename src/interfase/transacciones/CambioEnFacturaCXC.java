/*
 * CambioEnFacturaCXC.java
 *
 * Created on 18/04/2011, 08:00:00 AM
 */

package interfase.transacciones;

import Exceptions.NotUniqueValueException;
import Mail.Bitacora;
import accesoDatos.CMD;
import accesoDatos.UtilBD;
import interfase.otros.Buscador;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import logica.utilitarios.Ut;

/**
 *
 * @author Bosco Garita
 */
@SuppressWarnings("serial")
public class CambioEnFacturaCXC extends JFrame {
    // Constantes para las búsquedas.
    private final int FACTURAS   = 1;
    private final int CLIENTES   = 2;
    private final int VENDEDORES = 3;
    
    private final Bitacora b = new Bitacora();
    
    private ResultSet  rs;
    private final Statement  stat;
    private Connection conn   = null;
    private final Calendar   fechaA = GregorianCalendar.getInstance();
    private boolean    inicio = true;
    private int facplazo      = 0;

    private int buscar = FACTURAS;
    private double facmont;
    private int reccaja; // Referencia de caja
    private int idCaja;  // Caja donde fue registrada la transacción
    
    /** Creates new form
     * @param c
     * @throws java.sql.SQLException */
    public CambioEnFacturaCXC(Connection c) throws SQLException {
        initComponents();
        // Defino el escuchador con una clase anónima para controlar la
        // salida de esta pantalla.  Esto funciona simpre que se haya
        // establecido el siguiente parámetro:
        // setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE)
        // Esta pantalla lo hace en initComponents().
        addWindowListener(new WindowAdapter(){
            @Override
            public void windowClosing(WindowEvent e){
                btnCerrarActionPerformed(null);
            } // end windowClosing
        } // end class
        ); // end Listener

        conn = c;

        stat = conn.createStatement(
                ResultSet.TYPE_SCROLL_INSENSITIVE,
                ResultSet.CONCUR_UPDATABLE);
        this.setVisible(true);
        inicio = false;
    } // end constructor

    public void setConexion(Connection c){ conn = c; }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        btnGuardar = new javax.swing.JButton();
        btnCerrar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaAdvertencia = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtFacnumeOrigen = new javax.swing.JFormattedTextField();
        lblFacfech = new javax.swing.JLabel();
        txtClidescOrigen = new javax.swing.JFormattedTextField();
        txtClicodeOrigen = new javax.swing.JFormattedTextField();
        txtVendOrigen = new javax.swing.JFormattedTextField();
        lblVendedor = new javax.swing.JLabel();
        lblTipo = new javax.swing.JLabel();
        lblFacestado = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtFacnumeDestino = new javax.swing.JFormattedTextField();
        txtClidescDestino = new javax.swing.JFormattedTextField();
        txtClicodeDestino = new javax.swing.JFormattedTextField();
        txtVendDestino = new javax.swing.JFormattedTextField();
        lblVendedorDestino = new javax.swing.JLabel();
        DatFacfech = new com.toedter.calendar.JDateChooser();
        chkCambiarFactura = new javax.swing.JCheckBox();
        chkCambiarFecha = new javax.swing.JCheckBox();
        chkCambiarCliente = new javax.swing.JCheckBox();
        chkCambiarVendedor = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuArchivo = new javax.swing.JMenu();
        mnuGuardar = new javax.swing.JMenuItem();
        mnuSalir = new javax.swing.JMenuItem();
        mnuEdicion = new javax.swing.JMenu();
        mnuBuscar = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Cambiar datos de facturas");

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZSAVE.png"))); // NOI18N
        btnGuardar.setToolTipText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/control-power.png"))); // NOI18N
        btnCerrar.setToolTipText("Salir");
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCerrar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnCerrar, btnGuardar});

        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnCerrar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnGuardar, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnCerrar, btnGuardar});

        txaAdvertencia.setEditable(false);
        txaAdvertencia.setColumns(20);
        txaAdvertencia.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        txaAdvertencia.setForeground(java.awt.Color.red);
        txaAdvertencia.setLineWrap(true);
        txaAdvertencia.setRows(5);
        txaAdvertencia.setText("ADVERTENCIA:\nCambiar algunos datos de una factura podría resultar en algún tipo de inconsistencia.  Por ejemplo un cliente podría quedar con saldo negativo o las existencias de inventario podrían también quedar negativas. Si cambia el cliente debe tomar en cuenta que el sistema no cambiará el plazo de la factura.\n\nEl sistema NO se hace responsable por el mal uso que se le dé a esta herramienta.  \nDebe tener total seguridad de lo que va a hacer.");
        txaAdvertencia.setToolTipText("ADVERTENCIA");
        txaAdvertencia.setWrapStyleWord(true);
        txaAdvertencia.setFocusable(false);
        jScrollPane1.setViewportView(txaAdvertencia);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), "Datos originales", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(0, 102, 0))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Factura");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Fecha");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Cliente");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Vendedor");

        txtFacnumeOrigen.setColumns(6);
        txtFacnumeOrigen.setForeground(new java.awt.Color(255, 0, 51));
        txtFacnumeOrigen.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtFacnumeOrigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFacnumeOrigenActionPerformed(evt);
            }
        });
        txtFacnumeOrigen.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFacnumeOrigenFocusGained(evt);
            }
        });

        lblFacfech.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblFacfech.setForeground(java.awt.Color.blue);
        lblFacfech.setText(" ");

        txtClidescOrigen.setEditable(false);
        txtClidescOrigen.setColumns(25);
        txtClidescOrigen.setForeground(java.awt.Color.blue);
        txtClidescOrigen.setToolTipText("");
        txtClidescOrigen.setFocusable(false);
        txtClidescOrigen.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        txtClicodeOrigen.setEditable(false);
        txtClicodeOrigen.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txtClicodeOrigen.setFocusable(false);

        txtVendOrigen.setEditable(false);
        txtVendOrigen.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txtVendOrigen.setFocusable(false);

        lblVendedor.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblVendedor.setForeground(java.awt.Color.blue);
        lblVendedor.setText(" ");

        lblTipo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblTipo.setForeground(java.awt.Color.blue);
        lblTipo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTipo.setText(" ");

        lblFacestado.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblFacestado.setForeground(java.awt.Color.red);
        lblFacestado.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFacestado.setText(" ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lblVendedor, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtClicodeOrigen)
                                    .addComponent(txtVendOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addGap(29, 29, 29)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblFacfech, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtFacnumeOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTipo, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                            .addComponent(lblFacestado, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)))
                    .addComponent(txtClidescOrigen, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(75, 75, 75))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtClicodeOrigen, txtFacnumeOrigen, txtVendOrigen});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(txtFacnumeOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTipo))
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel2)
                    .addComponent(lblFacfech)
                    .addComponent(lblFacestado))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel3)
                    .addComponent(txtClicodeOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtClidescOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel4)
                    .addComponent(txtVendOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addComponent(lblVendedor)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), "Nuevos datos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(204, 0, 204))); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Factura");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Fecha");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Cliente");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("Vendedor");

        txtFacnumeDestino.setColumns(6);
        txtFacnumeDestino.setForeground(new java.awt.Color(255, 0, 51));
        txtFacnumeDestino.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtFacnumeDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFacnumeDestinoActionPerformed(evt);
            }
        });
        txtFacnumeDestino.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFacnumeDestinoFocusGained(evt);
            }
        });
        txtFacnumeDestino.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFacnumeDestinoKeyTyped(evt);
            }
        });

        txtClidescDestino.setEditable(false);
        txtClidescDestino.setColumns(25);
        txtClidescDestino.setForeground(java.awt.Color.blue);
        txtClidescDestino.setToolTipText("");
        txtClidescDestino.setFocusable(false);
        txtClidescDestino.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        txtClicodeDestino.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txtClicodeDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtClicodeDestinoActionPerformed(evt);
            }
        });
        txtClicodeDestino.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtClicodeDestinoFocusGained(evt);
            }
        });
        txtClicodeDestino.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtClicodeDestinoKeyTyped(evt);
            }
        });

        txtVendDestino.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txtVendDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtVendDestinoActionPerformed(evt);
            }
        });
        txtVendDestino.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtVendDestinoFocusGained(evt);
            }
        });
        txtVendDestino.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtVendDestinoKeyTyped(evt);
            }
        });

        lblVendedorDestino.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblVendedorDestino.setForeground(java.awt.Color.blue);
        lblVendedorDestino.setText(" ");

        DatFacfech.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                DatFacfechFocusGained(evt);
            }
        });
        DatFacfech.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                DatFacfechPropertyChange(evt);
            }
        });

        chkCambiarFactura.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        chkCambiarFactura.setText("Cambiar");
        chkCambiarFactura.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                chkCambiarFacturaFocusGained(evt);
            }
        });

        chkCambiarFecha.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        chkCambiarFecha.setText("Cambiar");
        chkCambiarFecha.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                chkCambiarFechaFocusGained(evt);
            }
        });

        chkCambiarCliente.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        chkCambiarCliente.setText("Cambiar");
        chkCambiarCliente.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                chkCambiarClienteFocusGained(evt);
            }
        });

        chkCambiarVendedor.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        chkCambiarVendedor.setText("Cambiar");
        chkCambiarVendedor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                chkCambiarVendedorFocusGained(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblVendedorDestino, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DatFacfech, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtFacnumeDestino)
                            .addComponent(txtClicodeDestino)
                            .addComponent(txtVendDestino))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkCambiarVendedor)
                            .addComponent(chkCambiarCliente)
                            .addComponent(chkCambiarFecha)
                            .addComponent(chkCambiarFactura))
                        .addGap(12, 12, 12))
                    .addComponent(txtClidescDestino, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel5)
                    .addComponent(txtFacnumeDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkCambiarFactura))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel6)
                    .addComponent(DatFacfech, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkCambiarFecha))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel7)
                    .addComponent(txtClicodeDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkCambiarCliente))
                .addGap(3, 3, 3)
                .addComponent(txtClidescDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel8)
                    .addComponent(txtVendDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkCambiarVendedor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblVendedorDestino)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        mnuArchivo.setText("Archivo");

        mnuGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        mnuGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZSAVE.JPG"))); // NOI18N
        mnuGuardar.setText("Guardar");
        mnuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuGuardarActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuGuardar);

        mnuSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.CTRL_MASK));
        mnuSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/control-power.png"))); // NOI18N
        mnuSalir.setText("Salir");
        mnuSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSalirActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuSalir);

        jMenuBar1.add(mnuArchivo);

        mnuEdicion.setText("Edición");

        mnuBuscar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        mnuBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/binocular.png"))); // NOI18N
        mnuBuscar.setText("Buscar");
        mnuBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuBuscarActionPerformed(evt);
            }
        });
        mnuEdicion.add(mnuBuscar);

        jMenuBar1.add(mnuEdicion);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void mnuSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSalirActionPerformed
        dispose();
}//GEN-LAST:event_mnuSalirActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // Validaciones
        // 0. La factura origen no puede estar en un período cerrado
        // 1. La nueva factura no debe existir (integridad referencial)
        // 2. La nueva fecha debe estar permitida (también el usuario debe
        //    decidir si continúa o no cuando el nuevo TC es diferente al
        //    de la factura)
        // 3. El nuevo vendedor debe existir (integridad referencial)
        // 4. El nuevo cliente debe existir y tener el mismo plazo (integridad referencial)
        // 5. Si existe una referencia en caja el registro debe estar en la tabla de transacciones diarias.

        if (!chkCambiarFactura.isSelected() &&
              !chkCambiarFecha.isSelected() &&
              !chkCambiarVendedor.isSelected() &&
              !chkCambiarCliente.isSelected()){
            JOptionPane.showMessageDialog(
                    null,
                    "No marcó ninguna casilla 'Cambiar'",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if

        // La factura origen debe estar en el período actual
        if (!facturaModificable()){
            txtFacnumeOrigen.requestFocusInWindow();
            return;
        } // end if

        // El nuevo número de factura no puede existir
        if (chkCambiarFactura.isSelected() && existeFactura()){
            txtFacnumeDestino.requestFocusInWindow();
            return;
        } // end if

        // La nueva fecha debe ser aceptada por el sistema.
        // También se advierte sobre diferencias en el TC.
        if (chkCambiarFecha.isSelected() && (!this.permitirFecha() || !this.compararTCs())){
            DatFacfech.requestFocusInWindow();
            return;
        } // end if

        // El nuevo vendedor debe existir
        if (chkCambiarVendedor.isSelected() && !existeVendedor()){
            txtVendDestino.requestFocusInWindow();
            return;
        } // end if

        // El nuevo cliente debe existir y tener el mismo plazo.
        // La excepción es cuando la factura es de contado.
        if (chkCambiarCliente.isSelected() && !existeCliente()){
            txtClicodeDestino.requestFocusInWindow();
            return;
        } // end if
        
        // Declaro las variables con los nuevos valores.
        // Si el usuario no marcó cambiar entonces se conserva el valor anterior.
        int facnumeNuevo = 
                Integer.parseInt(
                chkCambiarFactura.isSelected() ? 
                txtFacnumeDestino.getText().trim() : txtFacnumeOrigen.getText().trim());
        
        Date facfechNuevo = 
                chkCambiarFecha.isSelected() ?
                DatFacfech.getDate() : Ut.ctod(lblFacfech.getText().trim());

        String facfechNuevoSQL = Ut.fechaSQL(facfechNuevo);

        int vendNuevo = 
                Integer.parseInt(
                chkCambiarVendedor.isSelected() ?
                txtVendDestino.getText().trim() : txtVendOrigen.getText().trim());
        int clicodeNuevo = 
                Integer.parseInt(
                chkCambiarCliente.isSelected() ?
                txtClicodeDestino.getText().trim() : txtClicodeOrigen.getText().trim());

        int facnumeAnterior = 
                Integer.parseInt(txtFacnumeOrigen.getText().trim());
        
        int clicodeAnterior = 
                Integer.parseInt(txtClicodeOrigen.getText().trim());
        
        Date facfechAnterior = 
                Ut.ctod(lblFacfech.getText().trim());

        String errorMessage = "";
        boolean huboError;
        CallableStatement cs;
        PreparedStatement ps,ps2;
        String sqlSent;
        
        try{
            // Preparar la llamada
            // Este SP maneja su propia transacción
            cs = conn.prepareCall(
                    "Call CambiarDatosFactura(?,?," + facfechNuevoSQL + ",?,?)");
            cs.setInt(1, facnumeAnterior);
            cs.setInt(2, facnumeNuevo);
            cs.setInt(3, vendNuevo);
            cs.setInt(4, clicodeNuevo);
            
            // Ejecutar el SP que cambia los datos.
            // Se hace con executeQuery porque devuelve un RS
            ResultSet r = cs.executeQuery();

            // Verificar si no hubo error
            huboError = (r == null);
        

            if (huboError){
                errorMessage =
                        "Ocurrió un error." +
                        "\nLos datos no se pudieron cambiar";
            } // end if

            if (!huboError && r.first() && r.getBoolean(1)){
                huboError = true;
                errorMessage = r.getString(2);
            } // end if
            cs.close();
        } catch (Exception ex){
            huboError = true;
            errorMessage = ex.getMessage();
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
        
        if (huboError){
            JOptionPane.showMessageDialog(
                    null,
                    errorMessage,
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if
        
        
        // Hasta aquí no se requiere de control transaccional
        
        
        // Si no hubo error continúo con los otros SPs
        try{
            // Iniciar la transacción
            CMD.transaction(conn, CMD.START_TRANSACTION);
            
            // Si se cambió el cliente y la factura es de crédito...
            if (chkCambiarCliente.isSelected() && clicodeAnterior != clicodeNuevo){
                if (facplazo > 0){
                    // ...recalculo el saldo del cliente original...
                    cs = conn.prepareCall("Call RecalcularSaldoClientes(?)");
                    cs.setInt(1, clicodeAnterior);
                    cs.executeUpdate();
                    // ...y el del cliente nuevo.
                    cs.setInt(1, clicodeNuevo);
                    cs.executeUpdate();
                } // end if
            } // end if
            
            // Si hay referencia a caja y el número cambió hay que modificar
            // también la tabla catransa.
            if (facnumeAnterior != facnumeNuevo && this.reccaja > 0){
                sqlSent = 
                        "Update catransa set " +
                        "   documento = ?    " +
                        "Where recnume = ?";
                ps = conn.prepareStatement(sqlSent);
                ps.setString(1, facnumeNuevo+"");
                ps.setInt(2, this.reccaja);
                int registros = CMD.update(ps);
                if (registros != 1){
                    huboError = true;
                    errorMessage = 
                            "Ocurrió un error al intentar cambiar el\n" +
                            "registro en caja.\n" +
                            "Contacte a su administrador de base de datos.";
                } // end if
                ps.close();
            } // end if
        } catch (Exception ex){
            huboError = true;
            errorMessage = ex.getMessage();
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
        
        // Si ocurrió algún error realizo el rollback..
        // caso contrio confirmo la transacción.
        try {
            if (huboError){
                CMD.transaction(conn, CMD.ROLLBACK);
            } else {
                CMD.transaction(conn, CMD.COMMIT);
            }
        } catch (Exception ex){
            // Si ocurriera un error en este punto lo mejor es cerrar el sistema
            // para proteger la integridad.
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage() + 
                    "\nEl sistema se cerrará para proteger la integridad.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            System.exit(1);
            return;
        } // end try-catch
        
        if (huboError){
            JOptionPane.showMessageDialog(
                    null,
                    errorMessage,
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if
        
        
        
        try{
            // Si se cambió la fecha...
            if (chkCambiarFecha.isSelected() &&
                    !facfechAnterior.equals(facfechNuevo)){
                sqlSent = 
                        "Select artcode, bodega from fadetall " +
                        "Where facnume = ? and facnd = 0";
                ps = conn.prepareStatement(sqlSent, 
                        ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                ps.setInt(1, facnumeNuevo);
                ResultSet rs = CMD.select(ps);
                
                // Este SP maneja su propia transacción.
                sqlSent = "Call RecalcularExistenciaArticulo(?,?,?)"; // Devuelve un RS
                ps2 = conn.prepareStatement(sqlSent, 
                        ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                ResultSet rs2;
                
                while (rs.next()){
                    // ...recalculo las existencias.
                    // Este SP maneja su propia transacción
                    ps2.setString(1, rs.getString(1));
                    ps2.setString(2, rs.getString(2));
                    ps2.setNull(3, Types.NULL);
                    
                    rs2 = CMD.select(ps2);
                    
                    rs2.first();
                    if (rs2.getInt(1) == 1){ // Hubo error
                        JOptionPane.showMessageDialog(
                            null,
                            rs2.getString(2),
                            "Error",
                            JOptionPane.INFORMATION_MESSAGE);
                        ps.close();
                        ps2.close();
                        return;
                    } // end if
                } // end while
                
                ps.close();
                ps2.close();
            } // end if (chkCambiarFecha.isSelected() && !facfechAnterior.equals(facfechNuevo))
            
            JOptionPane.showMessageDialog(
                    null,
                    "Datos actualizados exitosamente.",
                    "Pura vida!",
                    JOptionPane.INFORMATION_MESSAGE);
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end catch
}//GEN-LAST:event_btnGuardarActionPerformed

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        inicio = true; // Se usa para evitar que corran algunos métodos
        dispose();
}//GEN-LAST:event_btnCerrarActionPerformed

    private void mnuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuGuardarActionPerformed
        btnGuardarActionPerformed(evt);
}//GEN-LAST:event_mnuGuardarActionPerformed
    
    private void mnuBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuBuscarActionPerformed
        Buscador bd;
        String tabla, campos, campoBuscarEn, titulo, prompt;
        JTextField field;

        tabla = "faencabe inner join inclient on "
                + "faencabe.clicode = inclient.clicode";
        campos = "faencabe.facnume,inclient.clidesc";
        campoBuscarEn = "inclient.clidesc";
        titulo = "Buscar facturas por cliente";
        prompt = "Cliente:";
        field = txtFacnumeOrigen;

        switch(buscar){
            case FACTURAS:break;
            case CLIENTES:
                tabla  = "inclient";
                campos = "clicode,clidesc";
                campoBuscarEn = "clidesc";
                titulo = "Buscar clientes";
                prompt = "Cliente:";
                field  = txtClicodeDestino;
                break;
            case VENDEDORES:
                tabla  = "vendedor";
                campos = "vend,nombre";
                campoBuscarEn = "nombre";
                titulo = "Buscar vendedores";
                prompt = "Nombre:";
                field  = txtVendDestino;
                break;
            default:return;
        } // end switch

        bd = new Buscador(new java.awt.Frame(), true,
            tabla,campos,campoBuscarEn,field,conn);
        bd.setTitle(titulo);
        bd.lblBuscar.setText(prompt);
        bd.setVisible(true);
        switch(buscar){
            case CLIENTES:
                this.txtClicodeDestinoActionPerformed(evt);
                break;
            case VENDEDORES:
                this.txtVendDestinoActionPerformed(evt);
                break;
            default:
                this.txtFacnumeOrigenActionPerformed(evt);
        } // end switch
        bd.dispose();
}//GEN-LAST:event_mnuBuscarActionPerformed

    private void txtFacnumeOrigenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFacnumeOrigenActionPerformed
        // Este SP recibe dos parámetros: número de documento y tipo de documento.
        // 1=Factura, 2=NC, 3=ND
        String query =
                "Call ConsultarFactNDNC(" +
                txtFacnumeOrigen.getText() + "," + 1 + ")";
        try {
            rs = stat.executeQuery(query);
            if (rs == null || !rs.first()){
                return;
            } // end if

            // Cargar el encabezado de la factura
            lblFacfech.setText(rs.getString("facfech"));
            txtClicodeOrigen.setText(rs.getString("clicode"));
            txtClidescOrigen.setText(rs.getString("clidesc"));
            txtVendOrigen.setText(rs.getString("vend"));
            lblVendedor.setText(rs.getString("vendedor"));
            facplazo = rs.getInt("facplazo");
            lblTipo.setText(rs.getString("tipo"));
            lblFacestado.setText(rs.getString("facestado"));
            facmont = rs.getDouble("facmont");

            rs.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }

        if (facturaModificable()) {txtFacnumeOrigen.transferFocus();}
    }//GEN-LAST:event_txtFacnumeOrigenActionPerformed

    private void txtFacnumeOrigenFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFacnumeOrigenFocusGained
        txtFacnumeOrigen.selectAll();
        buscar = FACTURAS;
}//GEN-LAST:event_txtFacnumeOrigenFocusGained

    private void txtFacnumeDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFacnumeDestinoActionPerformed
        // Verifica si la factura existe o no.
        if (!existeFactura()) {txtFacnumeDestino.transferFocus();}
    }//GEN-LAST:event_txtFacnumeDestinoActionPerformed

    private void txtFacnumeDestinoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFacnumeDestinoFocusGained
        txtFacnumeDestino.selectAll();
    }//GEN-LAST:event_txtFacnumeDestinoFocusGained

    private void txtClicodeDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtClicodeDestinoActionPerformed
        if (existeCliente()) {txtClicodeDestino.transferFocus();}
    }//GEN-LAST:event_txtClicodeDestinoActionPerformed

    private void txtVendDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtVendDestinoActionPerformed
        if (existeVendedor()) {txtVendDestino.transferFocus();}
    }//GEN-LAST:event_txtVendDestinoActionPerformed

    private void DatFacfechFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_DatFacfechFocusGained
        // Uso esta variable para reestablecer el valor después de la
        // validación en caso de que la fecha no fuera aceptada.
        fechaA.setTime(DatFacfech.getDate());
        buscar = 0;
}//GEN-LAST:event_DatFacfechFocusGained

    private void DatFacfechPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_DatFacfechPropertyChange
        if (!inicio){
            this.chkCambiarFecha.setSelected(permitirFecha());
            // Crear código aquí para que el sistema verifique si
            // el TC para la nueva fecha es diferente al TC de la factura.
            // En caso de ser diferentes debe advertir al usuario para que
            // éste decida si continúa o no.  Aquí solo irá una llamada
            // al método que hará la revisión para que también se pueda
            // usar como una validación final a la hora de guardar.
            compararTCs();
        } // end if
}//GEN-LAST:event_DatFacfechPropertyChange

    private void txtFacnumeDestinoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFacnumeDestinoKeyTyped
        this.chkCambiarFactura.setSelected(true);
    }//GEN-LAST:event_txtFacnumeDestinoKeyTyped

    private void txtClicodeDestinoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtClicodeDestinoKeyTyped
        this.chkCambiarCliente.setSelected(true);
    }//GEN-LAST:event_txtClicodeDestinoKeyTyped

    private void txtVendDestinoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtVendDestinoKeyTyped
        this.chkCambiarVendedor.setSelected(true);
    }//GEN-LAST:event_txtVendDestinoKeyTyped

    private void txtClicodeDestinoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtClicodeDestinoFocusGained
        buscar = CLIENTES;
    }//GEN-LAST:event_txtClicodeDestinoFocusGained

    private void txtVendDestinoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtVendDestinoFocusGained
        buscar = VENDEDORES;
    }//GEN-LAST:event_txtVendDestinoFocusGained

    private void chkCambiarFacturaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chkCambiarFacturaFocusGained
        buscar = 0;
    }//GEN-LAST:event_chkCambiarFacturaFocusGained

    private void chkCambiarFechaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chkCambiarFechaFocusGained
        buscar = 0;
    }//GEN-LAST:event_chkCambiarFechaFocusGained

    private void chkCambiarClienteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chkCambiarClienteFocusGained
        buscar = 0;
    }//GEN-LAST:event_chkCambiarClienteFocusGained

    private void chkCambiarVendedorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chkCambiarVendedorFocusGained
        buscar = 0;
    }//GEN-LAST:event_chkCambiarVendedorFocusGained


    /**
     * @param c
    */
    public static void main(Connection c) {
        try {
            //JFrame.setDefaultLookAndFeelDecorated(true);
            // Bosco agregado 23/07/2011
            // Integración del segundo nivel de seguridad.
            if (!UtilBD.tienePermiso(c,"CambioEnFacturaCXC")){
                JOptionPane.showMessageDialog(null,
                        "Usted no está autorizado para ejecutar este proceso",
                        "Error - Permisos",
                        JOptionPane.ERROR_MESSAGE);
                return;
            } // Fin Bosco agregado 23/07/2011
            // Fin Bosco agregado 23/07/2011
        } catch (Exception ex) {
            Logger.getLogger(CambioEnFacturaCXC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            CambioEnFacturaCXC run = new CambioEnFacturaCXC(c);
            //run.setVisible(true);
        } catch (SQLException ex) {
             JOptionPane.showMessageDialog(
                     null,
                     ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    } // end main

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser DatFacfech;
    private javax.swing.JButton btnCerrar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JCheckBox chkCambiarCliente;
    private javax.swing.JCheckBox chkCambiarFactura;
    private javax.swing.JCheckBox chkCambiarFecha;
    private javax.swing.JCheckBox chkCambiarVendedor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblFacestado;
    private javax.swing.JLabel lblFacfech;
    private javax.swing.JLabel lblTipo;
    private javax.swing.JLabel lblVendedor;
    private javax.swing.JLabel lblVendedorDestino;
    private javax.swing.JMenu mnuArchivo;
    private javax.swing.JMenuItem mnuBuscar;
    private javax.swing.JMenu mnuEdicion;
    private javax.swing.JMenuItem mnuGuardar;
    private javax.swing.JMenuItem mnuSalir;
    private javax.swing.JTextArea txaAdvertencia;
    private javax.swing.JFormattedTextField txtClicodeDestino;
    private javax.swing.JFormattedTextField txtClicodeOrigen;
    private javax.swing.JFormattedTextField txtClidescDestino;
    private javax.swing.JFormattedTextField txtClidescOrigen;
    private javax.swing.JFormattedTextField txtFacnumeDestino;
    private javax.swing.JFormattedTextField txtFacnumeOrigen;
    private javax.swing.JFormattedTextField txtVendDestino;
    private javax.swing.JFormattedTextField txtVendOrigen;
    // End of variables declaration//GEN-END:variables

    private boolean existeFactura(){
        // El default de esta variable es true de manera que si ocurriera un
        // error sql durante la corrida el método devolvería true.  Esto por
        // cuanto no se puede saber si la factura existe o no.  Esto se hace
        // para evitar que el número se utilice sin tener certeza de su existencia.
        boolean existe = true;
        String facnume = txtFacnumeDestino.getText().trim();
        String tabla = "faencabe";
        String condicion = "facnume = " + facnume + " and facnd = 0";
        String campo = "user";
        String user = "";
        try {
            user = UtilBD.getDBString(conn, tabla, condicion, campo);
        } catch (NotUniqueValueException | SQLException ex) {
            Logger.getLogger(CambioEnFacturaCXC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return true;
        } // end try-catch
        
        if (!user.equals("")){
            JOptionPane.showMessageDialog(
                    null,
                    "Esta factura ya existe.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            txtFacnumeDestino.requestFocusInWindow();
        } else {
            existe = false;
        } // end if
        return existe;
    } // end existeFactura

    private boolean permitirFecha(){
        String facfech = Ut.fechaSQL(DatFacfech.getDate());
        try {
            if (!UtilBD.isValidDate(conn,facfech)){
                JOptionPane.showMessageDialog(
                        null,
                        "No puede utilizar esta fecha.  " +
                        "\nCorresponde a un período ya cerrado.",
                        "Validar fecha..",
                        JOptionPane.ERROR_MESSAGE);
                DatFacfech.setDate(fechaA.getTime());
                DatFacfech.requestFocusInWindow();
                return false;
            } // end if
        } catch (SQLException ex) {
            Logger.getLogger(CambioEnFacturaCXC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return false;
        }

        fechaA.setTime(DatFacfech.getDate());
        return true;
    } // end permitirFecha

    private boolean existeVendedor(){
        boolean existe = false;
        lblVendedorDestino.setText("");
        String vend = txtVendDestino.getText().trim();
        String tabla = "vendedor";
        String condicion = "vend = " + vend;
        String campo = "nombre";
        try {
            lblVendedorDestino.setText(
                    UtilBD.getDBString(conn, tabla, condicion, campo));
        } catch (NotUniqueValueException | SQLException ex) {
            Logger.getLogger(CambioEnFacturaCXC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return false;
        }
        if (lblVendedorDestino.getText().equals("")){
            JOptionPane.showMessageDialog(
                    null,
                    "Vendedor no existe.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            txtVendDestino.requestFocusInWindow();
        }else{
            existe = true;
        } // end if
        return existe;
    } // end existeVendedor

    private boolean existeCliente(){
        boolean existe = false;
        txtClidescDestino.setText("");
        String clicode = txtClicodeDestino.getText().trim();
        String tabla = "inclient";
        String condicion = "clicode = " + clicode;
        String campo = "clidesc";
        int cliplaz;
        double disponible;
        try {
            txtClidescDestino.setText(
                    UtilBD.getDBString(conn, tabla, condicion, campo));
        } catch (NotUniqueValueException | SQLException ex) {
            Logger.getLogger(CambioEnFacturaCXC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return false;
        } // end try-catch
        
        if (txtClidescDestino.getText().equals("")){
            JOptionPane.showMessageDialog(
                    null,
                    "Cliente no existe.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            existe = true;
        } // end if

        // Si el nuevo cliente existe y la factura es de crédito...
        if (existe && facplazo > 0){
            // ...comparo los plazos.
            // Esta validación es importante porque si no se comparan los
            // plazos cualquier usuario malintencionado puede facturar a
            // nombre de un cliente que tiene un plazo muy alto y luego
            // cambiar la factura a otro que tiene plazo bajo y de esa forma
            // burlar la seguridad a nivel de configuración.
            campo = "cliplaz";
            try {
                cliplaz = Integer.parseInt(
                        UtilBD.getDBString(conn, tabla, condicion, campo));
            } catch (NotUniqueValueException | SQLException ex) {
                Logger.getLogger(CambioEnFacturaCXC.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
                b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
                return false;
            } // end try-catch
            
            if (cliplaz < facplazo){
                JOptionPane.showMessageDialog(
                        null,
                        "El plazo del cliente destino es inferior al de la factura.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                existe = false;
            } // end if

            // Validar el límite de crédito
            if (existe){
                campo = "clilimit - clisald as disponible";
                try {
                    disponible = Double.parseDouble(
                        UtilBD.getDBString(conn, tabla, condicion, campo));
                } catch (NotUniqueValueException | SQLException ex) {
                    Logger.getLogger(CambioEnFacturaCXC.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(
                            null,
                            ex.getMessage(),
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                    b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
                    return false;
                } // end try-catch
                
                disponible -= facmont;
                if (disponible <= 0.00){
                    JOptionPane.showMessageDialog(
                            null,
                            "El disponible del cliente destino es insuficiente.",
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                    existe = false;
                } // end if
            } // end if
        } // end if (existe && facplazo > 0)

        if (!existe){
            txtClicodeDestino.requestFocusInWindow();
        }
            
        return existe;
    } // end existeCliente

    private boolean facturaModificable() {
        String facfech = Ut.fechaSQL(lblFacfech.getText().trim());
        boolean esModificable = true;
        try {
            if (!UtilBD.isValidDate(conn,facfech)){
                JOptionPane.showMessageDialog(
                        null,
                        "No puede modificar esta factura.  " +
                        "\nCorresponde a un período ya cerrado.",
                        "Validar fecha..",
                        JOptionPane.ERROR_MESSAGE);
                esModificable = false;
            } // end if
        } catch (SQLException ex) {
            Logger.getLogger(CambioEnFacturaCXC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            esModificable = false;
        } // end try - catch
        
        // Bosco Agregado 22/11/2015
        // No vale la pena continuar si ya hubo un evento que dice que no es modificable.
        if (!esModificable){
            return esModificable;
        } // end if
        
        // Si la factura es de contado hay que realizar el cambio en caja
        // Es posible que el usuario que registró la factura no sea un usuario
        // cajero en cuyo caso aunque sea de contado aún no se haya registrado
        // en caja.  Para esto primero verifico si tiene la referencia de caja.
        int facnume;
        PreparedStatement ps;
        ResultSet rsx;
        String sqlSent =
                "Select reccaja from faencabe Where facnume = ? and facnd = 0";
        
        try {
            facnume = Integer.parseInt(this.txtFacnumeOrigen.getText().trim());
            ps = conn.prepareStatement(sqlSent, 
                    ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ps.setInt(1, facnume);
            rsx = CMD.select(ps);
            if (rsx != null && rsx.first()){
                // Guardo el número de recibo de caja para que el proceso que
                // cambia los datos lo use. Solo si el número es mayor que cero
                // es porque existe en caja.
                this.reccaja = rsx.getInt(1);
            } // end if
            ps.close();
            
            // Si hay referencia en caja hay que determinar si aún se encuentra
            // en la tabla de transacciones diarias.
            if (this.reccaja > 0){
                sqlSent = "Select idcaja from catransa Where recnume = ?";
                ps = conn.prepareStatement(sqlSent, 
                        ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                ps.setInt(1, reccaja);
                rsx = CMD.select(ps);
                if (rsx == null || !rsx.first()){
                    JOptionPane.showMessageDialog(null, 
                            "Esta factura no se puede modificar ya que\n" +
                            "tiene una referencia en cajas pero la caja\n" +
                            "ya ejecutó el cierre diario.\n\n" +
                            "Debe emitir una nota de crédito igual a esta\n" +
                            "factura y luego generar otra factura con el \n" +
                            "dato correcto.",
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                    esModificable = false;
                } // end if-else
                
                ps.close();
                
                if (!esModificable){
                    return esModificable;
                } // end if
                
                
                // No se valida la fecha con respecto a la caja porque los
                // registros de caja no necesariamente deben corresponde a
                // la fecha de las facturas.
                
            } // end if
            
        } catch(NumberFormatException | SQLException ex){
            Logger.getLogger(CambioEnFacturaCXC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            esModificable = false;
        } // try-catch
        // Fin Bosco Agregado 22/11/2015
        
        return esModificable;
    } // end facturaModificable

    private boolean compararTCs(){
        // 1 Obtener el TC de la factura actual
        // 2 Obtener el TC para la fecha propuesta
        // 3 Comparar ambos TCs
        
        boolean continuar = true;
        //String facnume = this.txtFacnumeOrigen.getText();
        int facnume = Integer.parseInt(txtFacnumeOrigen.getText().trim());
        Date facfech = this.DatFacfech.getDate();
        String sqlSelect = 
                "Select codigoTC,tipoca from faencabe " +
                "where facnume = ? and facnd = 0";

        ResultSet rsTC;
        PreparedStatement ps;
        float tipoca1;
        float tipoca2;
        String codigoTC;
        
        try {
            ps = conn.prepareStatement(sqlSelect, 
                    ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            //rsTC = UtilBD.SQLSelect(conn, sqlSelect);
            ps.setInt(1, facnume);
            rsTC = CMD.select(ps);
            
            // Si el registro no existe se da por buena la validación.
            // Esto se debe a que no se podrá procesar nada si el registro no existe.
            if (!Ut.goRecord(rsTC, Ut.FIRST)){
                return true;
            } // end if
            
            // Obtener el TC de la factura.
            tipoca1  = rsTC.getFloat("tipoca");
            codigoTC = rsTC.getString("codigoTC");
            
            // Obtener el TC para la fecha propuesta
            tipoca2  = UtilBD.tipoCambio(codigoTC, facfech, conn);
        } catch (SQLException ex) {
            Logger.getLogger(CambioEnFacturaCXC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                        ex.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return false;
        } // end try-catch

        int respuesta;
        if (tipoca1 != tipoca2 ){
            respuesta =
                JOptionPane.showConfirmDialog(
                        null, 
                        "El tipo de cambio de la factura es diferente\n" +
                        "del que hay registrado para la nueva fecha.\n" +
                        "¿Realmente desea continuar?",
                        "Advertencia",
                        JOptionPane.YES_NO_OPTION);
            continuar = respuesta == JOptionPane.YES_OPTION;
        } // end if
        return continuar;
    } // end compararTCs method
} // end class
