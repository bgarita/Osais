/*
 * RegistroNDCXC.java
 *
 * Created on 29/04/2009, 09:24:08 PM
 */
package interfase.transacciones;

import Exceptions.CurrencyExchangeException;
import Mail.Bitacora;
import accesoDatos.CMD;
import accesoDatos.UtilBD;
import interfase.otros.Buscador;
import interfase.otros.Navegador;
import interfase.otros.OrdendeCompra;
import java.awt.HeadlessException;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import logica.OrdenCompra;
import logica.utilitarios.SQLInjectionException;
import logica.utilitarios.Ut;

/**
 *
 * @author Bosco Garita
 */
@SuppressWarnings("serial")
public class RegistroNDCXC extends javax.swing.JFrame {

    private Connection conn;
    private Statement stat;
    private ResultSet rs;
    private ResultSet rsMoneda = null;  // Monedas
    private String codigoTC;            // Código del tipo de cambio
    private final String codigoTCP;     // Código de maneda predeterminado
    private final boolean redond5;      // Decide si se redondea a 5 y 10
    private boolean inicio = true;      // Se usa para evitar que corran agunos eventos
    private Navegador nav = null;
    private boolean fin;                // Se usa para evitar que corran agunos eventos
    private OrdenCompra orden;          // Bosco agregado 26/09/2018
    private boolean buscando;
    private final Bitacora b = new Bitacora();

    public RegistroNDCXC(Connection c) throws SQLException {
        initComponents();

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                mnuSalirActionPerformed(null);
            } // end windowClosing
        } // end class
        ); // end Listener

        this.buscando = false;
        this.orden = new OrdenCompra(); // Bosco agregado 26/09/2018

        conn = c;
        stat = c.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
                ResultSet.CONCUR_READ_ONLY);
        nav = new Navegador();
        nav.setConexion(conn);

        setConsecutivo();
        DatFacfech.setDate(GregorianCalendar.getInstance().getTime());
        txtFacmont.setText("0.00");

        // Cargo el combo de las monedas
        cargarComboMonedas();

        // Elijo la moneda predeterminada
        rs = stat.executeQuery("Select codigoTC,redond5 from config");
        rs.first();
        codigoTCP = rs.getString("codigoTC").trim();
        codigoTC = rs.getString("codigoTC").trim();
        redond5 = rs.getBoolean("redond5");
        String descrip = "";
        rsMoneda.beforeFirst();
        while (rsMoneda.next()) {
            if (rsMoneda.getString("codigo").trim().equals(codigoTC)) {
                descrip = rsMoneda.getString("descrip").trim();
                break;
            } // end if
        } // end while
        if (!descrip.equals("")) {
            cboMoneda.setSelectedItem(descrip);
        } // end if
        inicio = false;
        cboMonedaActionPerformed(null);
    } // end contructor

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmdGuardar = new javax.swing.JButton();
        cmdSalir = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtFacnume = new javax.swing.JFormattedTextField();
        jLabel1 = new javax.swing.JLabel();
        txtClicode = new javax.swing.JFormattedTextField();
        txtClidesc = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        DatFacfech = new com.toedter.calendar.JDateChooser();
        txtFacmont = new javax.swing.JFormattedTextField();
        txtReferencia = new javax.swing.JTextField();
        cboMoneda = new javax.swing.JComboBox();
        txtTipoca = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        txtOrdenC = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuArchivo = new javax.swing.JMenu();
        mnuGuardar = new javax.swing.JMenuItem();
        mnuSalir = new javax.swing.JMenuItem();
        mnuEdicion = new javax.swing.JMenu();
        mnuBuscar = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Registro de Notas de Débito (CXC)");

        cmdGuardar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmdGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/disk.png"))); // NOI18N
        cmdGuardar.setText("Guardar");
        cmdGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGuardarActionPerformed(evt);
            }
        });

        cmdSalir.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmdSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/control-power.png"))); // NOI18N
        cmdSalir.setText("Salir");
        cmdSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSalirActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 153, 0));
        jLabel6.setText("N. Débito");

        txtFacnume.setEditable(false);
        txtFacnume.setColumns(6);
        txtFacnume.setForeground(new java.awt.Color(255, 0, 51));
        txtFacnume.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtFacnume.setFocusable(false);
        txtFacnume.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFacnumeFocusGained(evt);
            }
        });
        txtFacnume.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFacnumeActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Cliente");

        txtClicode.setColumns(6);
        txtClicode.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtClicode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtClicodeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtClicodeFocusLost(evt);
            }
        });
        txtClicode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtClicodeActionPerformed(evt);
            }
        });

        txtClidesc.setEditable(false);
        txtClidesc.setForeground(new java.awt.Color(0, 51, 255));
        txtClidesc.setFocusable(false);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Fecha");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Monto");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setLabelFor(txtReferencia);
        jLabel5.setText("Referencia");

        DatFacfech.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                DatFacfechPropertyChange(evt);
            }
        });

        txtFacmont.setColumns(12);
        txtFacmont.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        txtFacmont.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtFacmont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFacmontActionPerformed(evt);
            }
        });
        txtFacmont.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFacmontFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFacmontFocusLost(evt);
            }
        });

        txtReferencia.setColumns(10);
        txtReferencia.setToolTipText("Debe digitar una nota de crédito existente");
        txtReferencia.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtReferenciaFocusLost(evt);
            }
        });
        txtReferencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtReferenciaActionPerformed(evt);
            }
        });

        cboMoneda.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cboMoneda.setForeground(new java.awt.Color(204, 0, 153));
        cboMoneda.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Colones", "Dólares" }));
        cboMoneda.setToolTipText("Moneda");
        cboMoneda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboMonedaActionPerformed(evt);
            }
        });

        txtTipoca.setEditable(false);
        txtTipoca.setColumns(12);
        txtTipoca.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTipoca.setToolTipText("Tipo de cambio");
        txtTipoca.setFocusable(false);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Moneda");

        txtOrdenC.setEditable(false);
        txtOrdenC.setText("[orden compra]");
        txtOrdenC.setToolTipText("Digite el número de orden de compra");
        txtOrdenC.setFocusable(false);

        mnuArchivo.setText("Archivo");

        mnuGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        mnuGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/disk.png"))); // NOI18N
        mnuGuardar.setText("Guardar");
        mnuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuGuardarActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuGuardar);

        mnuSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.CTRL_MASK));
        mnuSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/control-power.png"))); // NOI18N
        mnuSalir.setText("Salir");
        mnuSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSalirActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuSalir);

        jMenuBar1.add(mnuArchivo);

        mnuEdicion.setText("Edición");

        mnuBuscar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        mnuBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/binocular.png"))); // NOI18N
        mnuBuscar.setText("Buscar");
        mnuBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuBuscarActionPerformed(evt);
            }
        });
        mnuEdicion.add(mnuBuscar);
        mnuEdicion.add(jSeparator3);

        jMenuBar1.add(mnuEdicion);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(137, 137, 137)
                        .addComponent(cmdGuardar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdSalir, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtFacnume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8)
                                .addComponent(jLabel1)
                                .addGap(6, 6, 6)
                                .addComponent(txtClicode, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtOrdenC))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtReferencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(86, 86, 86)
                                        .addComponent(jLabel4))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cboMoneda, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtTipoca, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel3)
                                        .addGap(4, 4, 4)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtFacmont, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(DatFacfech, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)))))
                    .addComponent(txtClidesc, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cmdGuardar, cmdSalir});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txtClicode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(txtFacnume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtOrdenC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addComponent(txtClidesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txtFacmont, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtReferencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel7)
                    .addComponent(cboMoneda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTipoca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(DatFacfech, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cmdGuardar, cmdSalir});

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSalirActionPerformed
        this.fin = true;

        setVisible(false);
        try {
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(RegistroNDCXC.class.getName()).log(Level.SEVERE, null, ex);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
        dispose();
}//GEN-LAST:event_cmdSalirActionPerformed

    private void cmdGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGuardarActionPerformed
        String facnume, clicode, referencia, tipoca, sqlSent;

        // ****** Validar los datos ******
        // La referencia no puede ser mayor a 10 caracteres
        referencia = txtReferencia.getText().trim();
        if (referencia.length() > 10) {
            JOptionPane.showMessageDialog(null,
                    "El número de referencia no puede exeder "
                    + "los 10 caracteres.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            txtReferencia.requestFocusInWindow();
            return;
        } // end if
        
        // Tampoco puede quedar vacía (referencia para Hacienda)
        if (referencia.length() == 0) {
            JOptionPane.showMessageDialog(null,
                    "El número de referencia no puede quedar vacío.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            txtReferencia.requestFocusInWindow();
            return;
        } // end if

        // Valido el cliente
        if (txtClidesc.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,
                    "El cliente no es válido.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            txtClicode.requestFocusInWindow();
            return;
        } // end if

        // Valido la fecha
        String fecha;
        fecha = Ut.fechaSQL(this.DatFacfech.getDate());
        try {
            if (!UtilBD.isValidDate(conn, fecha)) {
                JOptionPane.showMessageDialog(null,
                        "La fecha corresponde a un período cerrado.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                DatFacfech.requestFocusInWindow();
                return;
            } // end if
        } catch (SQLException ex) {
            Logger.getLogger(RegistroNDCXC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return;
        }

        // Valido el monto de la ND
        String lcFacmont = txtFacmont.getText().trim();
        try {
            lcFacmont = Ut.quitarFormato(lcFacmont);
        } catch (Exception ex) {
            Logger.getLogger(RegistroNDCXC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return;
        } // end try-catch

        if (Double.parseDouble(lcFacmont) <= 0.00) {
            JOptionPane.showMessageDialog(null,
                    "Debe digitar un monto válido.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            txtFacmont.requestFocusInWindow();
            return;
        } // end if

        // Inicia el proceso de guardado
        facnume = txtFacnume.getText();
        clicode = txtClicode.getText();
        tipoca = txtTipoca.getText();

        boolean hayTransaccion = false;

        sqlSent
                = "Call InsertarNDCXC("
                + facnume + ","
                + clicode + ","
                + fecha + ","
                + lcFacmont + ","
                + "'" + referencia + "'" + ","
                + "'" + codigoTC + "'" + ","
                + tipoca + ","
                + "-" + facnume + ")"; // Bosco agregado 26/09/2018
        try {
            CMD.transaction(conn, CMD.START_TRANSACTION);
            hayTransaccion = true;
            rs = stat.executeQuery(sqlSent); // Este SP devuelve un resultado
            rs.first();
            if (rs.getBoolean(1)) {
                JOptionPane.showMessageDialog(null,
                        rs.getString(2),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                //stat.executeUpdate("RollBack");
                CMD.transaction(conn, CMD.ROLLBACK);
                return;
            } // end if

            // Actualizar el saldo del cliente (siempre va en moneda local).
            String sqlUpdate
                    = "Update inclient "
                    + "Set clisald = clisald + " + lcFacmont + " * " + tipoca
                    + "Where clicode = " + clicode;

            int affected = stat.executeUpdate(sqlUpdate);

            if (affected == 0) {
                JOptionPane.showMessageDialog(null,
                        "No se pudo actualizar el saldo del cliente.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                CMD.transaction(conn, CMD.ROLLBACK);
                return;
            } // end if

            // Actualizar el consecutivo
            sqlUpdate = "Update config Set ndeb = " + facnume;
            affected = stat.executeUpdate(sqlUpdate);

            if (affected == 0) {
                JOptionPane.showMessageDialog(null,
                        "No se pudo actualizar el consecutivo de notas de débito.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);

                CMD.transaction(conn, CMD.ROLLBACK);
                return;
            } // end if

            // Bosco agregado 26/09/2018
            // Registrar la orden de compra (si es requerido).
            if (orden.getWMNumeroOrden().trim().length() > 0) {
                orden.setFacnd(Integer.parseInt(facnume) * -1);
                orden.setFacnume(Integer.parseInt(facnume));

                sqlUpdate
                        = "INSERT INTO `faotros` "
                        + "(`facnume`, "
                        + "`facnd`, "
                        + "`WMNumeroVendedor`, "
                        + "`WMNumeroOrden`, "
                        + "`WMEnviarGLN`, "
                        + "`WMNumeroReclamo`, "
                        + "`WMFechaReclamo`) "
                        + "VALUES( "
                        + "?, "
                        + "?, "
                        + "?, "
                        + "?, "
                        + "?, "
                        + "?, "
                        + "?)";

                PreparedStatement psFaotros = conn.prepareStatement(sqlUpdate);
                psFaotros.setInt(1, orden.getFacnume());
                psFaotros.setInt(2, orden.getFacnd());
                psFaotros.setString(3, orden.getWMNumeroVendedor());
                psFaotros.setString(4, orden.getWMNumeroOrden());
                psFaotros.setString(5, orden.getWMEnviarGLN());
                psFaotros.setString(6, orden.getWMNumeroReclamo());
                psFaotros.setString(7, orden.getWMFechaReclamo());

                affected = psFaotros.executeUpdate();
                if (affected == 0) {
                    JOptionPane.showMessageDialog(null,
                            "No se pudieron registrar los datos de la orden de compra."
                            + "\nFactura NO guardada.",
                            "Error",
                            JOptionPane.ERROR_MESSAGE);

                    CMD.transaction(conn, CMD.ROLLBACK);
                    return;
                } // end if
                psFaotros.close();
            } // end if
            // Fin Bosco agregado 26/09/2018

            CMD.transaction(conn, CMD.COMMIT);
            hayTransaccion = false;
            JOptionPane.showMessageDialog(null,
                    "Nota de débito " + facnume + " registrada.",
                    "Mensaje",
                    JOptionPane.INFORMATION_MESSAGE);

            // Preparo los objetos para otra nota de débito
            setConsecutivo();
            txtClicode.setText("");
            txtClidesc.setText("");
            txtOrdenC.setText("");
            txtFacmont.setText("0.00");
            txtReferencia.setText("");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            if (hayTransaccion) {
                try {
                    CMD.transaction(conn, CMD.ROLLBACK);
                } catch (SQLException ex1) {
                    JOptionPane.showMessageDialog(null,
                            ex1.getMessage(),
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                    b.writeToLog(this.getClass().getName() + "--> " + ex1.getMessage());
                    // Si a este nivel ocurre un error hay que cerrar el sistema
                    System.exit(-1);
                }
            } // end if
        } // end catch
        txtClicode.requestFocusInWindow();
    }//GEN-LAST:event_cmdGuardarActionPerformed

    private void txtFacnumeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFacnumeActionPerformed
        txtFacnume.transferFocus();
}//GEN-LAST:event_txtFacnumeActionPerformed

    private void txtFacnumeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFacnumeFocusGained
        txtFacnume.selectAll();
}//GEN-LAST:event_txtFacnumeFocusGained

    private void txtClicodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtClicodeActionPerformed
        txtClicode.transferFocus();
}//GEN-LAST:event_txtClicodeActionPerformed

    private void txtClicodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtClicodeFocusGained
        txtClicode.selectAll();
}//GEN-LAST:event_txtClicodeFocusGained

    private void DatFacfechPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_DatFacfechPropertyChange
        if (this.inicio || this.fin) {
            return;
        } // end if

        String facfech = Ut.fechaSQL(DatFacfech.getDate());
        try {
            if (!UtilBD.isValidDate(conn, facfech)) {
                JOptionPane.showMessageDialog(null,
                        "No puede utilizar esta fecha.  "
                        + "\nCorresponde a un período ya cerrado.",
                        "Validar fecha..",
                        JOptionPane.ERROR_MESSAGE);
                cmdGuardar.setEnabled(false);
                DatFacfech.setDate(GregorianCalendar.getInstance().getTime());
            } // end if
        } catch (SQLException ex) {
            Logger.getLogger(RegistroNDCXC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
}//GEN-LAST:event_DatFacfechPropertyChange

    private void txtClicodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtClicodeFocusLost
        if (txtClicode.getText().trim().equals("")) {
            return;
        } // end if

        if (this.buscando) {
            return;
        }

        this.txtClidesc.setText("");
        String clicode = txtClicode.getText();
        boolean existe = false;

        //String sqlSelect = "Select ConsultarCliente(" + clicode + ")";
        String sqlSelect = "Call ConsultarDatosCliente(" + clicode + ")";
        try {
            rs = stat.executeQuery(sqlSelect);
            if (rs != null && rs.first()) {
                this.txtClidesc.setText(rs.getString("clidesc"));
                existe = true;
                // Registrar los datos de la orden de compra (Bosco 26/09/2018)
                if (rs.getBoolean("clireor")) {
                    JOptionPane.showMessageDialog(null,
                            "Este cliente debe presentar orden de compra",
                            "Advertencia",
                            JOptionPane.WARNING_MESSAGE);
                    OrdendeCompra dialog = new OrdendeCompra(new javax.swing.JFrame(), true, this.orden);
                    dialog.setVisible(true);
                    this.txtOrdenC.setText(orden.getWMNumeroOrden());
                    // Hasta este punto no se han establecido los valores de
                    // facnume y facnd en el objeto this.orden ya que pueden
                    // variar.  Se hará en el momento de guardar la ND.
                } // end if
            } // end if

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch

        if (!existe) {
            JOptionPane.showMessageDialog(null,
                    "Cliente no existe.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        } // end if

    }//GEN-LAST:event_txtClicodeFocusLost

    private void mnuBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuBuscarActionPerformed
        if (this.buscando) {
            return;
        } // end if

        this.buscando = true;

        Buscador bd = new Buscador(new java.awt.Frame(), true,
                "inclient", "clicode,Clidesc", "Clidesc", txtClicode, conn);
        bd.setTitle("Buscar clientes");
        bd.lblBuscar.setText("Nombre:");

        bd.setVisible(true);

        bd.dispose();
        this.buscando = false;
}//GEN-LAST:event_mnuBuscarActionPerformed

    private void mnuSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSalirActionPerformed
        cmdSalirActionPerformed(evt);
    }//GEN-LAST:event_mnuSalirActionPerformed

    private void cboMonedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboMonedaActionPerformed
        if (inicio) {
            return;
        } // end if

        // Localizo en en ResultSet el código correspondiente a la
        // descripción que está en el combo. Este método deja el código del TC
        // en la variable codigoTC.
        ubicarCodigo();
        try {
            // Verifico si el tipo de cambio ya está configurado para la fecha del doc.
            txtTipoca.setText(String.valueOf(UtilBD.tipoCambio(
                    codigoTC, DatFacfech.getDate(), conn)));
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return;
        }
        txtFacmontFocusLost(null);
}//GEN-LAST:event_cboMonedaActionPerformed

    private void txtReferenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtReferenciaActionPerformed
        txtReferencia.transferFocus();
    }//GEN-LAST:event_txtReferenciaActionPerformed

    private void txtFacmontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFacmontActionPerformed
        txtFacmont.transferFocus();
    }//GEN-LAST:event_txtFacmontActionPerformed

    private void txtFacmontFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFacmontFocusGained
        txtFacmont.selectAll();
    }//GEN-LAST:event_txtFacmontFocusGained

    private void mnuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuGuardarActionPerformed
        cmdGuardarActionPerformed(evt);
    }//GEN-LAST:event_mnuGuardarActionPerformed

    private void txtFacmontFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFacmontFocusLost
        if (txtFacmont.getText() == null) {
            return;
        } // end if
        redondear();
    }//GEN-LAST:event_txtFacmontFocusLost

    private void txtReferenciaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtReferenciaFocusLost
        String ref = this.txtReferencia.getText().trim();
        try {
            if (Integer.parseInt(ref) > 0) {
                ref = "-" + ref;
                this.txtReferencia.setText(ref);
            } // end if
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage()
                    + "\nDebe digitar un número de nota de crédito válido.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            this.txtReferencia.setText(""); // Al guardar se debe validar que este campo no esté vacío.
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return;
        } // end try-catch

        // Valido que el documento de referencia (NC) exista en la base de datos,
        // que no esté nula y que haya sido enviada a Hacienda.
        String sqlSent
                = "Select    "
                + "	abs(facmont) as Monto   "
                + "from faencabe "
                + "Where facnume = ? "
                + "and facnd = abs(?) "
                + "and (facestado = '' or facestado is null) "
                + "and claveHacienda is not NULL "
                + "and claveHacienda > ''";
        PreparedStatement ps;
        
        try {
            ps = conn.prepareStatement(sqlSent,
                    ResultSet.TYPE_SCROLL_SENSITIVE,
                    ResultSet.CONCUR_READ_ONLY);
            ps.setInt(1, Integer.parseInt(ref));
            ps.setInt(2, Integer.parseInt(ref));
            
            ResultSet rs = CMD.select(ps);
            
            if (rs == null || !rs.first()){
                JOptionPane.showMessageDialog(null, 
                        "La nota de crédito no existe, está nula o no ha sido enviada a Hacienda.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                this.txtReferencia.setText("");
            } else {
                this.txtFacmont.setText(rs.getDouble("Monto") + "");
            } // end if-else
            
            ps.close();
        } catch (SQLException ex) {
            Logger.getLogger(RegistroNDCXC.class.getName()).log(Level.SEVERE, null, ex);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
    }//GEN-LAST:event_txtReferenciaFocusLost

    /**
     * @param c
     */
    public static void main(final Connection c) {
        try {
            // Bosco agregado 23/07/2011
            // Integración del segundo nivel de seguridad.
            if (!UtilBD.tienePermiso(c, "RegistroNDCXC")) {
                JOptionPane.showMessageDialog(null,
                        "Usted no está autorizado para ejecutar este proceso",
                        "Error - Permisos",
                        JOptionPane.ERROR_MESSAGE);
                return;
            } // end if
        } catch (Exception ex) {
            Logger.getLogger(RegistroNDCXC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Fin Bosco agregado 23/07/2011
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    // Revisar el TC del dólar
                    Float tcd = UtilBD.tipoCambioDolar(c);

                    // Si no se ha establecido la configuración no continúo
                    Statement s = c.createStatement();
                    ResultSet r = s.executeQuery("Select facnume from config");
                    if (r == null) {
                        JOptionPane.showMessageDialog(null,
                                "Todavía no se ha establecido la "
                                + "configuración del sistema.",
                                "Configuración",
                                JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    new RegistroNDCXC(c).setVisible(true);
                } catch (CurrencyExchangeException | SQLException | NumberFormatException | HeadlessException ex) {
                    JOptionPane.showMessageDialog(null,
                            ex.getMessage(),
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser DatFacfech;
    private javax.swing.JComboBox cboMoneda;
    private javax.swing.JButton cmdGuardar;
    private javax.swing.JButton cmdSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JMenu mnuArchivo;
    private javax.swing.JMenuItem mnuBuscar;
    private javax.swing.JMenu mnuEdicion;
    private javax.swing.JMenuItem mnuGuardar;
    private javax.swing.JMenuItem mnuSalir;
    private javax.swing.JFormattedTextField txtClicode;
    private javax.swing.JTextField txtClidesc;
    private javax.swing.JFormattedTextField txtFacmont;
    private javax.swing.JFormattedTextField txtFacnume;
    private javax.swing.JTextField txtOrdenC;
    private javax.swing.JTextField txtReferencia;
    private javax.swing.JFormattedTextField txtTipoca;
    // End of variables declaration//GEN-END:variables

    private void setConsecutivo() {
        String sqlSent = "Select ConsecutivoFacturaCXC(3)";
        try {
            ResultSet consec = stat.executeQuery(sqlSent);
            // Aquí no se evalúa si hay datos o no porque la función
            // siempre devolverá algún valor.
            consec.first();
            txtFacnume.setText(consec.getString(1));
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
    } // end setConsecutivo

    private void ubicarCodigo() {
        try {
            // Busco el código que corresponde a la moneda del combo
            if (rsMoneda == null) {
                return;
            } // end if

            rsMoneda.beforeFirst();
            while (rsMoneda.next()) {
                if (cboMoneda.getSelectedItem().toString().trim().equals(rsMoneda.getString("descrip").trim())) {
                    codigoTC = rsMoneda.getString("codigo").trim();
                    break;
                } // end if
            } // end while
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
    } // end ubicarCodigo

    @SuppressWarnings("unchecked")
    private void cargarComboMonedas() {
        try {
            rsMoneda = nav.cargarRegistro(Navegador.TODOS, "", "monedas", "codigo");
            if (rsMoneda == null) {
                return;
            } // end if
            this.cboMoneda.removeAllItems();
            rsMoneda.beforeFirst();
            while (rsMoneda.next()) {
                cboMoneda.addItem(rsMoneda.getString("descrip"));
            } // end while
        } catch (SQLException | SQLInjectionException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
    } // end cargarComboMonedas

    private void redondear() {
        try {
            // Si la configuración no permite redondeo o
            // el código de moneda no es el predeterminado
            // no redondeo nada.
            if (!redond5 || !codigoTC.equals(codigoTCP)) {
                return;
            } // end if

            String monto
                    = Ut.quitarFormato(
                            txtFacmont.getText().trim());
            monto = Ut.redondearA5(monto);
            txtFacmont.setText(Ut.setDecimalFormat(monto, "##0.00"));
        } // end redondear
        catch (Exception ex) {
            Logger.getLogger(RegistroNDCXC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
    } // end redondear
} // end class
