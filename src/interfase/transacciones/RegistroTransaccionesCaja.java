package interfase.transacciones;

import Mail.Bitacora;
import accesoDatos.CMD;
import accesoDatos.UtilBD;
import static accesoDatos.UtilBD.getCajaForThisUser;
import interfase.mantenimiento.TarjetaDC;
import java.awt.Color;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import logica.Cacaja;
import logica.Catransa;
import logica.utilitarios.FormatoTabla;
import logica.Usuario;
import logica.utilitarios.Ut;

/**
 *
 * @author bosco
 */
public class RegistroTransaccionesCaja extends javax.swing.JFrame {
    private static final long serialVersionUID = 13L;
    private final Catransa tran;
    private final Cacaja caja;
    private Connection conn;
    private ResultSet rsDepCXC, rsRetCXP, rsRetCXC;
    
    private FormatoTabla formato;
    private String formatoPrecio; // Máscara para montos
    
    private JTextField txtIdtarjeta;
    

    /**
     * Creates new form RegistroTransaccionesCaja
     * @param c
     * @param cajaN
     */
    public RegistroTransaccionesCaja(Connection c, int cajaN) {
        initComponents();
        
        // Estos controles solo son visibles cuando el usuario decida
        // el tipo de pago que se realizará.
        this.lblRef.setVisible(false);
        this.txtReferencia.setVisible(false);
        this.lblBanco.setVisible(false);
        this.cboBanco.setVisible(false);
        
        this.conn = c;
        
        this.txtIdtarjeta = new JTextField("0"); // Código de tarjeta de crédito o débito
        
        formato = new FormatoTabla();
        try {
            formato.formatColumn(tblGirosCXC, 0, FormatoTabla.H_RIGHT, null);
            formato.formatColumn(tblGirosCXC, 1, FormatoTabla.H_CENTER, null);
            formato.formatColumn(tblGirosCXC, 3, FormatoTabla.H_RIGHT, Color.BLUE);
            formato.formatColumn(tblGirosCXC, 4, FormatoTabla.H_CENTER, null);
            formato.formatColumn(tblGirosCXC, 5, FormatoTabla.H_CENTER, null);
            formatoPrecio = UtilBD.getFormatoMonto(c);
        } catch (Exception ex) {
            Logger.getLogger(RegistroTransaccionesCaja.class.getName()).log(Level.SEVERE, null, ex);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
        
        
        caja = new Cacaja(cajaN, conn);
        caja.abrir(c);
        
        
        tran = new Catransa(c);
        
            
        loadDep();

        this.txtRecnume.setText(tran.getSiguienteRecibo() + "");
        
        try {
            UtilBD.loadBancos(conn, cboBanco);
            this.txtEfectivo.setText(Ut.fDecimal(caja.getEfectivo() + "", this.formatoPrecio));
        } catch (Exception ex) {
            Logger.getLogger(RegistroTransaccionesCaja.class.getName()).log(Level.SEVERE, null, ex);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
        
        tabGiros.setBorder(
                javax.swing.BorderFactory.createTitledBorder(
                        null, 
                        "Giros en tránsito - Caja # " + caja.getIdcaja() + " " + caja.getDescripcion().trim(), 
                        javax.swing.border.TitledBorder.CENTER, 
                        javax.swing.border.TitledBorder.DEFAULT_POSITION, 
                        new java.awt.Font("Dialog", 1, 14)));
    } // end constructor

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtCedula = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtRecnume = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cboTipopago = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        txtDocumento = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtMonto = new javax.swing.JFormattedTextField();
        tabGiros = new javax.swing.JTabbedPane();
        tabGirosCXC = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblGirosCXC = new javax.swing.JTable();
        tabGirosCXP = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblGirosCXP = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        txtTipoDoc = new javax.swing.JTextField();
        btnGuardar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txtModulo = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        radDep = new javax.swing.JRadioButton();
        radRet = new javax.swing.JRadioButton();
        lblRef = new javax.swing.JLabel();
        txtReferencia = new javax.swing.JTextField();
        lblBanco = new javax.swing.JLabel();
        cboBanco = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        txtEfectivo = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        txtTotal = new javax.swing.JFormattedTextField();
        jLabel10 = new javax.swing.JLabel();
        txtPago = new javax.swing.JFormattedTextField();
        jLabel11 = new javax.swing.JLabel();
        txtCambio = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Registrar transacciones");

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel1.setText("Código");

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Nombre");
        jLabel2.setPreferredSize(new java.awt.Dimension(60, 18));

        txtCedula.setEditable(false);

        txtNombre.setEditable(false);

        jLabel3.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel3.setText("Consecutivo");

        txtRecnume.setEditable(false);
        txtRecnume.setForeground(java.awt.Color.red);
        txtRecnume.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtRecnume.setText("0");

        jLabel4.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel4.setText("Tipo de pago");

        cboTipopago.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Desconocido", "Efectivo", "Cheque", "Tarjeta", "Transferencia" }));
        cboTipopago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTipopagoActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Docum.");

        txtDocumento.setEditable(false);
        txtDocumento.setText("0");
        txtDocumento.setToolTipText("Número de cheque, tarjeta, etc.");

        jLabel6.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel6.setText("Tipo Doc.");

        jLabel7.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel7.setText("Monto");

        txtMonto.setEditable(false);
        txtMonto.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtMonto.setText("0.00");

        tabGiros.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Giros en tránsito", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N
        tabGiros.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabGirosMouseClicked(evt);
            }
        });

        tblGirosCXC.setAutoCreateRowSorter(true);
        tblGirosCXC.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Docum", "Tipo", "Nombre", "Monto", "Fecha", "Código", "Mód"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblGirosCXC.setToolTipText("Haga clic sobre una transacción");
        tblGirosCXC.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblGirosCXC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblGirosCXCMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblGirosCXC);
        if (tblGirosCXC.getColumnModel().getColumnCount() > 0) {
            tblGirosCXC.getColumnModel().getColumn(0).setMinWidth(60);
            tblGirosCXC.getColumnModel().getColumn(0).setPreferredWidth(110);
            tblGirosCXC.getColumnModel().getColumn(0).setMaxWidth(200);
            tblGirosCXC.getColumnModel().getColumn(1).setMinWidth(40);
            tblGirosCXC.getColumnModel().getColumn(1).setPreferredWidth(45);
            tblGirosCXC.getColumnModel().getColumn(1).setMaxWidth(70);
            tblGirosCXC.getColumnModel().getColumn(2).setMinWidth(175);
            tblGirosCXC.getColumnModel().getColumn(2).setPreferredWidth(350);
            tblGirosCXC.getColumnModel().getColumn(2).setMaxWidth(450);
            tblGirosCXC.getColumnModel().getColumn(3).setMinWidth(110);
            tblGirosCXC.getColumnModel().getColumn(3).setPreferredWidth(155);
            tblGirosCXC.getColumnModel().getColumn(3).setMaxWidth(200);
            tblGirosCXC.getColumnModel().getColumn(6).setMinWidth(40);
            tblGirosCXC.getColumnModel().getColumn(6).setPreferredWidth(45);
            tblGirosCXC.getColumnModel().getColumn(6).setMaxWidth(70);
        }

        javax.swing.GroupLayout tabGirosCXCLayout = new javax.swing.GroupLayout(tabGirosCXC);
        tabGirosCXC.setLayout(tabGirosCXCLayout);
        tabGirosCXCLayout.setHorizontalGroup(
            tabGirosCXCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabGirosCXCLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 951, Short.MAX_VALUE)
                .addContainerGap())
        );
        tabGirosCXCLayout.setVerticalGroup(
            tabGirosCXCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabGirosCXCLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabGiros.addTab("Cuentas por cobrar", tabGirosCXC);

        tblGirosCXP.setAutoCreateRowSorter(true);
        tblGirosCXP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Docum", "Tipo", "Nombre", "Monto", "Fecha", "Código", "Mód"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblGirosCXP.setToolTipText("Haga clic sobre una transacción");
        tblGirosCXP.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblGirosCXP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblGirosCXPMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblGirosCXP);
        if (tblGirosCXP.getColumnModel().getColumnCount() > 0) {
            tblGirosCXP.getColumnModel().getColumn(0).setMinWidth(60);
            tblGirosCXP.getColumnModel().getColumn(0).setPreferredWidth(110);
            tblGirosCXP.getColumnModel().getColumn(0).setMaxWidth(200);
            tblGirosCXP.getColumnModel().getColumn(1).setMinWidth(40);
            tblGirosCXP.getColumnModel().getColumn(1).setPreferredWidth(45);
            tblGirosCXP.getColumnModel().getColumn(1).setMaxWidth(70);
            tblGirosCXP.getColumnModel().getColumn(2).setMinWidth(175);
            tblGirosCXP.getColumnModel().getColumn(2).setPreferredWidth(350);
            tblGirosCXP.getColumnModel().getColumn(2).setMaxWidth(450);
            tblGirosCXP.getColumnModel().getColumn(3).setMinWidth(110);
            tblGirosCXP.getColumnModel().getColumn(3).setPreferredWidth(155);
            tblGirosCXP.getColumnModel().getColumn(3).setMaxWidth(200);
            tblGirosCXP.getColumnModel().getColumn(6).setMinWidth(40);
            tblGirosCXP.getColumnModel().getColumn(6).setPreferredWidth(45);
            tblGirosCXP.getColumnModel().getColumn(6).setMaxWidth(70);
        }

        javax.swing.GroupLayout tabGirosCXPLayout = new javax.swing.GroupLayout(tabGirosCXP);
        tabGirosCXP.setLayout(tabGirosCXPLayout);
        tabGirosCXPLayout.setHorizontalGroup(
            tabGirosCXPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabGirosCXPLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 951, Short.MAX_VALUE)
                .addContainerGap())
        );
        tabGirosCXPLayout.setVerticalGroup(
            tabGirosCXPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabGirosCXPLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabGiros.addTab("Cuentas por pagar", tabGirosCXP);

        txtTipoDoc.setEditable(false);

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/24x24 png icons/Save.png"))); // NOI18N
        btnGuardar.setToolTipText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/24x24 png icons/Exit.png"))); // NOI18N
        btnSalir.setToolTipText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel8.setText("Origen");

        txtModulo.setEditable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        buttonGroup1.add(radDep);
        radDep.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        radDep.setForeground(java.awt.Color.blue);
        radDep.setSelected(true);
        radDep.setText("Depósito");
        radDep.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                radDepMouseClicked(evt);
            }
        });

        buttonGroup1.add(radRet);
        radRet.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        radRet.setForeground(java.awt.Color.blue);
        radRet.setText("Retiro");
        radRet.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                radRetMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radDep)
                    .addComponent(radRet))
                .addGap(12, 12, 12))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(radDep)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(radRet)
                .addGap(4, 4, 4))
        );

        lblRef.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        lblRef.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblRef.setText("Ref.");

        lblBanco.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        lblBanco.setText("Banco");

        jLabel9.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel9.setText("Saldo en efectivo:");

        txtEfectivo.setEditable(false);
        txtEfectivo.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        txtEfectivo.setForeground(java.awt.Color.blue);
        txtEfectivo.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtEfectivo.setText("0.00");
        txtEfectivo.setToolTipText("Saldo en efectivo para esta caja");

        jPanel4.setBorder(null);
        jPanel4.setPreferredSize(new java.awt.Dimension(308, 149));

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel16.setText("Total");
        jLabel16.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        txtTotal.setEditable(false);
        txtTotal.setBackground(javax.swing.UIManager.getDefaults().getColor("tab_focus_fill_dark"));
        txtTotal.setColumns(9);
        txtTotal.setForeground(new java.awt.Color(184, 13, 125));
        txtTotal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotal.setText("0.00");
        txtTotal.setDisabledTextColor(java.awt.Color.blue);
        txtTotal.setFocusable(false);
        txtTotal.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel10.setText("Pagó");

        txtPago.setEditable(false);
        txtPago.setBackground(new java.awt.Color(255, 255, 204));
        txtPago.setColumns(9);
        txtPago.setForeground(new java.awt.Color(0, 0, 255));
        txtPago.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtPago.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtPago.setText("0.00");
        txtPago.setDisabledTextColor(new java.awt.Color(0, 0, 255));
        txtPago.setEnabled(false);
        txtPago.setFocusable(false);
        txtPago.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel11.setText("Cambio");

        txtCambio.setEditable(false);
        txtCambio.setBackground(new java.awt.Color(255, 255, 204));
        txtCambio.setColumns(9);
        txtCambio.setForeground(new java.awt.Color(0, 0, 255));
        txtCambio.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtCambio.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtCambio.setText("0.00");
        txtCambio.setDisabledTextColor(new java.awt.Color(0, 0, 255));
        txtCambio.setEnabled(false);
        txtCambio.setFocusable(false);
        txtCambio.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                    .addComponent(txtPago, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(txtCambio, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel16)
                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCambio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tabGiros, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel8))
                                        .addGap(4, 4, 4)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtModulo, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtCedula, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(cboTipopago, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblRef, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(4, 4, 4)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtReferencia, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblBanco)
                                        .addGap(3, 3, 3))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel6)
                                        .addGap(3, 3, 3)
                                        .addComponent(txtTipoDoc))
                                    .addComponent(txtNombre))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel3)
                                            .addGap(3, 3, 3)
                                            .addComponent(txtRecnume))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(jLabel7)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txtMonto, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(cboBanco, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(4, 4, 4)
                                .addComponent(txtEfectivo, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnSalir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnGuardar, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addContainerGap())))
            .addComponent(jSeparator1)
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnGuardar, btnSalir});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel2, jLabel5, lblRef});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtCedula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(txtRecnume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(txtTipoDoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMonto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(txtModulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel4)
                    .addComponent(cboTipopago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRef)
                    .addComponent(txtReferencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBanco)
                    .addComponent(cboBanco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(tabGiros, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(btnGuardar)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnSalir))
                        .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(txtEfectivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(67, 67, 67))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tblGirosCXCMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblGirosCXCMouseClicked
        // Verificar que se haya seleccionado alguna fila
        int row = this.tblGirosCXC.getSelectedRow();
        
        // Si no hay una fila elegida o el valor de la primera celda es null...
        if (row < 0 || tblGirosCXC.getValueAt(row, 0) == null){
            return;
        } // end if
        
        // Trasladar los valores a los campos respectivos
        this.txtCedula.setText(tblGirosCXC.getValueAt(row, 5).toString());
        this.txtNombre.setText(tblGirosCXC.getValueAt(row, 2).toString());
        this.txtMonto.setText(tblGirosCXC.getValueAt(row, 3).toString());
        this.txtDocumento.setText(tblGirosCXC.getValueAt(row, 0).toString());
        this.txtTipoDoc.setText(tblGirosCXC.getValueAt(row, 1).toString());
        this.txtModulo.setText(tblGirosCXC.getValueAt(row, 6).toString());
        
        this.txtTotal.setText(this.txtMonto.getText());
        
        // Se establece el tipo de pago en efectivo como default
        this.cboTipopago.setSelectedIndex(1);
    }//GEN-LAST:event_tblGirosCXCMouseClicked

    // Cargar todos los registros que se puede procesar como depósitos
    private void radDepMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_radDepMouseClicked
        // Limpiar los campos para evitar errores
        this.clearObjects();
        
        if (!radDep.isSelected()){
            return;
        } // end if
        
        this.loadDep();
        
        // Limpiar la tabla de CXP
        Ut.clearJTable(tblGirosCXP);
    }//GEN-LAST:event_radDepMouseClicked

    // Cargar todos los registros que se puede procesar como retiros
    private void radRetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_radRetMouseClicked
        // Limpiar los campos para evitar errores
        this.clearObjects();
        
        if (!radRet.isSelected()){
            return;
        } // end if
        
        this.loadRetCXC();
        this.loadRet();
        
    }//GEN-LAST:event_radRetMouseClicked

    private void tblGirosCXPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblGirosCXPMouseClicked
        // Verificar que se haya seleccionado alguna fila
        int row = this.tblGirosCXP.getSelectedRow();
        
        // Si no hay una fila elegida o el valor de la primera celda es null...
        if (row < 0 || tblGirosCXP.getValueAt(row, 0) == null){
            return;
        } // end if
        
        // Trasladar los valores a los campos respectivos
        this.txtCedula.setText(tblGirosCXP.getValueAt(row, 5).toString());
        this.txtNombre.setText(tblGirosCXP.getValueAt(row, 2).toString());
        this.txtMonto.setText(tblGirosCXP.getValueAt(row, 3).toString());
        this.txtDocumento.setText(tblGirosCXP.getValueAt(row, 0).toString());
        this.txtTipoDoc.setText(tblGirosCXP.getValueAt(row, 1).toString());
        this.txtModulo.setText(tblGirosCXP.getValueAt(row, 6).toString());
        
        this.txtTotal.setText(this.txtMonto.getText());
        // Se establece el tipo de pago en efectivo como default
        this.cboTipopago.setSelectedIndex(1);
    }//GEN-LAST:event_tblGirosCXPMouseClicked

    private void tabGirosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabGirosMouseClicked
        // Si el usuario elige la cejilla de cuentas por pagar y la opción en
        // proceso es depósitos no puede haber registros de CXP
        if (tabGiros.getSelectedIndex() == 1 && this.radDep.isSelected()){
            Ut.clearJTable(tblGirosCXP);
        } // end if
    }//GEN-LAST:event_tabGirosMouseClicked

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        tran.closeAllRS();
        dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // Si no hay documento no continúo.  Esto sucede cuando el usuario no
        // ha seleccionado un registro en alguna de las tablas de giros.
        if (this.txtDocumento.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(null, 
                    "El número de documento no puede quedar en blanco.\n" +
                    "Debe hacer clic sobre la transacción que desea ejecutar.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if
        
        // Vuelvo a abrir la caja para garantizar que la transacción entra
        // en un tiempo válido.  Podría suceder que el mismo usuario tenga
        // abierta la pantalla de cajas y ejecute el cierre antes de veni a
        // esta pantalla e intentar guardar la transacción.
        caja.abrir(conn);
        
        if (caja.isError()){
            JOptionPane.showMessageDialog(null, 
                    caja.getMensaje_error(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if
        
        tran.closeAllRS();
        
        int tipopago;           // 0 = Desconocido, 1 = Efectivo, 2 = cheque, 3 = tarjeta, 4 = Transferencia
        boolean deposito;       // true, false
        double monto;           // Monto de la transacción
        boolean transac;        // Se usa para el control transaccional (true=hay transacción, false=No hay)
        int idbanco;            // Código de banco
        int posGuion;           // Se usa para procesar strings (posición del guión)
        String banco;           // Se usa para obtener el código del banco (idbanco)
        int recnumeca;          // Número de recibo de caja
        Calendar cal;           // Se usa para obtener la fecha de hoy
        String sqlSent;         // Se usa para crear las sentencias SQL
        PreparedStatement ps;   // Sentencias SQL preparadas
        int doc;                // Número de documento de la transacción
        int idtarjeta;          // Número de tarjeta de débito o crédito
        
        tipopago = this.cboTipopago.getSelectedIndex();
        deposito = this.radDep.isSelected();
        
        /*
        El tipo de pago desconocido no se permite.
        */
        if (tipopago == 0){
            JOptionPane.showMessageDialog(null, 
                    "El tipo de pago no es válido para esta transacción.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            this.cboTipopago.requestFocusInWindow();
            return;
        } // end if
        
        /*
        Si la transacción es un cheque, tarjeta o transferencia el número de
        referencia no puede quedar vacío.
        */
        if (tipopago > 1 && this.txtReferencia.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(null, 
                    "El número de referencia no puede quedar vacío.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            this.txtReferencia.requestFocusInWindow();
            return;
        } // end if
        
        try {
            monto = Double.parseDouble(Ut.quitarFormato(this.txtMonto.getText().trim()));
            if (monto < 0){
                monto = monto * -1.0;
            } // end if
        } catch (Exception ex) {
            Logger.getLogger(RegistroTransaccionesCaja.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return;
        } // end try-catch
        
        tran.setMonto(monto);
        
        // Validar el efectivo
        if (!deposito && tipopago == 1 && monto > caja.getEfectivo()){
            JOptionPane.showMessageDialog(null, 
                    "Efectivo insuficiente en caja.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if
        
        // Si el pago es en efectivo muestro la pantalla de cambio
        if (tipopago == 1 && deposito){
            JTextField continuar;
            continuar = new JTextField();
            continuar.setText("No");
            new Cambio(new java.awt.Frame(), true,
                    this.txtTotal.getText(),
                    this.txtPago,
                    this.txtCambio,
                    continuar).setVisible(true);
            if (continuar.getText().trim().equals("No")){
                return;
            } // end if
        } // end if
        
        // Confirmar el consecutivo
        recnumeca = tran.getSiguienteRecibo();
        tran.setRecnume(recnumeca);
        tran.setDocumento(this.txtDocumento.getText());
        tran.setTipodoc(this.txtTipoDoc.getText());
        tran.setTipomov(this.radDep.isSelected() ? "D": "R");
        
        
        cal = GregorianCalendar.getInstance();
        
        tran.setFecha(new Date(cal.getTimeInMillis())); 
        tran.setCedula(this.txtCedula.getText());
        tran.setNombre(this.txtNombre.getText());
        tran.setTipopago(tipopago);
        tran.setReferencia(this.txtReferencia.getText());
        tran.setIdcaja(caja.getIdcaja());
        tran.setCajero(caja.getUser());
        tran.setModulo(this.txtModulo.getText());
        
        banco = this.cboBanco.getSelectedItem().toString();
        posGuion = Ut.getPosicion(banco, "-");
        banco = banco.substring(0, posGuion);
        idbanco = Integer.parseInt(banco);
        tran.setIdbanco(idbanco);
        
        idtarjeta = Integer.parseInt(this.txtIdtarjeta.getText().trim());
        tran.setIdtarjeta(idtarjeta);
                
        
        transac = false;
        try {
            // Iniciar transacción
            CMD.transaction(conn, CMD.START_TRANSACTION);
            transac = true;
            
            // Actualizar la tabla de transacciones
            tran.registrar(deposito); // Hace el insert en catransa
            if (tran.isError()){
                CMD.transaction(conn, CMD.ROLLBACK);
                JOptionPane.showMessageDialog(null, 
                        tran.getMensaje_error(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            } // end if
            
            // Actualizar el saldo de caja
            if (tran.getTipomov().equals("D")){
                caja.setDepositos(caja.getDepositos() + tran.getMonto());
                caja.setSaldoactual(caja.getSaldoactual() + tran.getMonto());
                
                // Si el pago es en efectivo se debe actualizar este rubro
                if (tipopago == 1){
                    caja.setEfectivo(caja.getEfectivo() + monto);
                } // end if
            } else {
                caja.setRetiros(caja.getRetiros() + tran.getMonto());
                caja.setSaldoactual(caja.getSaldoactual() - tran.getMonto());
                
                // Si el pago es en efectivo se debe actualizar este rubro
                if (tipopago == 1){
                    caja.setEfectivo(caja.getEfectivo() - monto);
                } // end if
            } // end if
            
            caja.actualizarTransacciones(); // Saldos y fechas
            
            if (caja.isError()){ // Si hay error... rollback
                CMD.transaction(conn, CMD.ROLLBACK);
                JOptionPane.showMessageDialog(null, 
                        caja.getMensaje_error(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            } // end if
            
            // Actualizar el módulo origen
            doc = Integer.parseInt(tran.getDocumento().trim());
            
            // Si es un depósito se debe actualizar la tabla faencabe, o pagos 
            // (facturación o recibos, CXC)...
            // ... si es un retiro podría ser una devolución de dinero, un pago a provedores 
            // o una compra de contado.
            if (tran.getTipomov().equals("D")){ // Depósitos
                if (tran.getTipodoc().equals("FAC")){ // Facturas
                    sqlSent = 
                            "Update faencabe set " +
                            "   reccaja = ?      " +
                            "Where facnume = ?   " +
                            "and facnd = 0";
                } else { // Recibos
                    sqlSent = 
                            "Update pagos set  " +
                            "   reccaja = ?    " +
                            "Where recnume = ? ";
                } // end if
                
                
                ps = conn.prepareStatement(sqlSent);
                ps.setInt(1, tran.getRecnume());
                ps.setInt(2, doc);
            } else if (tran.getTipodoc().equals("NCR")){ // Retiros
                sqlSent = 
                        "Update faencabe set " +
                        "   reccaja = ?    " +
                        "Where facnume = ? " +
                        "and facnd = abs(?)";
                
                ps = conn.prepareStatement(sqlSent);
                ps.setInt(1, tran.getRecnume());
                ps.setInt(2, doc);
                ps.setInt(3, doc);
            } else if (tran.getTipodoc().equals("FAC")){ // Retiros
                sqlSent = 
                        "Update cxpfacturas set " +
                        "   reccaja = ?    " +
                        "Where factura = ? " +
                        "and tipo = ? and procode = ?";
                
                ps = conn.prepareStatement(sqlSent);
                ps.setInt(1, tran.getRecnume());
                ps.setString(2, doc+"");
                ps.setString(3, tran.getTipodoc());
                ps.setString(4, tran.getCedula());
            } else {                                    // Retiro (pago a proveedores)
                sqlSent = 
                        "Update cxppage set " +
                        "   reccaja = ?     " +
                        "Where recnume = ?  ";
                
                ps = conn.prepareStatement(sqlSent);
                ps.setInt(1, tran.getRecnume());
                ps.setInt(2, doc);
            } // end if-else
            
            // Solo un registro puede ser actualizado
            int reg = CMD.update(ps);
            if (reg != 1){
                CMD.transaction(conn, CMD.ROLLBACK);
                JOptionPane.showMessageDialog(null, 
                        "Error! Se esperaba actualizar 1 registro en el auxiliar" +
                        "pero se actualizaron " + reg + ".",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            } // end if
            ps.close();
            
            // Actualizo el consecutivo de recibos de caja
            sqlSent = 
                    "Update config set " +
                    "   recnumeca = ?";
            ps = conn.prepareStatement(sqlSent);
            ps.setInt(1, tran.getRecnume());
            CMD.update(ps);
            
            // Si todo está bien confirmo la transacción
            CMD.transaction(conn, CMD.COMMIT);
            ps.close();
            
            JOptionPane.showMessageDialog(null, 
                    "Transacción registrada exitosamentge",
                    "Mensaje",
                    JOptionPane.INFORMATION_MESSAGE);
            
            
            // Si la transacción se confirmó hay que limpiar los campos y
            // actualizar el grid.
            this.clearObjects();
            if (tran.getTipomov().equals("D")){
                this.loadDep();
            } else {
                this.loadRet();
                this.loadRetCXC();
            } // end if
            
            this.txtRecnume.setText((tran.getRecnume() + 1) + "");
            this.txtIdtarjeta.setText("0");
        } catch (Exception ex) { // Se mantiene por un tiempo para determinar distintos tipos de error 06/06/2015
            Logger.getLogger(RegistroTransaccionesCaja.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            if (transac){
                try {
                    CMD.transaction(conn, CMD.ROLLBACK);
                } catch (SQLException ex1) {
                    Logger.getLogger(RegistroTransaccionesCaja.class.getName()).log(Level.SEVERE, null, ex1);
                    JOptionPane.showMessageDialog(null, 
                            "Ocurrió un error inesperado.\n" + 
                            "El sistema se cerrará para proteger la integridad.",
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                    new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex1.getMessage());
                    System.exit(1);
                } // end try-catch interno
            } // end if
        } // end try-catch
        try {
            this.txtEfectivo.setText(Ut.fDecimal(caja.getEfectivo() + "", this.formatoPrecio));
        } catch (Exception ex) {
            Logger.getLogger(RegistroTransaccionesCaja.class.getName()).log(Level.SEVERE, null, ex);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
        
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void cboTipopagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTipopagoActionPerformed
        if (cboTipopago.getSelectedIndex() == 1){
            return;
        } // end if
        
        String item = cboTipopago.getSelectedItem().toString();
        String etiq = item.equals("Tarjeta") ? "Autorización":item;
        
        // Para los tipos "Desconocido" y "Efectivo" no se requiere referencia
        if (item.equals("Desconocido") || item.equals("Efectivo")){
            this.lblRef.setVisible(false);
            this.txtReferencia.setText("");
            this.txtReferencia.setVisible(false);
            this.lblBanco.setVisible(false);
            this.cboBanco.setVisible(false);
            return;
        } // end if
        
        // Estos campos solo se activan cuando el usuario elija, cheque, tarjeta o transferencia
        this.lblRef.setText(etiq);
        this.lblRef.setVisible(true);
        this.txtReferencia.setText("");
        this.txtReferencia.setVisible(true);
        this.lblBanco.setVisible(!item.equals("Tarjeta"));
        this.cboBanco.setVisible(!item.equals("Tarjeta"));
        
        this.cboBanco.setSelectedIndex(0);
        
        this.txtReferencia.setEnabled(!item.equals("Tarjeta"));
        
        this.txtReferencia.requestFocusInWindow();
        
        // Si se trata de una tarajeta hago el llamado a la pantalla de 
        // mantenimiento de tarjetas con los parámetros necesarios para
        // su debida inicialización y actualización.
        if (item.equals("Tarjeta")){
            TarjetaDC.main(conn, this.txtIdtarjeta, this.txtReferencia);
        } // end if
        
    }//GEN-LAST:event_cboTipopagoActionPerformed

    /**
     * @param c
     */
    public static void main(final Connection c) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistroTransaccionesCaja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        try {
            if (!UtilBD.tienePermiso(c,"TransaccionesCaja")){
                JOptionPane.showMessageDialog(null,
                        "Usted no está autorizado para ejecutar este proceso",
                        "Error - Permisos",
                        JOptionPane.ERROR_MESSAGE);
                return;
            } // end if
            
        } catch (Exception ex) {
            Logger.getLogger(RegistroTransaccionesCaja.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end try-catch
        
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                
                // Determinar a cual caja esta asignado el usuario
                int cajaN; // Numero de caja
                try {
                    cajaN = getCajaForThisUser(Usuario.USUARIO, c);
                } catch (SQLException ex) {
                    Logger.getLogger(RegistroTransaccionesCaja.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null, 
                            ex.getMessage(),
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                } // end try-catch
                
                // Crear el objeto caja con el número correspondiente al usuario
                Cacaja caja = new Cacaja(cajaN, c);
                
                if (caja.isError()){
                    JOptionPane.showMessageDialog(null, 
                            caja.getMensaje_error(),
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                } // end if
                
                // Abrir la caja y determinar cualquier tipo de error como
                // que el usuario no esté asignado a la caja o que esté inactivo.
                caja.abrir(c);
                if (caja.isError()){
                    JOptionPane.showMessageDialog(null, 
                            caja.getMensaje_error(),
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                } // end if
                
                // Si no hay error en las validaciones de la caja entonces
                // procedo a mostrar la pantalla para que el usuario pueda
                // registrar transacciones.
                new RegistroTransaccionesCaja(c, cajaN).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnSalir;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cboBanco;
    private javax.swing.JComboBox cboTipopago;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblBanco;
    private javax.swing.JLabel lblRef;
    private javax.swing.JRadioButton radDep;
    private javax.swing.JRadioButton radRet;
    private javax.swing.JTabbedPane tabGiros;
    private javax.swing.JPanel tabGirosCXC;
    private javax.swing.JPanel tabGirosCXP;
    private javax.swing.JTable tblGirosCXC;
    private javax.swing.JTable tblGirosCXP;
    private javax.swing.JFormattedTextField txtCambio;
    private javax.swing.JTextField txtCedula;
    private javax.swing.JTextField txtDocumento;
    private javax.swing.JTextField txtEfectivo;
    private javax.swing.JTextField txtModulo;
    private javax.swing.JFormattedTextField txtMonto;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JFormattedTextField txtPago;
    private javax.swing.JTextField txtRecnume;
    private javax.swing.JTextField txtReferencia;
    private javax.swing.JTextField txtTipoDoc;
    private javax.swing.JFormattedTextField txtTotal;
    // End of variables declaration//GEN-END:variables

    private void loadDep() {
        rsDepCXC = tran.getRsDep();
        
        if (tran.isError()){
            JOptionPane.showMessageDialog(null, 
                    tran.getMensaje_error(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if
        
        int rows = tran.getGiros(Catransa.DEPOSITOS);
        
        // Establecer el número de filas de la tabla
        Ut.resizeTable(tblGirosCXC, rows - tblGirosCXC.getModel().getRowCount(), "Filas");
        Ut.clearJTable(tblGirosCXC);
        
        // Cargar la tabla
        for (int i = 0; i < rows; i++){
            try {
                rsDepCXC.absolute(i+1);
                this.tblGirosCXC.setValueAt(rsDepCXC.getObject("facnume"), i, 0);
                this.tblGirosCXC.setValueAt(rsDepCXC.getObject("tipo"), i, 1);
                this.tblGirosCXC.setValueAt(rsDepCXC.getObject("clidesc"), i, 2);
                this.tblGirosCXC.setValueAt(Ut.fDecimal(rsDepCXC.getString("facmont"), formatoPrecio), i, 3);
                this.tblGirosCXC.setValueAt(Ut.dtoc(rsDepCXC.getDate("facfech")), i, 4);
                this.tblGirosCXC.setValueAt(rsDepCXC.getObject("clicode"), i, 5);
                this.tblGirosCXC.setValueAt(rsDepCXC.getObject("modulo"), i, 6);
            } catch (Exception ex) {
                Logger.getLogger(RegistroTransaccionesCaja.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, 
                        ex.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            } // end try-catch
        } // end for
    } // end loadDep
    
    private void loadRetCXC() {
        rsRetCXC = tran.getRsRetCXC();
        
        if (tran.isError()){
            JOptionPane.showMessageDialog(null, 
                    tran.getMensaje_error(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if
        
        int rows = tran.getGiros(Catransa.RETIROS_CXC);
        
        // Establecer el número de filas de la tabla
        Ut.resizeTable(tblGirosCXC, rows - tblGirosCXC.getModel().getRowCount(), "Filas");
        Ut.clearJTable(tblGirosCXC);
        
        // Cargar la tabla
        for (int i = 0; i < rows; i++){
            try {
                rsRetCXC.absolute(i+1);
                this.tblGirosCXC.setValueAt(rsRetCXC.getObject("facnume"), i, 0);
                this.tblGirosCXC.setValueAt(rsRetCXC.getObject("tipo"), i, 1);
                this.tblGirosCXC.setValueAt(rsRetCXC.getObject("clidesc"), i, 2);
                this.tblGirosCXC.setValueAt(
                        Ut.fDecimal(rsRetCXC.getString("facmont"), formatoPrecio), i, 3);
                this.tblGirosCXC.setValueAt(Ut.dtoc(rsRetCXC.getDate("facfech")), i, 4);
                this.tblGirosCXC.setValueAt(rsRetCXC.getObject("clicode"), i, 5);
                this.tblGirosCXC.setValueAt(rsRetCXC.getObject("modulo"), i, 6);
            } catch (Exception ex) {
                Logger.getLogger(RegistroTransaccionesCaja.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, 
                        ex.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            } // end try-catch
        } // end for
    } // end loadRetCXC
    
    
    private void loadRet() {
        rsRetCXP = tran.getRsRet();
        
        if (tran.isError()){
            JOptionPane.showMessageDialog(null, 
                    tran.getMensaje_error(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if
        
        int rows = tran.getGiros(Catransa.RETIROS);
        
        // Establecer el número de filas de la tabla
        Ut.resizeTable(tblGirosCXP, rows - tblGirosCXP.getModel().getRowCount(), "Filas");
        Ut.clearJTable(tblGirosCXP);
        
        // Cargar la tabla
        for (int i = 0; i < rows; i++){
            try {
                rsRetCXP.absolute(i+1);
                this.tblGirosCXP.setValueAt(rsRetCXP.getObject("facnume"), i, 0);
                this.tblGirosCXP.setValueAt(rsRetCXP.getObject("tipo"), i, 1);
                this.tblGirosCXP.setValueAt(rsRetCXP.getObject("prodesc"), i, 2);
                this.tblGirosCXP.setValueAt(
                        Ut.fDecimal(rsRetCXP.getString("facmont"), formatoPrecio), i, 3);
                this.tblGirosCXP.setValueAt(Ut.dtoc(rsRetCXP.getDate("facfech")), i, 4);
                this.tblGirosCXP.setValueAt(rsRetCXP.getObject("procode"), i, 5);
                this.tblGirosCXP.setValueAt(rsRetCXP.getObject("modulo"), i, 6);
            } catch (Exception ex) {
                Logger.getLogger(RegistroTransaccionesCaja.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, 
                        ex.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            } // end try-catch
        } // end for
    } // end loadRet

    private void clearObjects(){
        this.txtCedula.setText("");
        this.txtModulo.setText("");
        this.txtMonto.setText("0.00");
        this.txtNombre.setText("");
        this.txtDocumento.setText("");
        this.txtTipoDoc.setText("");
        this.lblRef.setVisible(false);
        this.txtReferencia.setText("");
        this.txtReferencia.setVisible(false);
        this.cboTipopago.setSelectedIndex(0);
        this.cboBanco.setSelectedIndex(0);
        this.cboBanco.setVisible(false);
        this.lblBanco.setVisible(false);
    } // end clearObjects
    
} // end class
