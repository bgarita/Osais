/* 
 * AplicacionNotaCXP.java 
 *
 * Created on 01/05/2012, 04:16:00 PM
 * 
 */

package interfase.transacciones;
import Exceptions.CurrencyExchangeException;
import Mail.Bitacora;
import accesoDatos.CMD;
import accesoDatos.UtilBD;
import interfase.otros.Navegador;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.*;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;
import logica.utilitarios.FormatoTabla;
import logica.utilitarios.SQLInjectionException;
import logica.utilitarios.Ut;
/**
 *
 * @author Bosco Garita
 */
@SuppressWarnings("serial")
public class AplicacionNotaCXP extends javax.swing.JFrame {
    private Connection conn;
    private Navegador  nav = null;
    private Statement  stat;
    private ResultSet  rs  = null;      // Uso general
    private ResultSet  rsMoneda = null; // Monedas
    private ResultSet  rsNotasD = null; // Notas de débito por aplicar
    private boolean    inicio = true;   // Se usa para evitar que corran agunos eventos
    private Calendar   fechaA = GregorianCalendar.getInstance();
    private boolean fechaCorrecta = false;
    private String notaRecibida = null;   // Parámetro recibido para aplicar
    private final Bitacora b = new Bitacora();

    // Constantes de la configuración
    private final String  codigoTC; // Código del tipo de cambio
    private final boolean DistPago = false; // Distribuir el pago automáticamente (podría cambiarse más adelante)

    FormatoTabla formato;
    private boolean hayTransaccion;


    /** Creates new form RegistroEntradas
     * @param c
     * @param notanume
     * @throws java.sql.SQLException */
    public AplicacionNotaCXP(Connection c, String notanume) throws SQLException {
        initComponents();
        // Defino el escuchador con una clase anónima para controlar la
        // salida de esta pantalla.  Esto funciona siempre que se haya
        // establecido el siguiente parámetro:
        // setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE)
        // Esta pantalla lo hace en initComponents().
        addWindowListener(new WindowAdapter(){
            @Override
            public void windowClosing(WindowEvent e){
                cmdSalirActionPerformed(null);
            } // end windowClosing
        } // end class
        ); // end Listener

        txtProdesc.setText(""); // Este campo será la referencia para continuar con el pago.
        txtProsald.setText("0.00");
        txtVencido.setText("0.00");

        formato = new FormatoTabla();
        formato.setStringColor(Color.BLUE);
        formato.setStringHorizontalAlignment(SwingConstants.RIGHT);
        formato.getTableCellRendererComponent(tblDetalle,
                tblDetalle.getValueAt(0, 3),
                tblDetalle.isCellSelected(0, 3),
                tblDetalle.isFocusOwner(), 0, 3);

        this.tblDetalle.setDefaultRenderer(String.class, formato);
        this.tblNotasD.setDefaultRenderer(String.class, formato);
        
        
        conn = c;
        nav  = new Navegador();
        nav.setConexion(conn);
        stat = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
                ResultSet.CONCUR_READ_ONLY);

        // Cargo el combo de las monedas
        cargarMonedas();

        // Cargo la tabla con todas las notas pendientes de aplicar
        cargarNotasD();

        DatFecha.setDate(fechaA.getTime());

        // Cargo los parámetros de configuración
        String sqlSent =
                "Select         " +
                "codigoTC       " + // Moneda predeterminada
                "From config";

        rs = stat.executeQuery(sqlSent);

        rs.first();

        // Elijo la moneda predeterminada
        codigoTC  = rs.getString("codigoTC").trim();
        
        String descrip = "";
        rsMoneda.beforeFirst();
        while (rsMoneda.next()){
            if (rsMoneda.getString("codigo").trim().equals(codigoTC)){
                descrip = rsMoneda.getString("descrip").trim();
                break;
            } // end if
        } // end while
        txtMoneda.setText(descrip);

        inicio = false;

        // Si se recibió un número de nota entonces se le adelanta
        // trabajo al usuario.
        if (notanume != null){
             notaRecibida = notanume;
             tblNotasDMouseClicked(null);
        } // end if
    } // constructor


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtProcode = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDetalle = new javax.swing.JTable();
        cmdSalir = new javax.swing.JButton();
        DatFecha = new com.toedter.calendar.JDateChooser();
        txtProdesc = new javax.swing.JFormattedTextField();
        cmdGuardar = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtNotanume = new javax.swing.JFormattedTextField();
        txtTipoca = new javax.swing.JFormattedTextField();
        txtMonto = new javax.swing.JFormattedTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtAplicado = new javax.swing.JFormattedTextField();
        txtRemanente = new javax.swing.JFormattedTextField();
        jLabel16 = new javax.swing.JLabel();
        txtAplicar = new javax.swing.JFormattedTextField();
        jLabel14 = new javax.swing.JLabel();
        txtProsald = new javax.swing.JFormattedTextField();
        jLabel15 = new javax.swing.JLabel();
        txtVencido = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblNotasD = new javax.swing.JTable();
        txtMoneda = new javax.swing.JFormattedTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuArchivo = new javax.swing.JMenu();
        mnuGuardar = new javax.swing.JMenuItem();
        mnuSalir = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Aplicar notas de débito (CXP)");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Proveedor");

        txtProcode.setEditable(false);
        txtProcode.setForeground(new java.awt.Color(0, 51, 255));
        txtProcode.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txtProcode.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtProcode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtProcodeFocusGained(evt);
            }
        });
        txtProcode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProcodeActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Monto");

        tblDetalle.setFont(tblDetalle.getFont());
        tblDetalle.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Factura / NC", "Fecha", "Moneda", "Saldo", "Monto Aplicar", "TC", "Tipo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Double.class, java.lang.Float.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDetalle.setToolTipText("Facturas y NDs para distribuir la nota");
        tblDetalle.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblDetalle.setColumnSelectionAllowed(true);
        tblDetalle.setPreferredSize(new java.awt.Dimension(790, 1280));
        tblDetalle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDetalleMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblDetalle);
        tblDetalle.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (tblDetalle.getColumnModel().getColumnCount() > 0) {
            tblDetalle.getColumnModel().getColumn(0).setMinWidth(35);
            tblDetalle.getColumnModel().getColumn(0).setPreferredWidth(85);
            tblDetalle.getColumnModel().getColumn(0).setMaxWidth(110);
            tblDetalle.getColumnModel().getColumn(1).setMinWidth(35);
            tblDetalle.getColumnModel().getColumn(1).setPreferredWidth(85);
            tblDetalle.getColumnModel().getColumn(1).setMaxWidth(110);
            tblDetalle.getColumnModel().getColumn(3).setMinWidth(35);
            tblDetalle.getColumnModel().getColumn(3).setPreferredWidth(85);
            tblDetalle.getColumnModel().getColumn(3).setMaxWidth(110);
            tblDetalle.getColumnModel().getColumn(4).setMinWidth(40);
            tblDetalle.getColumnModel().getColumn(4).setPreferredWidth(95);
            tblDetalle.getColumnModel().getColumn(4).setMaxWidth(150);
            tblDetalle.getColumnModel().getColumn(5).setMinWidth(25);
            tblDetalle.getColumnModel().getColumn(5).setPreferredWidth(70);
            tblDetalle.getColumnModel().getColumn(5).setMaxWidth(100);
            tblDetalle.getColumnModel().getColumn(6).setMinWidth(20);
            tblDetalle.getColumnModel().getColumn(6).setPreferredWidth(40);
            tblDetalle.getColumnModel().getColumn(6).setMaxWidth(50);
        }

        cmdSalir.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmdSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZCLOSE.png"))); // NOI18N
        cmdSalir.setToolTipText("Cerrar");
        cmdSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSalirActionPerformed(evt);
            }
        });

        DatFecha.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                DatFechaFocusGained(evt);
            }
        });
        DatFecha.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                DatFechaPropertyChange(evt);
            }
        });

        txtProdesc.setEditable(false);
        txtProdesc.setForeground(java.awt.Color.blue);
        try {
            txtProdesc.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("**************************************************")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtProdesc.setToolTipText("");
        txtProdesc.setFocusable(false);

        cmdGuardar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmdGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZSAVE.png"))); // NOI18N
        cmdGuardar.setToolTipText("Aplicar nota de débido");
        cmdGuardar.setEnabled(false);
        cmdGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGuardarActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Nota");

        txtNotanume.setEditable(false);
        txtNotanume.setColumns(6);
        txtNotanume.setForeground(new java.awt.Color(255, 0, 51));
        txtNotanume.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0"))));
        txtNotanume.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        txtTipoca.setEditable(false);
        txtTipoca.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTipoca.setToolTipText("Tipo de cambio");
        txtTipoca.setFocusable(false);

        txtMonto.setEditable(false);
        txtMonto.setColumns(10);
        txtMonto.setForeground(new java.awt.Color(204, 0, 204));
        txtMonto.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtMonto.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtMonto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtMontoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMontoFocusLost(evt);
            }
        });
        txtMonto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMontoActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("Fecha");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setText("Moneda");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Montos en moneda local", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 2, 11), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 0, 255));
        jLabel13.setText("Remanente");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 153, 51));
        jLabel12.setText("Aplicado");

        txtAplicado.setEditable(false);
        txtAplicado.setColumns(10);
        txtAplicado.setForeground(new java.awt.Color(51, 51, 255));
        txtAplicado.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtAplicado.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtAplicado.setToolTipText("Expresado en moneda local");

        txtRemanente.setEditable(false);
        txtRemanente.setColumns(10);
        txtRemanente.setForeground(new java.awt.Color(0, 51, 255));
        txtRemanente.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtRemanente.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtRemanente.setToolTipText("Expresado en moneda local");

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 153, 0));
        jLabel16.setText("Aplicar");

        txtAplicar.setEditable(false);
        txtAplicar.setColumns(10);
        txtAplicar.setForeground(new java.awt.Color(51, 51, 255));
        txtAplicar.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtAplicar.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtAplicar.setToolTipText("Expresado en moneda local");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtAplicar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 94, Short.MAX_VALUE)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtAplicado, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtRemanente, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtAplicado, txtAplicar, txtRemanente});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                .addComponent(txtRemanente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel13)
                .addComponent(txtAplicado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel12)
                .addComponent(txtAplicar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel16))
        );

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel14.setText("Saldo");

        txtProsald.setEditable(false);
        txtProsald.setColumns(10);
        txtProsald.setForeground(new java.awt.Color(51, 51, 255));
        txtProsald.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtProsald.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtProsald.setToolTipText("Saldo en facturas expresado en moneda local");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel15.setText("Vencido");

        txtVencido.setEditable(false);
        txtVencido.setForeground(new java.awt.Color(204, 0, 0));
        txtVencido.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtVencido.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtVencido.setToolTipText("Expresado en moneda local");

        tblNotasD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Nota", "Proveedor", "Fecha", "Monto", "Moneda", "Código P", "TC"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblNotasD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblNotasDMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblNotasD);
        if (tblNotasD.getColumnModel().getColumnCount() > 0) {
            tblNotasD.getColumnModel().getColumn(0).setMinWidth(35);
            tblNotasD.getColumnModel().getColumn(0).setPreferredWidth(80);
            tblNotasD.getColumnModel().getColumn(0).setMaxWidth(110);
            tblNotasD.getColumnModel().getColumn(1).setMinWidth(70);
            tblNotasD.getColumnModel().getColumn(1).setPreferredWidth(200);
            tblNotasD.getColumnModel().getColumn(1).setMaxWidth(300);
            tblNotasD.getColumnModel().getColumn(2).setMinWidth(35);
            tblNotasD.getColumnModel().getColumn(2).setPreferredWidth(80);
            tblNotasD.getColumnModel().getColumn(2).setMaxWidth(95);
            tblNotasD.getColumnModel().getColumn(3).setMinWidth(35);
            tblNotasD.getColumnModel().getColumn(3).setPreferredWidth(80);
            tblNotasD.getColumnModel().getColumn(3).setMaxWidth(110);
            tblNotasD.getColumnModel().getColumn(4).setMinWidth(90);
            tblNotasD.getColumnModel().getColumn(4).setPreferredWidth(140);
            tblNotasD.getColumnModel().getColumn(4).setMaxWidth(190);
            tblNotasD.getColumnModel().getColumn(5).setMinWidth(35);
            tblNotasD.getColumnModel().getColumn(5).setPreferredWidth(65);
            tblNotasD.getColumnModel().getColumn(5).setMaxWidth(90);
            tblNotasD.getColumnModel().getColumn(6).setMinWidth(15);
            tblNotasD.getColumnModel().getColumn(6).setPreferredWidth(30);
            tblNotasD.getColumnModel().getColumn(6).setMaxWidth(50);
        }

        txtMoneda.setEditable(false);
        txtMoneda.setForeground(java.awt.Color.blue);
        try {
            txtMoneda.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("**************************************************")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtMoneda.setToolTipText("");
        txtMoneda.setFocusable(false);

        mnuArchivo.setText("Archivo");

        mnuGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        mnuGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/disk.png"))); // NOI18N
        mnuGuardar.setText("Guardar");
        mnuGuardar.setEnabled(false);
        mnuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuGuardarActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuGuardar);

        mnuSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.CTRL_MASK));
        mnuSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/control-power.png"))); // NOI18N
        mnuSalir.setText("Salir");
        mnuSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSalirActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuSalir);

        jMenuBar1.add(mnuArchivo);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(29, 29, 29))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(301, 301, 301)
                        .addComponent(cmdGuardar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel11))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtMoneda, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(33, 33, 33)
                                        .addComponent(txtTipoca, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtProcode))
                                    .addComponent(txtProdesc, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtNotanume)
                                    .addComponent(DatFecha, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtMonto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel14)
                                .addGap(4, 4, 4)
                                .addComponent(txtProsald, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel15)
                                .addGap(4, 4, 4)
                                .addComponent(txtVencido, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtMonto, txtProsald, txtVencido});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cmdGuardar, cmdSalir});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel11)
                    .addComponent(txtMoneda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTipoca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(txtProcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtNotanume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txtProdesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(DatFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txtVencido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(txtProsald, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(txtMonto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(cmdGuardar)
                    .addComponent(cmdSalir))
                .addGap(3, 3, 3))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSalirActionPerformed
        // Verifico si hay datos sin guardar
        // Si hay datos advierto al usuario
        if (Ut.countNotNull(tblDetalle, 0) > 0){
            if(JOptionPane.showConfirmDialog(null,
                    "No ha guardado.\n" +
                    "Si continúa perderá los datos.\n" +
                    "\n¿Realmente desea salir?")
                    != JOptionPane.YES_OPTION) {
                return;
            } // end if
        } // end if

        dispose();
}//GEN-LAST:event_cmdSalirActionPerformed

    private void txtProcodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProcodeActionPerformed
        // Limpio la tabla para evitar que quede alguna línea del
        // despliegue anterior (si lo hubo).
        for (int i = 0; i < tblDetalle.getRowCount(); i++){
            for (int j = 0; j < tblDetalle.getColumnModel().getColumnCount(); j++){
                tblDetalle.setValueAt(null, i, j);
            } // end for
        } // end for

        // Este método incluye validaciones.
        datosdelProveedor();
        
        boolean existe = !txtProdesc.getText().trim().equals("");
        
        // Si el proveedor no existe o no debe nada...
        if (!existe || !txtMonto.isEnabled()) {
            return;
        } // end if
        
        // Cargo las facturas con saldo...
        String procode = txtProcode.getText().trim();
        String sqlSent = "Call ConsultarFacturasProveedor(?,?)";
        CallableStatement cs;
        ResultSet rsFacturas;
        try {
            cs  = conn.prepareCall(sqlSent);
            cs.setString(1, procode);
            cs.setInt(2, 1); // indica que son facturas y NC con saldo.
            rsFacturas = cs.executeQuery();

            // Establecer las filas de la tabla y cargar los datos
            rsFacturas.last();
            int dataRows = rsFacturas.getRow(), row = 0;
            // Si el número de facturas con saldo es mayor al número
            // de filas que tiene la tabla entonces incremento la tabla.

            // Obtener el modelo de la tabla y establecer el número exacto
            DefaultTableModel dtm = (DefaultTableModel) tblDetalle.getModel();
            if(dtm.getRowCount() < dataRows){
                dtm.setRowCount(dataRows);
                tblDetalle.setModel(dtm);
            }// end if

            // Cargar los datos en la tabla...
            String saldo;
            rsFacturas.beforeFirst();

            while (rsFacturas.next()){
                tblDetalle.setValueAt(rsFacturas.getObject("factura"), row, 0);
                tblDetalle.setValueAt(rsFacturas.getObject("fecha"  ), row, 1);
                tblDetalle.setValueAt(rsFacturas.getObject("Moneda" ), row, 2);
                saldo = rsFacturas.getString("saldo");
                saldo = Ut.setDecimalFormat(saldo, "#,##0.0000");
                tblDetalle.setValueAt(saldo, row, 3);
                tblDetalle.setValueAt(rsFacturas.getFloat("tipoca"), row, 5);
                tblDetalle.setValueAt(rsFacturas.getString("TipoDoc"), row, 6);
                row++;
            } // end while

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
            return;
        } // end try-catch

        txtProcode.transferFocus();
        
        if (!txtNotanume.isEditable()) {
            txtMonto.requestFocusInWindow();
        } // end if
    }//GEN-LAST:event_txtProcodeActionPerformed

    private void txtProcodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtProcodeFocusGained
        txtProcode.selectAll();
    }//GEN-LAST:event_txtProcodeFocusGained

    private void cmdGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGuardarActionPerformed
        // Este método no valida el estado del remanente porque
        // hay otra rutina que lo hace y habilita o deshabilita el botón
        // guardar, de manera que si este método se ejecuta es porque el
        // remanente es cero.

        // Si el formulario apenas está cargando...
        if (inicio) {
            return;
        } // end if

        // Verifico que haya al menos una línea de detalle
        if (Ut.countNotNull(tblDetalle, 1) == 0){
            JOptionPane.showMessageDialog(null,
                    "La nota aún no se ha distribuido.",
                    "Información",
                    JOptionPane.INFORMATION_MESSAGE);
            return;
        } // end if

        this.DatFechaPropertyChange(null);
        
        // Verifico que la fecha esté correcta
        if (!fechaCorrecta){
            JOptionPane.showMessageDialog(null,
                    "Verifique la fecha.",
                    "Advertencia",
                    JOptionPane.WARNING_MESSAGE);
            this.DatFecha.requestFocusInWindow();
            return;
        } // end if
        
        // Validar el TC
        Float tc = Float.valueOf(txtTipoca.getText());

        if (tc <= 0){
            JOptionPane.showMessageDialog(null,
                    "No hay tipo de cambio registrado para esta fecha.",
                    "Validar tipo de cambio..",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if

        String errorMessage = "";
        //String sqlUpdate = "Start transaction";
        String sqlSent;
        boolean todoCorrecto = true;

        String notanume = txtNotanume.getText().trim();
        double monto;
        
        try {
            monto = Double.parseDouble(
                    Ut.quitarFormato(txtMonto.getText().trim()));

            short row = 0;  // Se usa para recorrer el JTable.

            // Variables para el detalle de la ND
            String factura, tipo;
            double saldo; // Lleva el saldo de la factura antes del pago.
            Timestamp fecha;
            fecha = new Timestamp(DatFecha.getCalendar().getTimeInMillis());

            PreparedStatement ps;
        
            //stat.executeUpdate(sqlUpdate);
            //his.hayTransaccion = true;
            hayTransaccion = CMD.transaction(conn, CMD.START_TRANSACTION);
            
            // Realizo una verificación para garantizar que la nota que
            // se va a aplicar todavía está vigente.
            sqlSent = "Select ND_Vigente(?)";
            ps = conn.prepareStatement(sqlSent);
            ps.setString(1, notanume);
            rs = ps.executeQuery();
            if (rs == null || !rs.first() || !rs.getBoolean(1)){
                errorMessage =
                        "La nota # " + notanume + " ya no está vigente.";
                todoCorrecto = false;
            } // end if

            // Inicio el ciclo de aplicación de la nota

            // Agrego el registro en el detalle de notas aplicadas

            // Este SP crea el detalle de aplicación de la nota en la
            // tabla cxpnotasd, afecta el saldo de las facturas y/o notas
            // de crébito relacionadas.
            // No afecta el saldo del cliente porque éste fue afectado
            // en el momento de crear la ND. 
            sqlSent = "Call InsertarDetalleNDCXP(?,?,?,?,?,?,?)";
            ps = conn.prepareStatement(sqlSent);

            while (todoCorrecto && row < tblDetalle.getRowCount()){
                // Si no se ha establecido un valor en la celda...
                if (tblDetalle.getValueAt(row, 0) == null ||
                        tblDetalle.getValueAt(row, 4) == null){
                    row++;
                    continue;
                } // end if

                // .. o si el valor de la celda es cero.
                if (Double.parseDouble(
                        tblDetalle.getValueAt(row, 4).toString()) == 0){
                    row++;
                    continue;
                } // end if

                factura = tblDetalle.getValueAt(row, 0).toString();
                tipo    = tblDetalle.getValueAt(row, 6).toString();

                saldo =
                        Double.parseDouble(Ut.quitarFormato(
                        tblDetalle.getValueAt(row, 3).toString()));
                monto = Double.parseDouble(Ut.quitarFormato(
                        tblDetalle.getValueAt(row, 4).toString()));

                ps.setString(1, notanume);
                ps.setString(2, factura);
                ps.setString(3, tipo);
                ps.setDouble(4, monto);
                ps.setDouble(5, saldo);
                ps.setTimestamp(6, fecha);
                ps.setString(7, txtProcode.getText().trim());

                // Liberar recursos
                if (rs != null){
                    rs.close();
                } // end if
                
                // Uso executeQuery porque debe retornar un ResultSet
                rs = ps.executeQuery();

                // No se hace la verificación xq siempre retorna 1 registro.
                rs.first();

                // El SP devuelve true si ocurriera algún error a la hora de 
                // insertar el detalle.
                if (rs.getBoolean(1)){
                    errorMessage = rs.getString(2);
                    break;
                } // end if
                row++;
            } // end while

            // Cancelar la nota de débito.  Una nota no se aplica
            // parcialmente.
            if (errorMessage.equals("")){
                String sqlUpdateNDB = 
                        "Update cxpfacturas Set    " +
                        "   saldo = 0, " +
                        "   abono_acum = total_fac," +
                        "   fec_ult_ab = Date(?)   " +
                        "Where factura = ? " +
                        "and tipo = 'NDB' and procode = ?";
                PreparedStatement psCxpfacturas = conn.prepareStatement(sqlUpdateNDB);
                psCxpfacturas.setTimestamp(1, fecha);
                psCxpfacturas.setString(2, notanume);
                psCxpfacturas.setString(3, txtProcode.getText().trim());
                int affected = psCxpfacturas.executeUpdate();
                //sqlUpdate =
                //        "Update cxpfacturas Set " +
                //        "saldo = 0 " +
                //        "Where factura = " + notanume +
                //        " and tipo = 'NDB'";
                // Por alguna razón aquí no me está funcionando el PreparedStatement 22/12/2011
                // Actualización 05/05/2012:
                // Una posible hipótesis sería esta: mysql no reporta registros
                // actualizados cuando los valores a setear tienen el mismo valor
                // que se intenta establecer y cuando la ejecución llega aquí
                // ya el SP que corre en el while anterior a restado el monto y
                // hay un 99% de probabilidades de que lo haya dejado en cero.
                //int affected = stat.executeUpdate(sqlUpdate);
                if (affected != 1){
                    errorMessage =
                            "Se produjo un error al intentar aplicar la NC # " +
                            notanume + "." +
                            "\n" +
                            "Se espera afectar 1 registro y se afectó " +
                            affected;
                } // end if
            } // end if

            // Confirmo o desestimo los updates...
            if (errorMessage.equals("")){
                //sqlUpdate = "Commit";
                CMD.transaction(conn, CMD.COMMIT);
            } else {
                //sqlUpdate = "RollBack";
                CMD.transaction(conn, CMD.ROLLBACK);
            } // end if

            
            this.hayTransaccion = false;

            if (errorMessage.equals("")){
                JOptionPane.showMessageDialog(null,
                        "Nota aplicada satisfactoriamente",
                        "Mensaje",
                        JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null,
                        errorMessage,
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            } // end if
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
            if (this.hayTransaccion){
               this.hayTransaccion = false;
               //UtilBD.SQLTransaction(conn, UtilBD.ROLLBACK);
               try {
                    CMD.transaction(conn, CMD.ROLLBACK);
                } catch (SQLException ex1){
                    JOptionPane.showMessageDialog(null, 
                            ex1.getMessage(),
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                    b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
                }
            } // end if
            return;
        } // catch

        // Por ahora no se imprime la ND pero más adelante se puede
        // hacer una copia del form ImprimirRecibosCXC y adaptarlo
        // a las características de de una ND, que son muy similares
        // a las de un recibo.

        /*
        // Impresión de la nota
        new ImprimirRecibosCXC(
                new java.awt.Frame(),
                true,       // Modal
                conn,       // Conexión
                notanume)    // Número de recibo
                .setVisible(true);

        */

        // Limpio las tablas para evitar que quede alguna línea
        // del despliegue anterior.
        Ut.clearJTable(tblNotasD);
        Ut.clearJTable(tblDetalle);

        // Cargo de nuevo la tabla de NDs
        this.cargarNotasD();

        txtProcode.setText("");
        txtProdesc.setText("");
        txtMonto.setText("0.00");
        txtProsald.setText("0.00");
        txtVencido.setText("0.00");
        txtAplicar.setText("0.00");
        txtAplicado.setText("0.00");

        cmdGuardar.setEnabled(false);
        mnuGuardar.setEnabled(false);
        // Cuando se está aplicando una nota que viene por parámetro
        // no permito que el usuario aplique más notas.
        if (notaRecibida != null) {
            this.cmdSalirActionPerformed(null);
        } // end if
    }//GEN-LAST:event_cmdGuardarActionPerformed

    /**
     * Trae los datos de la nota de crédito para su distribución
     * en pantalla.
     * @param evt
     */
    private void DatFechaPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_DatFechaPropertyChange
        if (this.inicio){ 
            return;
        }
            
        String facfech = Ut.fechaSQL(DatFecha.getDate());

        fechaCorrecta = true;
        try {
            if (!UtilBD.isValidDate(conn,facfech)){
                JOptionPane.showMessageDialog(null,
                        "No puede utilizar esta fecha.  " +
                        "\nCorresponde a un período ya cerrado.",
                        "Validar fecha..",
                        JOptionPane.ERROR_MESSAGE);
                cmdGuardar.setEnabled(false);
                mnuGuardar.setEnabled(false);
                fechaCorrecta = false;
                DatFecha.setDate(fechaA.getTime());
                return;
            } // end if
        } catch (SQLException ex) {
            Logger.getLogger(AplicacionNotaCXP.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(), 
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
            return;
        } // end try-catch

        fechaA.setTime(DatFecha.getDate());
    }//GEN-LAST:event_DatFechaPropertyChange

    private void DatFechaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_DatFechaFocusGained
        // Uso esta variable para reestablecer el valor después de la
        // validación en caso de que la fecha no fuera aceptada.
        fechaA.setTime(DatFecha.getDate());
    }//GEN-LAST:event_DatFechaFocusGained

    private void txtMontoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMontoFocusGained
        txtMonto.selectAll();
    }//GEN-LAST:event_txtMontoFocusGained

    private void txtMontoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMontoFocusLost
        try {
            if (txtMonto.getText().trim().equals("") ||
                    Double.parseDouble(Ut.quitarFormato(
                    txtMonto.getText())) == 0.00){
                return;
            } // end if
            
            boolean continuar = true;
            Double aplicar =
                    Double.parseDouble(
                    Ut.quitarFormato(txtMonto.getText()));
            Double prosald =
                    Double.parseDouble(
                    Ut.quitarFormato(txtProsald.getText()));

            // Convertir el montoAp digitado a moneda local.
            // Este montoAp será utilizado para las validaciones del montoAp
            // aplicado y el remanente.
            Double tipoca =
                    Double.parseDouble(
                    Ut.quitarFormato(txtTipoca.getText()));
            aplicar *= tipoca;

            if (aplicar > prosald){
                JOptionPane.showMessageDialog(null,
                        "El monto es mayor al saldo del proveedor" +
                        "[ " + prosald + " ]",
                        "Mensaje", 
                        JOptionPane.ERROR_MESSAGE);
                continuar = false;
            } // end if

            if (aplicar <= 0.00){
                JOptionPane.showMessageDialog(null,
                        "Debe digitar un monto mayor que cero.",
                        "Mensaje", 
                        JOptionPane.ERROR_MESSAGE);
                continuar = false;
            } // end if

            txtAplicar.setText(Ut.setDecimalFormat(aplicar.toString(), "#,##0.00#"));
            txtAplicado.setText("0.00");
            txtRemanente.setText(txtAplicar.getText());
            
            // Tomar acciones para no permitir el ingreso al grid
            // en caso de entrar en la validación anterior.
            tblDetalle.setVisible(continuar);

            // Bosco modificado 22/12/2011.
            // Distribuyo el monto a aplicar
            //distribuir(aplicar);
            if (this.DistPago){
                distribuir(aplicar);
            } // end if
            // Fin Bosco modificado 22/12/2011.

            Double remanente = Double.parseDouble(
                    Ut.quitarFormato(txtRemanente.getText()));
            cmdGuardar.setEnabled(remanente == 0.00);
            mnuGuardar.setEnabled(remanente == 0.00);
            // La búsqueda está sujeta al estado del txtField txtProcode
        } catch (Exception ex) {
            Logger.getLogger(AplicacionNotaCXP.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                        ex.getMessage(),
                        "Mensaje", 
                        JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        } // end try-catch
    }//GEN-LAST:event_txtMontoFocusLost

    private void txtMontoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMontoActionPerformed
        txtMonto.transferFocus();
    }//GEN-LAST:event_txtMontoActionPerformed

    private void tblDetalleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDetalleMouseClicked
        int row = tblDetalle.getSelectedRow();
        if (row == -1) {
            return;
        } // end if
        
        String monto;
        
        try {
            Double remanente =
                    Double.valueOf(
                    Ut.quitarFormato(
                    this.txtRemanente.getText().trim()));
            Double saldo =
                    Double.valueOf(
                    Ut.quitarFormato(
                    tblDetalle.getValueAt(row, 3).toString()));
            
            if (saldo > remanente){
                saldo = remanente;
            } // end if
            
        
            monto = JOptionPane.showInputDialog("Monto a aplicar", saldo);

        
            if (Double.parseDouble(monto) > saldo){
                JOptionPane.showMessageDialog(null,
                        "No puede aplicar un monto mayor al saldo de la factura.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            } // end if
        } catch (Exception ex){
            JOptionPane.showMessageDialog(null, 
                    "Debe digitar un número válido " + ex.getMessage(),
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
            return;
        }
        
        tblDetalle.setValueAt(Double.parseDouble(monto), row, 4);

        // Este método recalcula y decide si se puede guardar o no.
        // También emite el respectivo mensaje cuando el remanente queda negativo.
        cmdGuardar.setEnabled(recalcular());
        mnuGuardar.setEnabled(cmdGuardar.isEnabled());
    }//GEN-LAST:event_tblDetalleMouseClicked

    private void mnuSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSalirActionPerformed
        cmdSalirActionPerformed(evt);
    }//GEN-LAST:event_mnuSalirActionPerformed

    private void mnuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuGuardarActionPerformed
        if (cmdGuardar.isEnabled()) {
            cmdGuardarActionPerformed(evt);
        } // end if
    }//GEN-LAST:event_mnuGuardarActionPerformed

    private void tblNotasDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblNotasDMouseClicked
        int row = -1;
        // Cuando evt es null es xq se hizo la llamada automáticamente
        // y no por medio del Click
        if (evt == null){
            Object valor = notaRecibida;
            row = Ut.seek(tblNotasD, valor, 0);
        }else{
            row = tblNotasD.getSelectedRow();
        }

        if (row == -1) {
            return;
        } // end if

        if (tblNotasD.getValueAt(row, 0) == null) {
            return;
        } // end if
        
        String moneda   = tblNotasD.getValueAt(row, 4).toString();
        String notanume = tblNotasD.getValueAt(row, 0).toString();
        String procode  = tblNotasD.getValueAt(row, 5).toString();
        String monto    = tblNotasD.getValueAt(row, 3).toString();

        txtMoneda.setText(moneda);
        txtProcode.setText(procode);
        txtNotanume.setText(notanume);
        txtTipoca.setText(
                tblNotasD.getValueAt(row, 6).toString());
        txtMonto.setText(monto);

        // Validar y cargar los datos del proveedor (también carga las fact)
        txtProcodeActionPerformed(null);

        // Validaciones de monto y distribución automática
        txtMontoFocusLost(null);
    }//GEN-LAST:event_tblNotasDMouseClicked

    /**
     * @param c
     * @param notanume
    */
    public static void main(final Connection c, final String notanume) {
        try {
            // Bosco agregado 18/07/2011
            // Integración del segundo nivel de seguridad.
            if (!UtilBD.tienePermiso(c,"AplicacionNotaCXP")){
                JOptionPane.showMessageDialog(null,
                        "Usted no está autorizado para ejecutar este proceso",
                        "Error - Permisos",
                        JOptionPane.ERROR_MESSAGE);
                return;
            } // Fin Bosco agregado 18/07/2011
            // Fin Bosco agregado 18/07/2011
        } catch (Exception ex) {
            Logger.getLogger(AplicacionNotaCXP.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    // Revisar el TC del dólar
                    Float tcd = UtilBD.tipoCambioDolar(c);

                    // Si no se ha establecido la configuración no continúo
                    Statement s = c.createStatement();
                    ResultSet r = s.executeQuery("Select facnume from config");
                    if (r == null){
                        JOptionPane.showMessageDialog(null,
                                "Todavía no se ha establecido la " +
                                "configuración del sistema.",
                                "Configuración",
                                JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    new AplicacionNotaCXP(c,notanume).setVisible(true);
                } catch (CurrencyExchangeException | SQLException | NumberFormatException | HeadlessException ex) {
                    JOptionPane.showMessageDialog(null,
                            ex.getMessage(),
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser DatFecha;
    private javax.swing.JButton cmdGuardar;
    private javax.swing.JButton cmdSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenu mnuArchivo;
    private javax.swing.JMenuItem mnuGuardar;
    private javax.swing.JMenuItem mnuSalir;
    private javax.swing.JTable tblDetalle;
    private javax.swing.JTable tblNotasD;
    private javax.swing.JFormattedTextField txtAplicado;
    private javax.swing.JFormattedTextField txtAplicar;
    private javax.swing.JFormattedTextField txtMoneda;
    private javax.swing.JFormattedTextField txtMonto;
    private javax.swing.JFormattedTextField txtNotanume;
    private javax.swing.JFormattedTextField txtProcode;
    private javax.swing.JFormattedTextField txtProdesc;
    private javax.swing.JFormattedTextField txtProsald;
    private javax.swing.JFormattedTextField txtRemanente;
    private javax.swing.JFormattedTextField txtTipoca;
    private javax.swing.JFormattedTextField txtVencido;
    // End of variables declaration//GEN-END:variables

    
    private void datosdelProveedor() {
        String procode = txtProcode.getText().trim();
        // Recalcular el saldo del proveedor.
        // Este proceso se hace aquí para garantizar que el saldo del proveedor
        // está correcto y evitar que se ingrese un monto mayor al saldo.
        String sqlUpdate = "Call RecalcularSaldoProveedores(?)";

        String sqlSelect = "Call ConsultarDatosProveedor(?)";
        ResultSet rsProveedor = null;
        PreparedStatement psUpdate, psSelect;

        txtProdesc.setText(""); // Este campo será la referencia para continuar con el pago.
        txtProsald.setText("0.00");
        txtVencido.setText("0.00");
        txtMonto.setEnabled(true);

        try {
            psUpdate = conn.prepareStatement(sqlUpdate);
            psUpdate.setString(1, procode);
            psUpdate.executeUpdate();
            
            psSelect = conn.prepareStatement(sqlSelect);
            psSelect.setString(1, procode);
            rsProveedor = psSelect.executeQuery();
            rsProveedor.first();
            txtProdesc.setText(rsProveedor.getString("prodesc"));
           
            // Para aplicar notas de débito lo que se necesita es el saldo de
            // las facturas y NC, no el del proveedor; pueden ser diferentes.
            //txtProsald.setText(rsProveedor.getString("prosald"));
            txtProsald.setText(rsProveedor.getString("SaldoF"));
            
            txtVencido.setText(rsProveedor.getString("Vencido"));

            // Formateo los datos numéricos
            txtProsald.setText(Ut.setDecimalFormat(txtProsald.getText().trim(), "#,##0.0000"));
            txtVencido.setText(Ut.setDecimalFormat(txtVencido.getText().trim(), "#,##0.0000"));

           
            // Si no hay facturas con saldo entonces no permito el pago.
            txtMonto.setEnabled(rsProveedor.getFloat("saldoF") > 0);

            if (!txtMonto.isEnabled()){
                JOptionPane.showMessageDialog(null,
                        "Este cliente no debe nada.",
                        "Mensaje",
                        JOptionPane.INFORMATION_MESSAGE);
            } // end if
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        }

    } // end datosdelProveedor


    private void cargarMonedas() {
        try {
            rsMoneda = nav.cargarRegistro(Navegador.TODOS, "", "monedas", "codigo");
            if (rsMoneda == null) {
                return;
            } // end if
            rsMoneda.beforeFirst();
        } catch (SQLException | SQLInjectionException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(), 
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        }
    } // end cargarMonedas

    private void distribuir(Double monto){
        try {
            if (monto == null || monto == 0) {
                return;
            } // end if

            Double facsald; 
            Float tipoca;
            Double aplicado  = 0.00;
            Double remanente =
                    Double.parseDouble(
                    Ut.quitarFormato(txtRemanente.getText()));
            int row = 0;

            while (row < tblDetalle.getRowCount() && remanente > 0){
                if (tblDetalle.getValueAt(row, 3) == null){
                    row++;
                    continue;
                } // end if

                facsald = 
                        Double.parseDouble(
                        Ut.quitarFormato(
                        tblDetalle.getValueAt(row, 3).toString()));
                tipoca  = Float.parseFloat(tblDetalle.getValueAt(row, 5).toString());

                // Convertir a moneda local (con el tc del día de la compra)
                facsald *= tipoca;

                if (facsald > remanente){
                    facsald = remanente;
                } // end while

                aplicado  += facsald;
                remanente -= facsald;

                // Convertir nuevamente a la moneda de la factura
                facsald /= tipoca;
                tblDetalle.setValueAt(facsald, row, 4);
                row++;
            } // end while
            
            // Si todavía row no es la última fila entonces continúo
            // poniendo en cero el resto de las filas.
            while (row < tblDetalle.getRowCount()){
                tblDetalle.setValueAt(0.00, row, 4);
                row++;
            } // end while

            txtAplicado.setText(Ut.setDecimalFormat(aplicado.toString(),"#,##0.00"));
            txtRemanente.setText(Ut.setDecimalFormat(remanente.toString(),"#,##0.00"));
        } // end distribuir
        catch (Exception ex) {
            Logger.getLogger(AplicacionNotaCXP.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(), 
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        } // end try-catch
    } // end distribuir

    private boolean recalcular(){
        boolean guardar = false;
        Float tipocaReg;
        Double aplicado = 0.00;
        Double aplicar; // Monto de la nota
        Double montoAp; // Monto aplicado

        int row = 0;

        while (row < tblDetalle.getRowCount()){
            if (tblDetalle.getValueAt(row, 4) == null ||
                    tblDetalle.getValueAt(row, 5) == null){
                 row++;
                continue;
            } // end if
            try {
                tipocaReg = Float.parseFloat(
                        tblDetalle.getValueAt(row, 5).toString());
                montoAp   = Double.parseDouble(
                        tblDetalle.getValueAt(row, 4).toString());
            } catch (NumberFormatException ex){
                b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
                row++;
                continue;
            }
            montoAp  *= tipocaReg;
            aplicado += montoAp;
            row++;
        } // end while

        try {
            aplicar = Double.parseDouble(
                    Ut.quitarFormato(txtAplicar.getText()));
            txtAplicado.setText(
                    Ut.setDecimalFormat(aplicado.toString(),"#,##0.00"));
            txtRemanente.setText(
                    Ut.setDecimalFormat(
                    String.valueOf(aplicar - aplicado),"#,##0.00"));

            guardar = (aplicar - aplicado == 0);
        } catch (Exception ex) {
            Logger.getLogger(AplicacionNotaCXP.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(), 
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
            return guardar;
        } // end try-catch

        if (!guardar){
            JOptionPane.showMessageDialog(null,
                    "La distribución de la nota está desbalanceada." +
                    "\nObserve el remanente.",
                    "Advertencia",
                    JOptionPane.WARNING_MESSAGE);
        } // end if
        
        return guardar;
    } // end recalcular

    private void cargarNotasD(){
        try {
            // Cargo la tabla con todas las notas pendientes de aplicar
            rsNotasD = stat.executeQuery("Call consultarNotasDCXP(null)");
            if (rsNotasD == null || !rsNotasD.first()){
                JOptionPane.showMessageDialog(null,
                        "No hay notas de débito pendientes.",
                        "Mensaje",
                        JOptionPane.INFORMATION_MESSAGE);
                return;
            } // end if
            
            rsNotasD.last();
            int dataRows = rsNotasD.getRow(), row = 0;
            // Si el número de Notas de Débito es mayor al número
            // de filas que tiene la tabla entonces incremento la tabla.

            // Obtener el modelo de la tabla y establecer el número exacto
            DefaultTableModel dtm = (DefaultTableModel) tblNotasD.getModel();
            if(dtm.getRowCount() < dataRows){
                dtm.setRowCount(dataRows);
                tblDetalle.setModel(dtm);
            }// end if

            rsNotasD.beforeFirst();

            String facsald;
            while (rsNotasD.next()){
                tblNotasD.setValueAt(rsNotasD.getObject("factura"), row, 0);
                tblNotasD.setValueAt(rsNotasD.getObject("prodesc"), row, 1);
                tblNotasD.setValueAt(rsNotasD.getObject("fecha" ), row, 2);
                facsald = rsNotasD.getString("saldo");
                facsald = Ut.setDecimalFormat(facsald, "#,##0.00");
                tblNotasD.setValueAt(facsald, row, 3);
                tblNotasD.setValueAt(rsNotasD.getObject("moneda"), row, 4);
                tblNotasD.setValueAt(rsNotasD.getObject("procode"), row, 5);
                tblNotasD.setValueAt(rsNotasD.getFloat("tipoca"), row, 6);
                row++;
            } // end while
            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        } // end try-catch
    } // end cargarNotasD
}