/*
 * AnulacionDocInv.java
 *
 * Created on 17/06/2010, 07:57:04 PM
 */

package interfase.transacciones;

import Mail.Bitacora;
import accesoDatos.CMD;
import accesoDatos.UtilBD;
import interfase.otros.Navegador;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import logica.utilitarios.SQLInjectionException;
import logica.utilitarios.Ut;

/**
 *
 * @author Bosco
 */
@SuppressWarnings("serial")
public class AnulacionDocInv extends java.awt.Dialog {
    private Connection conn;        // Conexión a la base de datos
    private ResultSet rsMovtido = null; // Tipos de documento
    private String documento;       // Aquí estará el documento pasado por parámetro
    private int movtido;            // Tipo de documento
    private ResultSet rs  = null;   // Uso general
    private Navegador nav = null;
    private final Bitacora b = new Bitacora();

    public AnulacionDocInv(
            java.awt.Frame parent,
            boolean modal,
            Connection c, 
            String recnume,
            int movtido) {
        
        super(parent, modal);
        initComponents();

        this.setAlwaysOnTop(false);

        this.conn = c;
        
        this.movtido = movtido;
        this.nav  = new Navegador();
        this.nav.setConexion(conn);

        // Cargar combo de tipos de documento
        cargarComboTiposDoc();

        this.documento = recnume.trim();
        
        // Si el número de documento recibido es un cero entonces habilito
        // el campo para que el usuario pueda digitar un número.
        try{
            txtMovdocu.setEnabled(Integer.parseInt(documento) == 0);
        } catch(Exception ex) {
            // Si ocurriera un error aquí es porque lo que llegó no era un
            // número entonces lo tomo como cero para que se pueda continuar.
            txtMovdocu.setEnabled(true);
            documento = "0";
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        } finally {
            txtMovdocu.setText(documento);

            // Si el campo está habilitado le pongo el focus...
            if (txtMovdocu.isEnabled()) {
                txtMovdocu.requestFocusInWindow();
            } else { // ... caso contrario ejecuto el evento que busca el documento
                txtMovdocuFocusLost(null);
                cmdAnular.requestFocusInWindow();
            } // end if
        }
    } // end constructor

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmdAnular = new javax.swing.JButton();
        cmdSalir = new javax.swing.JButton();
        txtMovdocu = new javax.swing.JFormattedTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtMovfech = new javax.swing.JTextField();
        cboMovtido = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaMovdesc = new javax.swing.JTextArea();

        setIconImage(null);
        setModalityType(java.awt.Dialog.ModalityType.DOCUMENT_MODAL);
        setTitle("Anular documentos de inventario");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        cmdAnular.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmdAnular.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZUNDO.png"))); // NOI18N
        cmdAnular.setText("Anular");
        cmdAnular.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmdAnularMouseClicked(evt);
            }
        });
        cmdAnular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAnularActionPerformed(evt);
            }
        });

        cmdSalir.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmdSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/control-power.png"))); // NOI18N
        cmdSalir.setText("Cerrar");
        cmdSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSalirActionPerformed(evt);
            }
        });

        try {
            txtMovdocu.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("**********")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtMovdocu.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtMovdocu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMovdocuActionPerformed(evt);
            }
        });
        txtMovdocu.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtMovdocuFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMovdocuFocusLost(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Documento #");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Fecha");

        txtMovfech.setEditable(false);
        txtMovfech.setForeground(new java.awt.Color(204, 0, 204));

        cboMovtido.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cboMovtido.setToolTipText("Tipo de entrada");
        cboMovtido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboMovtidoActionPerformed(evt);
            }
        });

        txaMovdesc.setColumns(20);
        txaMovdesc.setEditable(false);
        txaMovdesc.setForeground(new java.awt.Color(0, 51, 255));
        txaMovdesc.setLineWrap(true);
        txaMovdesc.setRows(5);
        txaMovdesc.setWrapStyleWord(true);
        jScrollPane1.setViewportView(txaMovdesc);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(8, 8, 8)
                .addComponent(txtMovdocu, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cboMovtido, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 144, Short.MAX_VALUE)
                .addComponent(cmdAnular)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdSalir)
                .addGap(145, 145, 145))
            .addGroup(layout.createSequentialGroup()
                .addGap(141, 141, 141)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtMovfech, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cmdAnular, cmdSalir});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(cboMovtido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMovdocu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txtMovfech, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(cmdSalir)
                    .addComponent(cmdAnular))
                .addGap(4, 4, 4))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cmdAnular, cmdSalir});

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private void cmdAnularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAnularActionPerformed
        this.cmdAnularMouseClicked(null);
    }//GEN-LAST:event_cmdAnularActionPerformed

    private void cmdSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSalirActionPerformed
        dispose();
    }//GEN-LAST:event_cmdSalirActionPerformed
/**
 * Búsqueda del documento y despliegue del cliente
 * @param evt
 */
    private void txtMovdocuFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMovdocuFocusLost
        int movtidox;       // Tipo de documento
        String movtimo;     // Tipo de movimiento
        String sqlSelect;   // Sentencia SQL
        String descrip;     // Descripción del tipo de movimiento
        PreparedStatement ps;
        documento = txtMovdocu.getText().trim();

        // Permito que el número sea cero o blanco para que el usuario
        // pueda usar otras opciones.
        if (documento.equals("") || documento.equals("0")){
            txaMovdesc.setText("");
            txtMovfech.setText("");
            return;
        } // end if

        // Si no hay tipos de documento en el combo entonces no continúo
        // ya que se produce un error.
        if (cboMovtido.getItemCount() == 0){
            return;
        } // end if

        try {
            // Elijo el tipo de documento
            descrip = cboMovtido.getSelectedItem().toString().trim();
            Ut.seek(rsMovtido, descrip, "descrip");

            movtidox = rsMovtido.getInt("movtido");
            movtimo = rsMovtido.getString("EntradaSalida");
            sqlSelect =
                    "Select                       " +
                    "   Dtoc(movfech) as movfech, " +
                    "   Movdesc                   " +
                    "from inmovime                " +
                    "Where movdocu = ? " +
                    "and movtimo =   ? " +
                    "and movtido =   ? " +
                    "and (estado is null or estado = '') and movCerrado = 'N'";

        
            ps = conn.prepareStatement(sqlSelect, 
                    ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ps.setString(1, documento);
            ps.setString(2, movtimo);
            ps.setInt(3, movtidox);
            
            rs = CMD.select(ps);
            
            if (UtilBD.goRecord(rs, UtilBD.FIRST)){
                txaMovdesc.setText(rs.getString("Movdesc"));
                txtMovfech.setText(rs.getString("movfech"));
            } else {
                txaMovdesc.setText("");
                txtMovfech.setText("");
                JOptionPane.showMessageDialog(null,
                        "Documento no encontrado." +
                        "\nPodría darse alguna de la siguientes " +
                        "situaciones:\n" +
                        "1. El documento ya se encuentra anulado.\n" +
                        "2. El documento se encuentra en un período cerrado.\n" +
                        "3. El documento no existe en la base de datos.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            } // end if
            ps.close();
        } catch(SQLException ex){
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        } // end try-catch
    }//GEN-LAST:event_txtMovdocuFocusLost

    private void txtMovdocuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMovdocuActionPerformed
        // Esto provoca que se ejecute el FocusLost en el text field
        txtMovdocu.transferFocus();
    }//GEN-LAST:event_txtMovdocuActionPerformed

    private void txtMovdocuFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMovdocuFocusGained
        txtMovdocu.selectAll();
    }//GEN-LAST:event_txtMovdocuFocusGained

    private void cmdAnularMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdAnularMouseClicked
        boolean hayTransaccion;
        int movtidox;
        String movtimo;
        PreparedStatement ps;
        String sqlUpdate;

        if (!validarAccion()){
            return;
        } // end if

        documento = txtMovdocu.getText().trim();

        // Si el formulario fue llamado con todos los parámetros no se hace
        // confirmación.
        if (this.movtido == 0){
            // Confirmar la anulación
            int respuesta =
                JOptionPane.showConfirmDialog(null,
                        "¿Realmente desea anular este documento?",
                        "Confirme..",
                        JOptionPane.YES_NO_OPTION);
            if (respuesta == JOptionPane.NO_OPTION){
                return;
            } // end if
        } // end if
        
        hayTransaccion = false;

        // Invocar el SP que realizará la acción.
        sqlUpdate = "Call AnularDocInv(?,?,?,?)";
        try {
            // Al llegar aquí ya el RS está ubicado en el registro
            // correspondiente al tipo de documento a anular.
            movtidox = rsMovtido.getInt("movtido");
            movtimo = rsMovtido.getString("EntradaSalida");

            hayTransaccion = CMD.transaction(conn, CMD.START_TRANSACTION);

            ps = conn.prepareStatement(sqlUpdate);

            ps.setString(1, documento);
            ps.setString(2, movtimo);
            ps.setInt(3, movtidox);
            ps.setString(4, "INV");

            if (rs != null){
                rs.close();
            } // end if
            
            // Utilizo CMD.select(ps) porque el SP devuelve un RS
            // ya sea para indicar el error o para indicar que todo
            // salió bien.
            rs = CMD.select(ps);

            rs.first();

            if (rs.getBoolean(1)){
                JOptionPane.showMessageDialog(null,
                        rs.getString(2),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                CMD.transaction(conn, CMD.ROLLBACK);
                return;
            } // end if

            CMD.transaction(conn, CMD.COMMIT);
            
            // Se informa al usuario solo si la pantalla se está usando en forma
            // interactiva
            if (this.movtido == 0){
                JOptionPane.showMessageDialog(null,
                        "Documento anulado satisfactoriamente.",
                        "Mensaje",
                        JOptionPane.INFORMATION_MESSAGE);
            } // end if
            
            txaMovdesc.setText("");
            txtMovfech.setText("");
            this.movtido = 0;

            if (rs != null){
                rs.close();
            } // end if
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            txaMovdesc.setText("");
            txtMovfech.setText("");
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);

            if (hayTransaccion){
                try{
                    CMD.transaction(conn, CMD.ROLLBACK);
                } catch(SQLException ex1){
                    JOptionPane.showMessageDialog(null, 
                            ex1.getMessage(),
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                    b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
                } // end try interno
            } // end if
        } // end catch externo
    }//GEN-LAST:event_cmdAnularMouseClicked

    private void cboMovtidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboMovtidoActionPerformed
        txtMovdocuFocusLost(null);
}//GEN-LAST:event_cboMovtidoActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cboMovtido;
    private javax.swing.JButton cmdAnular;
    private javax.swing.JButton cmdSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txaMovdesc;
    private javax.swing.JFormattedTextField txtMovdocu;
    private javax.swing.JTextField txtMovfech;
    // End of variables declaration//GEN-END:variables

    private boolean validarAccion(){
        boolean todoCorrecto = true;
        // Si el campo de fecha está vacío significa que el documento
        // digitado no es válido.
        if (this.txtMovfech.getText().trim().equals("")){
            JOptionPane.showMessageDialog(null,
                    "Número de documento no válido.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            txtMovdocu.requestFocusInWindow();
            return false;
        } // end if

        return todoCorrecto;
    } // end validarAccion


    @SuppressWarnings({"unchecked"})
    private void cargarComboTiposDoc() {
        try {
            rsMovtido = 
                    nav.cargarRegistro(
                    Navegador.TODOS, 0, "intiposdoc", "Movtido");
            if (rsMovtido == null) {
                return;
            } // end if
            
            rsMovtido.beforeFirst();
            // Solo cargo los tipo de doc. de inventario.
            while (rsMovtido.next()){
                if (rsMovtido.getString("Modulo")
                        .trim().equalsIgnoreCase("INV")) {
                    cboMovtido.addItem(rsMovtido.getString("descrip"));
                    
                    // Si se recibió tipo de documento por parámetro y es igual
                    // al del rsMovtido actual entonces dejo seleccionado el item
                    // en el combo para que se pueda ejecutar de una vez.
                    if (this.movtido > 0 && rsMovtido.getInt("movtido") == this.movtido){
                        this.cboMovtido.setSelectedItem(rsMovtido.getString("descrip"));
                    } // end if
                } // end if
            } // end while
        } catch (SQLException | SQLInjectionException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(), 
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        }
    } // end cargarComboTiposDoc
    
    public void setDescrip(String descrip){
        this.txaMovdesc.setText(descrip);
    }
    
    public void anular(){
        this.cmdAnularMouseClicked(null);
    }
}
