/*
 * RegistroPagaresCXC.java
 *
 * Created on 28/11/2010, 08:30:28 PM
 */
package interfase.transacciones;

import accesoDatos.UtilBD;
import interfase.otros.Buscador;
import interfase.otros.Navegador;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import Exceptions.CurrencyExchangeException;
import Mail.Bitacora;
import logica.utilitarios.SQLInjectionException;
import logica.utilitarios.Ut;

/**
 *
 * @author Bosco Garita
 */
public class RegistroPagaresCXC extends JFrame {

    public ResultSet rs, rs3;
    private String tabla;
    private Statement stat;
    private Connection conn = null;
    Navegador nav = null;
    private Buscador bd = null;
    private ResultSet rs2 = null;
    private ResultSet rsMoneda = null; // Monedas
    private Calendar fechaA = GregorianCalendar.getInstance();
    private boolean inicio = true;  // Se usa para evitar que corran agunos eventos
    private boolean fin = false; // Se usa para evitar que corran agunos eventos
    private String codigoTCP;      // Código de la moneda predeterminada
    private String codigoTC;       // Código de moneda.
    private int CLIENTES = 1;
    private int buscar = CLIENTES; // Valor default

    /**
     * Creates new form Bodegas
     * @param c
     * @throws java.sql.SQLException
     * @throws logica.utilitarios.SQLInjectionException
     */
    public RegistroPagaresCXC(Connection c) throws SQLException, SQLInjectionException {
        try{
            initComponents();
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, ex);
        }
        

        txtPagare.setText("");
        datEmision.setDate(fechaA.getTime());
        datVencimiento.setDate(fechaA.getTime());
        cmdBuscar.setVisible(false);
        tabla = "pagarescxc";
        nav = new Navegador();

        conn = c;

        stat = conn.createStatement();
        nav.setConexion(conn);

        // Cargo el combo de las monedas
        cargarComboMonedas();

        // Cargo la moneda predeterminada.
        String sqlSent = "Select codigoTC From config";
        rs = stat.executeQuery(sqlSent);
        rs.first();
        codigoTCP = rs.getString("codigoTC").trim();
        //codigoTC  = rs.getRSString("codigoTC").trim();
        rs.close();
        setDefaultCurrency();
        //        String descrip = "";
        //        rsMoneda.beforeFirst();
        //        while (rsMoneda.next()){
        //            if (rsMoneda.getRSString("codigo").trim().equals(codigoTC)){
        //                descrip = rsMoneda.getRSString("descrip").trim();
        //                break;
        //            } // end if
        //        } // end while
        //        if (!descrip.equals(""))
        //            cboMoneda.setSelectedItem(descrip);
        //        // end if

        // Cargo el último pagaré
        rs = nav.cargarRegistro(
                Navegador.ULTIMO, "", tabla, "Pagare");

        if (rs == null || !rs.first()) {
            return;
        } // end if

        txtPagare.setText(rs.getString("Pagare"));

        refrescarDatos();

        inicio = false;

        // Establecer el tipo de cambio
        cboMonedaActionPerformed(null);
    } // end constructor

    public void setConexion(Connection c) {
        conn = c;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmdBuscar = new javax.swing.JButton();
        lblFamilia = new javax.swing.JLabel();
        txtPagare = new javax.swing.JFormattedTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtClicode = new javax.swing.JFormattedTextField();
        txtClidesc = new javax.swing.JTextField();
        txtMonto = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaObservaciones = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        cmdPrimero = new javax.swing.JButton();
        cmdAnterior = new javax.swing.JButton();
        cmdSiguiente = new javax.swing.JButton();
        cmdUltimo = new javax.swing.JButton();
        cmdGuardar = new javax.swing.JButton();
        cmdBorrar = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        cboMoneda = new javax.swing.JComboBox();
        txtTipoca = new javax.swing.JFormattedTextField();
        datEmision = new com.toedter.calendar.JDateChooser();
        datVencimiento = new com.toedter.calendar.JDateChooser();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuArchivo = new javax.swing.JMenu();
        mnuGuardar = new javax.swing.JMenuItem();
        mnuSalir = new javax.swing.JMenuItem();
        mnuEdicion = new javax.swing.JMenu();
        mnuBorrar = new javax.swing.JMenuItem();
        mnuBuscar = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Registro de pagarés");

        cmdBuscar.setText("Buscar");
        cmdBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBuscarActionPerformed(evt);
            }
        });

        lblFamilia.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblFamilia.setText("Pagaré");

        txtPagare.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txtPagare.setToolTipText("Número de pagaré");
        txtPagare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPagareActionPerformed(evt);
            }
        });
        txtPagare.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPagareFocusGained(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Cliente");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Monto");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Emisión");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Vencimiento");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Observaciones");

        txtClicode.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txtClicode.setToolTipText("Código de cliente");
        txtClicode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtClicodeActionPerformed(evt);
            }
        });
        txtClicode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtClicodeFocusGained(evt);
            }
        });

        txtClidesc.setEditable(false);
        txtClidesc.setToolTipText("Nombre del cliente");

        txtMonto.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtMonto.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtMonto.setToolTipText("Monto del pagaré");
        txtMonto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMontoActionPerformed(evt);
            }
        });
        txtMonto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtMontoFocusGained(evt);
            }
        });

        txaObservaciones.setColumns(20);
        txaObservaciones.setRows(5);
        jScrollPane1.setViewportView(txaObservaciones);

        cmdPrimero.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZTOP.png"))); // NOI18N
        cmdPrimero.setToolTipText("Ir al primer registro");
        cmdPrimero.setFocusCycleRoot(true);
        cmdPrimero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrimeroActionPerformed(evt);
            }
        });

        cmdAnterior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZBACK.png"))); // NOI18N
        cmdAnterior.setToolTipText("Ir al registro anterior");
        cmdAnterior.setFocusCycleRoot(true);
        cmdAnterior.setMaximumSize(new java.awt.Dimension(93, 29));
        cmdAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAnteriorActionPerformed(evt);
            }
        });

        cmdSiguiente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZNEXT.png"))); // NOI18N
        cmdSiguiente.setToolTipText("Ir al siguiente registro");
        cmdSiguiente.setMaximumSize(new java.awt.Dimension(93, 29));
        cmdSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSiguienteActionPerformed(evt);
            }
        });

        cmdUltimo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZEND.png"))); // NOI18N
        cmdUltimo.setToolTipText("Ir al último registro");
        cmdUltimo.setFocusCycleRoot(true);
        cmdUltimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUltimoActionPerformed(evt);
            }
        });

        cmdGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZSAVE.png"))); // NOI18N
        cmdGuardar.setToolTipText("Guardar registro");
        cmdGuardar.setMaximumSize(new java.awt.Dimension(93, 29));
        cmdGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGuardarActionPerformed(evt);
            }
        });

        cmdBorrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZDELETE.png"))); // NOI18N
        cmdBorrar.setToolTipText("Borrar registro");
        cmdBorrar.setMaximumSize(new java.awt.Dimension(93, 29));
        cmdBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBorrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(cmdPrimero, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdSiguiente, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdUltimo, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cmdAnterior, cmdBorrar, cmdGuardar, cmdPrimero, cmdSiguiente, cmdUltimo});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmdPrimero)
                    .addComponent(cmdAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdSiguiente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdUltimo, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cmdAnterior, cmdBorrar, cmdGuardar, cmdPrimero, cmdSiguiente, cmdUltimo});

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setText("Moneda");

        cboMoneda.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        cboMoneda.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Colones", "Dólares" }));
        cboMoneda.setToolTipText("Moneda");
        cboMoneda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboMonedaActionPerformed(evt);
            }
        });

        txtTipoca.setEditable(false);
        txtTipoca.setColumns(12);
        txtTipoca.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTipoca.setToolTipText("Tipo de cambio");
        txtTipoca.setFocusable(false);

        datEmision.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                datEmisionFocusGained(evt);
            }
        });
        datEmision.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                datEmisionPropertyChange(evt);
            }
        });

        mnuArchivo.setText("Archivo");

        mnuGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        mnuGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/disk.png"))); // NOI18N
        mnuGuardar.setText("Guardar");
        mnuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuGuardarActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuGuardar);

        mnuSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.CTRL_MASK));
        mnuSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/control-power.png"))); // NOI18N
        mnuSalir.setText("Salir");
        mnuSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSalirActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuSalir);

        jMenuBar1.add(mnuArchivo);

        mnuEdicion.setText("Edición");

        mnuBorrar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, java.awt.event.InputEvent.CTRL_MASK));
        mnuBorrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/cross.png"))); // NOI18N
        mnuBorrar.setText("Borrar");
        mnuBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuBorrarActionPerformed(evt);
            }
        });
        mnuEdicion.add(mnuBorrar);

        mnuBuscar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        mnuBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/binocular.png"))); // NOI18N
        mnuBuscar.setText("Buscar");
        mnuBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuBuscarActionPerformed(evt);
            }
        });
        mnuEdicion.add(mnuBuscar);

        jMenuBar1.add(mnuEdicion);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFamilia)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPagare, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtClicode, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(10, 10, 10)
                                        .addComponent(datEmision, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(datVencimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txtClidesc))
                                .addContainerGap())
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtMonto, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cboMoneda, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtTipoca, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmdBuscar)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1)))
                        .addContainerGap())))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {datEmision, datVencimiento});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lblFamilia)
                    .addComponent(txtPagare, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(datEmision, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(datVencimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtClicode, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtClidesc, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(txtMonto, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                        .addComponent(jLabel11)
                        .addComponent(cboMoneda, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtTipoca, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmdBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4))
        );

        setSize(new java.awt.Dimension(617, 306));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void mnuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuGuardarActionPerformed
        cmdGuardarActionPerformed(evt);
}//GEN-LAST:event_mnuGuardarActionPerformed

    private void mnuSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSalirActionPerformed
        this.fin = true;
        dispose();
}//GEN-LAST:event_mnuSalirActionPerformed

    private void mnuBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuBorrarActionPerformed

        eliminarRegistro(txtPagare.getText().trim());
}//GEN-LAST:event_mnuBorrarActionPerformed

    private void mnuBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuBuscarActionPerformed
        cmdBuscarActionPerformed(evt);
}//GEN-LAST:event_mnuBuscarActionPerformed

    private void cmdBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBuscarActionPerformed
        if (buscar == this.CLIENTES) {
            bd = new Buscador(new java.awt.Frame(),
                    true,
                    "inclient", "clicode,Clidesc",
                    "Clidesc",
                    txtClicode, conn);
            bd.setTitle("Buscar clientes");
            bd.lblBuscar.setText("Nombre:");
            bd.setVisible(true);
            txtClicodeActionPerformed(null);

        } else {

            bd = new Buscador(
                    new java.awt.Frame(),
                    true,
                    "pagarescxc Left join inclient on pagarescxc.clicode = inclient.clicode",
                    "pagarescxc.clicode,inclient.clidesc",
                    "inclient.clidesc",
                    txtPagare, conn);
            bd.setTitle("Buscar pagarés");
            bd.lblBuscar.setText("Cliente");
            bd.setVisible(true);
            txtPagareActionPerformed(null);
        }
}//GEN-LAST:event_cmdBuscarActionPerformed

    private void txtPagareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPagareActionPerformed
        String pagare = txtPagare.getText().trim();
        if (evt == null) {
            txtPagare.requestFocusInWindow();
        } else {
            txtPagare.transferFocus();
        } // end if
        try {
            rs = nav.cargarRegistro(
                    Navegador.ESPECIFICO,
                    pagare, tabla, "Pagare");

            if (rs != null && rs.first()) {
                txtPagare.setText(rs.getString("Pagare"));
            } // end if

            refrescarDatos();
        } catch (SQLException | SQLInjectionException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
}//GEN-LAST:event_txtPagareActionPerformed

    private void cmdPrimeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrimeroActionPerformed
        String pagare = txtPagare.getText();
        pagare = pagare == null ? "" : pagare.trim();
        try {
            rs = nav.cargarRegistro(
                    Navegador.PRIMERO,
                    pagare, tabla, "Pagare");
            if (rs != null && rs.first()) {
                txtPagare.setText(rs.getString("Pagare"));
            } // end if

            refrescarDatos();
        } catch (SQLException | SQLInjectionException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
}//GEN-LAST:event_cmdPrimeroActionPerformed

    private void cmdAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAnteriorActionPerformed
        String pagare = txtPagare.getText();
        pagare = pagare == null ? "" : pagare.trim();
        try {
            rs = nav.cargarRegistro(
                    Navegador.ANTERIOR,
                    pagare, tabla, "Pagare");
            if (rs != null && rs.first()) {
                txtPagare.setText(rs.getString("Pagare"));
            } // end if

            refrescarDatos();
        } catch (SQLException | SQLInjectionException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
}//GEN-LAST:event_cmdAnteriorActionPerformed

    private void cmdSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSiguienteActionPerformed
        String pagare = txtPagare.getText();
        pagare = pagare == null ? "" : pagare.trim();
        try {
            rs = nav.cargarRegistro(
                    Navegador.SIGUIENTE,
                    pagare, tabla, "Pagare");
            if (rs != null && rs.first()) {
                txtPagare.setText(rs.getString("Pagare"));
            } // end if

            refrescarDatos();
        } catch (SQLException | SQLInjectionException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
}//GEN-LAST:event_cmdSiguienteActionPerformed

    private void cmdUltimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdUltimoActionPerformed
        String pagare = txtPagare.getText();
        pagare = pagare == null ? "" : pagare.trim();
        try {
            rs = nav.cargarRegistro(
                    Navegador.ULTIMO,
                    pagare, tabla, "Pagare");
            if (rs != null && rs.first()) {
                txtPagare.setText(rs.getString("Pagare"));
            } // end if

            refrescarDatos();
        } catch (SQLException | SQLInjectionException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
}//GEN-LAST:event_cmdUltimoActionPerformed

    private void cmdGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGuardarActionPerformed
        try {
            guardarRegistro();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
}//GEN-LAST:event_cmdGuardarActionPerformed

    private void cmdBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBorrarActionPerformed
        eliminarRegistro(txtPagare.getText().trim());
}//GEN-LAST:event_cmdBorrarActionPerformed

    private void txtClicodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtClicodeActionPerformed
        String sqlSent
                = "Select ConsultarCliente("
                + txtClicode.getText().trim() + ")";
        try {
            rs2.close();
            rs2 = stat.executeQuery(sqlSent);
            txtClidesc.setText("");
            if (rs2 != null && rs2.first()) {
                txtClidesc.setText(rs2.getString(1));
            } // end if
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
        txtClicode.transferFocus();
        if (txtClidesc.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,
                    "Cliente no existe.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        } // end if
    }//GEN-LAST:event_txtClicodeActionPerformed

    private void txtMontoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMontoActionPerformed
        txtMonto.transferFocus();
    }//GEN-LAST:event_txtMontoActionPerformed

    private void txtPagareFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPagareFocusGained
        txtPagare.selectAll();
    }//GEN-LAST:event_txtPagareFocusGained

    private void txtClicodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtClicodeFocusGained
        txtClicode.selectAll();
    }//GEN-LAST:event_txtClicodeFocusGained

    private void txtMontoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMontoFocusGained
        txtMonto.selectAll();
    }//GEN-LAST:event_txtMontoFocusGained

    private void cboMonedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboMonedaActionPerformed
        if (inicio || fin) {
            return;
        } // end if

        Float tc = 0.F;
        if (txtTipoca.getText() != null && !txtTipoca.getText().trim().equals("")) {
            tc = Float.valueOf(txtTipoca.getText().trim());
        } // end if

        // Localizo en en ResultSet el código correspondiente a la
        // descripción que está en el combo. Este método deja el código del TC
        // en la variable codigoTC.
        ubicarCodigo();
        try {
            // Verifico si el tipo de cambio ya está configurado 
            // para la fecha de emisión del pagaré.
            txtTipoca.setText(String.valueOf(UtilBD.tipoCambio(
                    codigoTC, this.datEmision.getDate(), conn)));
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return;
        }

        // Si el tc es cero advierto sobre el error
        if (Float.valueOf(txtTipoca.getText().trim()) <= 0) {
            JOptionPane.showMessageDialog(
                    null,
                    "No se ha establecido el TC para esta moneda.",
                    "Advertencia",
                    JOptionPane.WARNING_MESSAGE);
        } // end if
}//GEN-LAST:event_cboMonedaActionPerformed

    private void datEmisionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_datEmisionFocusGained
        // Uso esta variable para reestablecer el valor después de la
        // validación en caso de que la fecha no fuera aceptada.
        fechaA.setTime(datEmision.getDate());
    }//GEN-LAST:event_datEmisionFocusGained

    private void datEmisionPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_datEmisionPropertyChange
        if (datEmision != null && datEmision.getDate() != null){
            fechaA.setTime(datEmision.getDate());
        }
        
    }//GEN-LAST:event_datEmisionPropertyChange

    /**
     * Este método hace una llamada al SP EliminarPagareCXC() y éste devuelve un
     * ResultSet con dos campos: vError y vMensajeErr.Si vError = 1 no se pudo 
     * eliminar el registro en cuyo caso hay que desplegar vMensajeErr.
     *
     * @param pPagare
     */
    public void eliminarRegistro(String pPagare) {
        if (pPagare == null) {
            return;
        } // end if

        if (JOptionPane.showConfirmDialog(null,
                "¿Realmente desea eliminar este registro?")
                != JOptionPane.YES_OPTION) {
            return;
        } // end if

        String sqlDelete
                = "CALL EliminarPagareCXC(" + pPagare + ")";

        try {
            ResultSet rstmp = stat.executeQuery(sqlDelete);
            // El SP siempre devolverá un RS
            rstmp.first();
            if (rstmp.getBoolean(1)) {
                JOptionPane.showMessageDialog(null,
                        rstmp.getString(2),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            } // end if
            JOptionPane.showMessageDialog(null,
                    "Eliminación satisfactoria.",
                    "Mensaje",
                    JOptionPane.INFORMATION_MESSAGE);
            txtPagare.setText("0");
            txtPagareActionPerformed(null);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
    } // end eliminar

    /**
     * @param c
     */
    public static void main(Connection c) {
        try {
            // Bosco agregado 23/07/2011
            // Integración del segundo nivel de seguridad.
            if (!UtilBD.tienePermiso(c, "RegistroPagaresCXC")) {
                JOptionPane.showMessageDialog(null,
                        "Usted no está autorizado para ejecutar este proceso",
                        "Error - Permisos",
                        JOptionPane.ERROR_MESSAGE);
                return;
            } // end if
        } catch (Exception ex) {
            Logger.getLogger(RegistroPagaresCXC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Fin Bosco agregado 23/07/2011
        //JFrame.setDefaultLookAndFeelDecorated(true);
        try {
            // Revisar el TC del dólar
            Float tcd = UtilBD.tipoCambioDolar(c);

            RegistroPagaresCXC run = new RegistroPagaresCXC(c);
            run.setVisible(true);
        } catch (CurrencyExchangeException | SQLException | NumberFormatException | SQLInjectionException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cboMoneda;
    private javax.swing.JButton cmdAnterior;
    private javax.swing.JButton cmdBorrar;
    private javax.swing.JButton cmdBuscar;
    private javax.swing.JButton cmdGuardar;
    private javax.swing.JButton cmdPrimero;
    private javax.swing.JButton cmdSiguiente;
    private javax.swing.JButton cmdUltimo;
    private com.toedter.calendar.JDateChooser datEmision;
    private com.toedter.calendar.JDateChooser datVencimiento;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblFamilia;
    private javax.swing.JMenu mnuArchivo;
    private javax.swing.JMenuItem mnuBorrar;
    private javax.swing.JMenuItem mnuBuscar;
    private javax.swing.JMenu mnuEdicion;
    private javax.swing.JMenuItem mnuGuardar;
    private javax.swing.JMenuItem mnuSalir;
    private javax.swing.JTextArea txaObservaciones;
    private javax.swing.JFormattedTextField txtClicode;
    private javax.swing.JTextField txtClidesc;
    private javax.swing.JFormattedTextField txtMonto;
    private javax.swing.JFormattedTextField txtPagare;
    private javax.swing.JFormattedTextField txtTipoca;
    // End of variables declaration//GEN-END:variables

    /**
     * Este método controla la acción para el botón guardar. Si el registro
     * existe lo modifica sino lo inserta. Hace una llamada al método
     * consultarRegistro para determinar si existe o no. Para insertar el
     * registro hace una llamada al procedimiento almacenado InsertarPagareCXC()
     * y le pasa los parámetros requeridos.
     *
     * @throws java.sql.SQLException
     */
    private void guardarRegistro() throws SQLException {
        String pagare,
                clicode,
                monto,
                emision,
                vencimiento,
                observaciones,
                tipoca;
        pagare = txtPagare.getText();
        clicode = txtClicode.getText();
        monto = txtMonto.getText();
        observaciones = txaObservaciones.getText();
        tipoca = txtTipoca.getText().trim();

        // ******** Validaciones ********
        // Número de pagaré
        if (pagare == null || pagare.trim().equals("")) {
            JOptionPane.showMessageDialog(null,
                    "El número de pagaré es incorrecto",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            txtPagare.requestFocusInWindow();
            return;
        } // end if

        // Código de cliente
        if (clicode == null
                || clicode.trim().equals("")
                || txtClidesc.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,
                    "El código de cliente es incorrecto",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            txtClicode.requestFocusInWindow();
            return;
        } // end if

        try {
            // Monto
            monto = Ut.quitarFormato(monto);
        } catch (Exception ex) {
            Logger.getLogger(RegistroPagaresCXC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return;
        }

        if (Double.parseDouble(monto) <= 0) {
            JOptionPane.showMessageDialog(null,
                    "El monto no es aceptable.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            txtMonto.requestFocusInWindow();
            return;
        } // end if

        // Fechas
        if (datEmision == null) {
            JOptionPane.showMessageDialog(null,
                    "La fecha de emisión es incorrecta.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            datEmision.requestFocusInWindow();
            return;
        } // end if

        if (datVencimiento == null) {
            JOptionPane.showMessageDialog(null,
                    "La fecha de vencimiento es incorrecta.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            datVencimiento.requestFocusInWindow();
            return;
        } // end if

        if (Float.parseFloat(tipoca) <= 0.0f) {
            JOptionPane.showMessageDialog(null,
                    "Debe establecer el tipo de cambio.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            this.cboMoneda.requestFocusInWindow();
            return;
        } // end if
        // ******** Fin validaciones ********

        // Preparar las fechas y observaciones
        emision = Ut.fechaSQL(datEmision.getDate());
        vencimiento = Ut.fechaSQL(datVencimiento.getDate());
        observaciones = txaObservaciones.getText();

        String sentSQL;

        if (!consultarRegistro(pagare)) {
            // Si el registro no existe también hay que
            // verificar que el consecutivo sea el correcto.
            // Esto lo hace el mismo SP InsertarPagareCXC()
            sentSQL
                    = "CALL InsertarPagareCXC("
                    + pagare + ","
                    + clicode + ","
                    + monto + ","
                    + emision + ","
                    + vencimiento + ","
                    + "'" + codigoTC + "'" + ","
                    + tipoca + ","
                    + "'" + observaciones + "'" + ")";

        } else {
            sentSQL
                    = "CALL ModificarPagareCXC("
                    + pagare + ","
                    + clicode + ","
                    + monto + ","
                    + emision + ","
                    + vencimiento + ","
                    + "'" + codigoTC + "'" + ","
                    + tipoca + ","
                    + "'" + observaciones + "'" + ")";
        } // end if

        // Utilizo la forma de query porque el SP devuelve
        // un select con dos campos.
        ResultSet rsError = stat.executeQuery(sentSQL);

        // Siempre va a haber un resultado excepto en caso
        // de error.
        rsError.first();

        if (rsError.getBoolean(1)) {
            JOptionPane.showMessageDialog(null,
                    rsError.getString(2),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if

        JOptionPane.showMessageDialog(null,
                "Registro guardado satisfatoriamente",
                "Mensaje", JOptionPane.INFORMATION_MESSAGE);
    } // end guardar

    private void refrescarDatos() {
        try {
            // Si el registro no existe limpio los campos para
            // que el usuario pueda digitar uno nuevo
            if (rs == null || !rs.first() || txtPagare.getText().trim().equals("")) {
                txtClidesc.setText("");
                txtClicode.setText("0");
                fechaA = GregorianCalendar.getInstance();
                datEmision.setDate(fechaA.getTime());
                datVencimiento.setDate(fechaA.getTime());
                txtMonto.setText("0.00");
                txaObservaciones.setText("");

                // Establezco la moneda default
                setDefaultCurrency();
                //                codigoTC = codigoTCP;
                //
                //                String descrip = "";
                //                rsMoneda.beforeFirst();
                //                while (rsMoneda.next()){
                //                    if (rsMoneda.getRSString("codigo").trim().equals(codigoTCP)){
                //                        descrip = rsMoneda.getRSString("descrip").trim();
                //                        break;
                //                    } // end if
                //                } // end while
                //                if (!descrip.equals(""))
                //                    cboMoneda.setSelectedItem(descrip);
                //                // end if
                return;
            } // end if

            datEmision.setDate(rs.getDate("Emision"));
            datVencimiento.setDate(rs.getDate("Vencimiento"));
            txtClicode.setText(rs.getString("clicode"));
            txtMonto.setText(
                    Ut.fDecimal(
                            rs.getString("Monto"), "#,##0.00"));

            codigoTC = rs.getString("codigoTC");

            // Localizo la descripción de la moneda en el RS
            // de monedas y luego establezco el valor en el
            // combo de monedas.
            if (Ut.seek(rsMoneda, codigoTC, "codigo")) {
                this.cboMoneda.setSelectedItem(
                        rsMoneda.getString("descrip").trim());
            } // end if

            String sqlSelect
                    = "Select ConsultarCliente("
                    + rs.getString("clicode") + ")";

            rs2 = stat.executeQuery(sqlSelect);

            if (rs2 != null && rs2.first()) {
                txtClidesc.setText(rs2.getString(1));
            } // end if

            txaObservaciones.setText(rs.getString("Observaciones"));

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
    } // end refrescarDatos

    /**
     * Este método verifica si un registro existe o no.
     *
     * @param pagare (número de pagaré)
     * @return (true = existe, false = no existe)
     */
    public boolean consultarRegistro(String pagare) {
        boolean existe = false;
        if (pagare == null) {
            return existe;
        } // end if

        try {
            String sqlSent
                    = "SELECT monto from pagarescxc "
                    + "Where pagare = " + pagare;
            rs2.close();
            rs2 = stat.executeQuery(sqlSent);
            if (rs2 != null && rs2.first()) {
                existe = true;
            } // end if
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
        return existe;
    } // end consultarRegistro

    @SuppressWarnings("unchecked")
    private void cargarComboMonedas() {
        try {
            rsMoneda
                    = nav.cargarRegistro(
                            Navegador.TODOS, "", "monedas", "codigo");
            if (rsMoneda == null) {
                return;
            } // end if
            this.cboMoneda.removeAllItems();
            rsMoneda.beforeFirst();
            while (rsMoneda.next()) {
                cboMoneda.addItem(rsMoneda.getString("descrip"));
            } // end while
        } catch (SQLException | SQLInjectionException ex) {
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
    } // end cargarComboMonedas

    private void ubicarCodigo() {
        try {
            // Busco el código que corresponde a la moneda del combo
            if (rsMoneda == null) {
                return;
            } // end if

            rsMoneda.beforeFirst();
            while (rsMoneda.next()) {
                if (cboMoneda.getSelectedItem().toString().trim().equals(rsMoneda.getString("descrip").trim())) {
                    codigoTC = rsMoneda.getString("codigo").trim();
                    break;
                } // end if
            } // end while
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
    } // end ubicarCodigo

    private void setDefaultCurrency() {
        try {
            // Establezco la moneda default
            codigoTC = codigoTCP;
            String descrip = "";
            rsMoneda.beforeFirst();
            while (rsMoneda.next()) {
                if (rsMoneda.getString("codigo").trim().equals(codigoTCP)) {
                    descrip = rsMoneda.getString("descrip").trim();
                    break;
                } // end if
            } // end while
            // end while
            if (!descrip.equals("")) {
                cboMoneda.setSelectedItem(descrip);
                // end if
            }
        } // end setDefaultCurrency
        catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
        // end if
    } // end setDefaultCurrency
} // end class
