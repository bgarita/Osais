package interfase.transacciones;

import Mail.Bitacora;
import accesoDatos.CMD;
import interfase.menus.Menu;
import interfase.otros.Buscador;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import logica.contabilidad.CoactualizCat;
import logica.contabilidad.CoasientoD;
import logica.contabilidad.CoasientoE;
import logica.contabilidad.Cuenta;
import logica.contabilidad.PeriodoContable;
import logica.utilitarios.Ut;

/**
 *
 * @author bosco
 */
public class RegistroAsientos extends javax.swing.JFrame {

    private static final long serialVersionUID = 1L;
    private final int BUSCAR_ASIENTO = 1;
    private final int BUSCAR_CUENTA = 2;
    private int buscar = BUSCAR_ASIENTO;
    private final Bitacora b = new Bitacora();
    /*
     * Los campos old_comprob y old_tipo solo se cargan mediante el botón 
     * buscar asiento porque se usan únicamente cuando se va a modificar 
     * o anular un asiento.
     */
    private String old_comprob;
    private short old_tipo;

    private String[] aTipo_comp;

    private CoasientoE asientoE; // Encabezado de asientos.
    private final JTextField tmp_tipo; // Se usa para las búsquedas de asientos.
    private CoasientoD asientoD; // Detalle del asiento
    private boolean inicio;      // Se usa para evitar que algunos eventos se disparen
    private boolean fin;         // Se usa para evitar que algunos eventos se disparen
    private final Cuenta cta;    // Clase que maneja todo lo relacionado con cuentas
    private boolean validandoFecha;
    private final Connection conn;
    private final PeriodoContable pc; // Carga todos los datos del periodo contable actual

    /**
     * Creates new form RegistroAsientos
     *
     * @param c
     */
    public RegistroAsientos(Connection c) {
        initComponents();

        // Defino el escuchador con una clase anónima para controlar la
        // salida de esta pantalla.  Esto funciona simpre que se haya
        // establecido el siguiente parámetro:
        // setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE)
        // Esta pantalla lo hace en initComponents().
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                btnSalirActionPerformed(null);
            } // end windowClosing
        } // end class
        ); // end Listener

        conn = c;
        this.pc = new PeriodoContable(conn);

        inicio = true;
        fin = false;
        old_comprob = "";
        old_tipo = 0;
        tmp_tipo = new JTextField("0");
        this.validandoFecha = false;
        this.datFecha_comp.setDate(new Date());
        cargarTipos();
        setThisPeriodDate();
        inicio = false;
        asientoE = new CoasientoE(conn);
        asientoD = new CoasientoD(conn);
        cta = new Cuenta(conn);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtDescrip = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        cboDescrip = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtNo_comprob = new javax.swing.JFormattedTextField();
        datFecha_comp = new com.toedter.calendar.JDateChooser();
        txtNo_refer = new javax.swing.JFormattedTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtCuenta = new javax.swing.JFormattedTextField();
        lblNom_cta = new javax.swing.JLabel();
        txtConcepto = new javax.swing.JTextField();
        txtMontoD = new javax.swing.JFormattedTextField();
        txtMontoC = new javax.swing.JFormattedTextField();
        btnBajar = new javax.swing.JButton();
        btnBorrarCu = new javax.swing.JButton();
        btnBuscarCu = new javax.swing.JButton();
        lblidReg = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        btnGuardar = new javax.swing.JButton();
        btnAnular = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        btnBuscarAs = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDetalle = new javax.swing.JTable();
        txtTotalCreditos = new javax.swing.JFormattedTextField();
        txtBalance = new javax.swing.JFormattedTextField();
        txtTotalDebitos = new javax.swing.JFormattedTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        lblAnuladoPor = new javax.swing.JLabel();
        lblAnulaA = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuArchivo = new javax.swing.JMenu();
        mnuGuardar = new javax.swing.JMenuItem();
        mnuSalir = new javax.swing.JMenuItem();
        mnuEdicion = new javax.swing.JMenu();
        mnuAnular = new javax.swing.JMenuItem();
        mnuBuscar = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Registrar asientos");
        setName("RegAsiento"); // NOI18N

        jLabel1.setText("Descripción");

        txtDescrip.setColumns(60);
        txtDescrip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDescripActionPerformed(evt);
            }
        });
        txtDescrip.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDescripFocusGained(evt);
            }
        });
        txtDescrip.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDescripKeyPressed(evt);
            }
        });

        jLabel2.setText("Tipo");

        cboDescrip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboDescripActionPerformed(evt);
            }
        });
        cboDescrip.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cboDescripFocusGained(evt);
            }
        });

        jLabel3.setText("Comprobante");

        jLabel4.setText("Fecha");

        jLabel5.setText("Referencia");

        txtNo_comprob.setColumns(10);
        txtNo_comprob.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("0000000000"))));
        txtNo_comprob.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNo_comprobFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNo_comprobFocusLost(evt);
            }
        });
        txtNo_comprob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNo_comprobActionPerformed(evt);
            }
        });
        txtNo_comprob.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNo_comprobKeyPressed(evt);
            }
        });

        datFecha_comp.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                datFecha_compPropertyChange(evt);
            }
        });
        datFecha_comp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                datFecha_compKeyPressed(evt);
            }
        });

        txtNo_refer.setColumns(9);
        txtNo_refer.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txtNo_refer.setToolTipText("mes + tipo de asiento + año");
        txtNo_refer.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNo_referFocusGained(evt);
            }
        });
        txtNo_refer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNo_referKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cboDescrip, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtNo_comprob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(datFecha_comp, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtNo_refer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 8, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                        .addComponent(jLabel5)
                        .addComponent(jLabel4)
                        .addComponent(jLabel3))
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cboDescrip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtNo_comprob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(datFecha_comp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNo_refer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 10, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel6.setText("Cuenta");

        jLabel7.setText("Concepto");

        jLabel8.setText("Débitos");

        jLabel9.setText("Créditos");

        txtCuenta.setColumns(12);
        try {
            txtCuenta.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("############")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtCuenta.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCuentaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCuentaFocusLost(evt);
            }
        });
        txtCuenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCuentaActionPerformed(evt);
            }
        });
        txtCuenta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCuentaKeyPressed(evt);
            }
        });

        lblNom_cta.setForeground(java.awt.Color.blue);
        lblNom_cta.setText("cta");

        txtConcepto.setColumns(60);
        txtConcepto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtConceptoFocusGained(evt);
            }
        });
        txtConcepto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtConceptoKeyPressed(evt);
            }
        });

        txtMontoD.setColumns(10);
        txtMontoD.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtMontoD.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtMontoD.setText("0.00");
        txtMontoD.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtMontoDFocusGained(evt);
            }
        });
        txtMontoD.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMontoDKeyPressed(evt);
            }
        });

        txtMontoC.setColumns(10);
        txtMontoC.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtMontoC.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtMontoC.setText("0.00");
        txtMontoC.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtMontoCFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMontoCFocusLost(evt);
            }
        });
        txtMontoC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMontoCKeyPressed(evt);
            }
        });

        btnBajar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/24x24 png icons/Down.png"))); // NOI18N
        btnBajar.setToolTipText("Buscar cuenta");
        btnBajar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBajarActionPerformed(evt);
            }
        });

        btnBorrarCu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/24x24 png icons/Trash.png"))); // NOI18N
        btnBorrarCu.setToolTipText("Borrar línea");
        btnBorrarCu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarCuActionPerformed(evt);
            }
        });

        btnBuscarCu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/24x24 png icons/Find.png"))); // NOI18N
        btnBuscarCu.setToolTipText("Buscar cuenta");
        btnBuscarCu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarCuActionPerformed(evt);
            }
        });

        lblidReg.setForeground(new java.awt.Color(176, 74, 224));
        lblidReg.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblidReg.setText("0");
        lblidReg.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtConcepto, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(lblNom_cta, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblidReg, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(116, 116, 116)
                        .addComponent(jLabel7)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(btnBuscarCu, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8)
                            .addComponent(txtMontoD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtMontoC, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(btnBajar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(btnBorrarCu, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(4, 4, 4))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnBajar, btnBorrarCu, btnBuscarCu});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtConcepto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMontoD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMontoC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnBuscarCu))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNom_cta)
                            .addComponent(lblidReg))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(btnBajar)
                            .addComponent(btnBorrarCu, javax.swing.GroupLayout.Alignment.TRAILING)))))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnBajar, btnBorrarCu, btnBuscarCu});

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Save24.png"))); // NOI18N
        btnGuardar.setToolTipText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnAnular.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/24x24 png icons/Undo.png"))); // NOI18N
        btnAnular.setToolTipText("Anular asiento");
        btnAnular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnularActionPerformed(evt);
            }
        });

        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/24x24 png icons/New document.png"))); // NOI18N
        btnNuevo.setToolTipText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/24x24 png icons/Exit.png"))); // NOI18N
        btnSalir.setToolTipText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        btnBuscarAs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/24x24 png icons/Find.png"))); // NOI18N
        btnBuscarAs.setToolTipText("Buscar asiento");
        btnBuscarAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarAsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnBuscarAs, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAnular, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(btnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(btnGuardar)
                .addGap(4, 4, 4)
                .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAnular, btnBuscarAs, btnGuardar, btnNuevo, btnSalir});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnBuscarAs)
                    .addComponent(btnNuevo)
                    .addComponent(btnGuardar)
                    .addComponent(btnSalir)
                    .addComponent(btnAnular))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnAnular, btnBuscarAs, btnGuardar, btnNuevo, btnSalir});

        tblDetalle.setAutoCreateRowSorter(true);
        tblDetalle.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        tblDetalle.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        tblDetalle.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Cuenta", "Descripción", "Concepto", "Débito", "Crédito", "ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDetalle.setGridColor(new java.awt.Color(124, 67, 190));
        tblDetalle.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblDetalle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDetalleMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tblDetalleMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tblDetalleMouseExited(evt);
            }
        });
        jScrollPane1.setViewportView(tblDetalle);
        if (tblDetalle.getColumnModel().getColumnCount() > 0) {
            tblDetalle.getColumnModel().getColumn(0).setMinWidth(80);
            tblDetalle.getColumnModel().getColumn(0).setPreferredWidth(120);
            tblDetalle.getColumnModel().getColumn(0).setMaxWidth(150);
            tblDetalle.getColumnModel().getColumn(3).setMinWidth(80);
            tblDetalle.getColumnModel().getColumn(3).setPreferredWidth(120);
            tblDetalle.getColumnModel().getColumn(3).setMaxWidth(150);
            tblDetalle.getColumnModel().getColumn(4).setMinWidth(80);
            tblDetalle.getColumnModel().getColumn(4).setPreferredWidth(120);
            tblDetalle.getColumnModel().getColumn(4).setMaxWidth(150);
            tblDetalle.getColumnModel().getColumn(5).setMinWidth(40);
            tblDetalle.getColumnModel().getColumn(5).setPreferredWidth(60);
            tblDetalle.getColumnModel().getColumn(5).setMaxWidth(90);
        }

        txtTotalCreditos.setEditable(false);
        txtTotalCreditos.setBackground(new java.awt.Color(246, 253, 154));
        txtTotalCreditos.setColumns(10);
        txtTotalCreditos.setForeground(new java.awt.Color(10, 45, 243));
        txtTotalCreditos.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtTotalCreditos.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalCreditos.setText("0.00");
        txtTotalCreditos.setFocusable(false);
        txtTotalCreditos.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        txtTotalCreditos.setRequestFocusEnabled(false);

        txtBalance.setEditable(false);
        txtBalance.setBackground(new java.awt.Color(246, 253, 154));
        txtBalance.setColumns(10);
        txtBalance.setForeground(java.awt.Color.blue);
        txtBalance.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtBalance.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtBalance.setText("0.00");
        txtBalance.setFocusable(false);
        txtBalance.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        txtBalance.setRequestFocusEnabled(false);

        txtTotalDebitos.setEditable(false);
        txtTotalDebitos.setBackground(new java.awt.Color(246, 253, 154));
        txtTotalDebitos.setColumns(10);
        txtTotalDebitos.setForeground(new java.awt.Color(10, 45, 243));
        txtTotalDebitos.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtTotalDebitos.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalDebitos.setText("0.00");
        txtTotalDebitos.setFocusable(false);
        txtTotalDebitos.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        txtTotalDebitos.setRequestFocusEnabled(false);

        jLabel10.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel10.setText("Débitos");

        jLabel11.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel11.setText("Créditos");

        jLabel12.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel12.setText("Balance");

        lblAnuladoPor.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        lblAnuladoPor.setForeground(new java.awt.Color(255, 0, 33));
        lblAnuladoPor.setText(" ");
        lblAnuladoPor.setToolTipText("Número de asiento que reversó a este asiento");

        lblAnulaA.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        lblAnulaA.setForeground(new java.awt.Color(255, 0, 33));
        lblAnulaA.setText(" ");
        lblAnulaA.setToolTipText("Número de asiento que fue reversado por este asiento");

        mnuArchivo.setText("Archivo");

        mnuGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        mnuGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/disk.png"))); // NOI18N
        mnuGuardar.setText("Guardar");
        mnuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuGuardarActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuGuardar);

        mnuSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.CTRL_MASK));
        mnuSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/control-power.png"))); // NOI18N
        mnuSalir.setText("Salir");
        mnuSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSalirActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuSalir);

        jMenuBar1.add(mnuArchivo);

        mnuEdicion.setText("Edición");

        mnuAnular.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, java.awt.event.InputEvent.CTRL_MASK));
        mnuAnular.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/cross.png"))); // NOI18N
        mnuAnular.setText("Anular asiento");
        mnuAnular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAnularActionPerformed(evt);
            }
        });
        mnuEdicion.add(mnuAnular);

        mnuBuscar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        mnuBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/binocular.png"))); // NOI18N
        mnuBuscar.setText("Buscar");
        mnuBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuBuscarActionPerformed(evt);
            }
        });
        mnuEdicion.add(mnuBuscar);

        jMenuBar1.add(mnuEdicion);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDescrip, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8)
                                .addComponent(lblAnuladoPor, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblAnulaA, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTotalDebitos)
                        .addGap(51, 51, 51)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTotalCreditos)
                        .addGap(42, 42, 42)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtBalance)
                        .addGap(28, 28, 28))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtBalance, txtTotalCreditos, txtTotalDebitos});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblAnulaA, lblAnuladoPor});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtDescrip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAnuladoPor)
                    .addComponent(lblAnulaA))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTotalCreditos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBalance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTotalDebitos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addGap(8, 8, 8))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtDescripActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDescripActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDescripActionPerformed

    private void txtCuentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCuentaActionPerformed
        txtCuenta.transferFocus();
    }//GEN-LAST:event_txtCuentaActionPerformed

    private void txtCuentaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCuentaFocusGained
        txtCuenta.selectAll();
        this.buscar = this.BUSCAR_CUENTA;
    }//GEN-LAST:event_txtCuentaFocusGained

    private void txtCuentaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCuentaFocusLost
        this.lblNom_cta.setText("");

        if (txtCuenta.getText().trim().isEmpty()) {
            return;
        } // end if

        if (txtCuenta.getText().trim().length() != 12) {
            JOptionPane.showMessageDialog(null,
                    "La longitud de la cuenta no es apropiada.\n"
                    + "Esta debe ser de 12 dígitos.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if

        // Validar que la cuenta exista
        cta.setCuentaString(txtCuenta.getText().trim());
        if (cta.isError()) {
            JOptionPane.showMessageDialog(null,
                    cta.getMensaje_error(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if

        if (cta.getNom_cta().isEmpty()) {
            JOptionPane.showMessageDialog(null,
                    "Esta cuenta no existe.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if

        // Validar que la cuenta sea de movimientos
        if (cta.getNivel() == 0) {
            JOptionPane.showMessageDialog(null,
                    "No puede utilizar esta cuenta porque es de mayor.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if

        this.lblNom_cta.setText(cta.getNom_cta());
    }//GEN-LAST:event_txtCuentaFocusLost

    private void txtCuentaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCuentaKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            // Si la longitud de la cuenta es inferior a 12
            // relleno con cerros a la derecha.
            String tmp = txtCuenta.getText().trim();
            if (tmp.length() < 12) {
                tmp = Ut.rpad(tmp, "0", 12);
                txtCuenta.setText(tmp);
            } // end if
            txtCuenta.transferFocus();
        } // end if
    }//GEN-LAST:event_txtCuentaKeyPressed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        // Verifico si hay datos sin guardar
        // Si hay datos advierto al usuario
        if (Ut.countNotNull(tblDetalle, 0) > 0) {
            if (JOptionPane.showConfirmDialog(null,
                    "No ha guardado el asiento.\n"
                    + "Si continúa perderá los datos.\n"
                    + "\n¿Realmente desea salir?",
                    "Advertencia",
                    JOptionPane.YES_NO_OPTION) != JOptionPane.YES_OPTION) {
                return;
            } // end if
        } // end if

        fin = true;

        try {
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(RegistroAsientos.class.getName()).log(Level.SEVERE, null, ex);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
        dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void txtNo_comprobFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNo_comprobFocusGained
        txtNo_comprob.selectAll();
        this.buscar = this.BUSCAR_ASIENTO;
    }//GEN-LAST:event_txtNo_comprobFocusGained

    private void txtNo_comprobFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNo_comprobFocusLost
        if (txtNo_comprob.getText().trim().isEmpty()) {
            return;
        } // end if

        // Obtener el tipo de asiento
        short tipo = 0;
        String descrip = cboDescrip.getSelectedItem().toString();
        for (String s : this.aTipo_comp) {
            if (s.contains(descrip)) {
                tipo = Short.parseShort(s.substring(0, Ut.getPosicion(s, ",")));
                break;
            } // end if
        } // end for

        asientoE.setTipo_comp(tipo);
        asientoE.setNo_comprob(txtNo_comprob.getText());

        lblAnuladoPor.setText("");
        if (asientoE.getAnuladoPor() != null) {
            lblAnuladoPor.setText("Anulado por: " + asientoE.getAnuladoPor());
        } // end if

        lblAnulaA.setText("Anula a: " + asientoE.getAsientoAnulado());
        if (asientoE.getAsientoAnulado().isEmpty()) {
            lblAnulaA.setText("");
        } // end if

        // Si la propiedad old_comprob tiene algún valor no hago la validación
        // porque se asume que el usuario va a modificar el asiento.
        if (!old_comprob.trim().isEmpty()) {
            return;
        } // end if

        // Valido que el asiento no exista.
        if (!asientoE.getDescrip().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null,
                    "El asiento ya existe.\n"
                    + "Debe usar otro número u otro tipo de asiento.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            // Dejo este campo en blanco para evitar que se guarde el asiento.
            txtNo_comprob.setText("");
        } // end if

    }//GEN-LAST:event_txtNo_comprobFocusLost

    private void btnBuscarAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarAsActionPerformed
        Buscador bd = new Buscador(
                new java.awt.Frame(),
                true,
                "coasientoe",
                "no_comprob,Trim(descrip) as descrip,fecha_comp,tipo_comp",
                "descrip",
                txtNo_comprob,
                conn,
                3,
                new String[]{"Asiento", "Descripción", "Fecha", "Tipo"}
        );
        bd.setTitle("Buscar asientos");
        bd.lblBuscar.setText("Descripción:");
        bd.setOrderByColumn(2, "ASC"); // Número de columna y tipo de orden.
        bd.setObjetoRetorno2(this.tmp_tipo, 3);
        bd.setVisible(true);

        // Validar los datos de retorno
        if (txtNo_comprob.getText().trim().isEmpty()) {
            return;
        } // end if

        short tipo = Short.parseShort(this.tmp_tipo.getText().trim());

        if (tipo == 0) {
            return;
        } // end if

        // Cargar los datos en la clase de encabezado de asientos
        asientoE = new CoasientoE(conn);
        asientoE.setNo_comprob(txtNo_comprob.getText());
        asientoE.setTipo_comp(tipo);

        // Si el asiento existe cargo los valores tanto en los controles
        // actuales como en los anteriores para que siempre se pueda saber
        // cuál era el número y el tipo por si el usuario decide cambiar
        // alguno o ambos datos.
        old_comprob = txtNo_comprob.getText().trim();
        old_tipo = tipo;

        txtDescrip.setText(asientoE.getDescrip());

        // aTipo_comp es un arreglo que se carga al inicio de este form.
        // Concatena el tipo y la descripción separados por una coma.
        String wrk;
        for (String s : aTipo_comp) {
            wrk = s.substring(0, Ut.getPosicion(s, ",")).trim();
            if (Short.parseShort(wrk) == tipo) {
                wrk = s.substring(Ut.getPosicion(s, ",") + 1);
                cboDescrip.setSelectedItem(wrk);
                break;
            } // end if
        } // end for

        txtNo_refer.setText(asientoE.getNo_refer() + "");
        datFecha_comp.setDate(asientoE.getFecha_comp());

        lblAnuladoPor.setText("Anulado por: " + asientoE.getAnuladoPor());
        if (asientoE.getAnuladoPor().isEmpty()) {
            lblAnuladoPor.setText("");
        } // end if

        lblAnulaA.setText("Anula a: " + asientoE.getAsientoAnulado());
        if (asientoE.getAsientoAnulado().isEmpty()) {
            lblAnulaA.setText("");
        } // end if

        // Cargar el detalle del asiento en la clase de detalle
        asientoD = new CoasientoD(conn);
        asientoD.setNo_comprob(asientoE.getNo_comprob());
        asientoD.setTipo_comp(asientoE.getTipo_comp());

        // Ampliar la tabla.
        DefaultTableModel dtm = (DefaultTableModel) tblDetalle.getModel();
        if (dtm.getRowCount() < asientoD.getCoasientod().length) {
            dtm.setRowCount(asientoD.getCoasientod().length);
        } // end if

        tblDetalle.setModel(dtm);

        // Limpiar la tabla
        Ut.clearJTable(tblDetalle);

        boolean isDebito;

        // Cargar la tabla.
        for (int row = 0; row < asientoD.getCoasientod().length; row++) {
            tblDetalle.setValueAt(asientoD.getCoasientod()[row].getCuenta().getCuentaString(), row, 0);
            tblDetalle.setValueAt(asientoD.getCoasientod()[row].getCuenta().getNom_cta(), row, 1);
            tblDetalle.setValueAt(asientoD.getCoasientod()[row].getDescrip(), row, 2);
            isDebito = (asientoD.getCoasientod()[row].getDb_cr() == 1);
            tblDetalle.setValueAt((isDebito ? asientoD.getCoasientod()[row].getMonto() : 0.00), row, 3);
            tblDetalle.setValueAt((!isDebito ? asientoD.getCoasientod()[row].getMonto() : 0.00), row, 4);
            tblDetalle.setValueAt(asientoD.getCoasientod()[row].getIdReg(), row, 5);
        } // end for

        // Cargar los totales
        try {
            txtTotalDebitos.setText(
                    Ut.setDecimalFormat(asientoD.getTotalDebito() + "", "#,##0.00"));
            txtTotalCreditos.setText(
                    Ut.setDecimalFormat(asientoD.getTotalCredito() + "", "#,##0.00"));
            this.txtBalance.setText(
                    Ut.setDecimalFormat(asientoD.getTotalDebito() - asientoD.getTotalCredito() + "", "#,##0.00"));

        } catch (Exception ex) {
            Logger.getLogger(RegistroAsientos.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch

    }//GEN-LAST:event_btnBuscarAsActionPerformed

    private void btnBuscarCuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarCuActionPerformed
        JTextField field = new JTextField("");
        Buscador bd = new Buscador(new java.awt.Frame(), true,
                "vistacocatalogo",
                "cuenta,nom_cta", "nom_cta", field, conn);
        bd.setTitle("Buscar cuentas");
        bd.lblBuscar.setText("Nombre de la cuenta");
        bd.setVisible(true);
        cta.setCuentaString(field.getText().trim());
        if (cta.isError()) {
            JOptionPane.showMessageDialog(null,
                    cta.getMensaje_error(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if
        this.txtCuenta.setText(field.getText().trim());
        this.txtCuentaFocusLost(null);
        this.txtConcepto.requestFocusInWindow();
    }//GEN-LAST:event_btnBuscarCuActionPerformed

    private void txtNo_comprobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNo_comprobActionPerformed
        txtNo_comprob.transferFocus();
    }//GEN-LAST:event_txtNo_comprobActionPerformed

    private void cboDescripActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboDescripActionPerformed
        // Si la propiedad old_tipo tiene algún valor distinto de cero no hago 
        // la validación porque se asume que el usuario va a modificar el asiento.
        if (old_tipo != 0) {
            return;
        } // end if

        // Si el número de asiento no está vacío ejecuto el codigo del 
        // ActionPerformed para ese campo.
        if (!txtNo_comprob.getText().trim().isEmpty()) {
            txtNo_comprobActionPerformed(null);
        } // end if
        cboDescrip.transferFocus();
    }//GEN-LAST:event_cboDescripActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // Validaciones.
        /*
         * En el caso de este botón solo se necesita validar que el asiento
         * esté balanceado y que el monto de cualquiera, ya sea débtos o créditos
         * sea mayor que cero.
         * El resto de las condiciones ya fue validado antes de agregar cualquier
         * línea de detalle al asiento.
         */
        double debitos, creditos, balance;
        byte db_cr;
        int idReg;
        Calendar cal;

        // Esta clase aplica o desaplica un asiento o rango de asientos (por fecha).
        CoactualizCat actuCat = new CoactualizCat(conn);

        cal = GregorianCalendar.getInstance();
        cal.setTime(this.datFecha_comp.getDate());

        // Si la fecha del asiento se encuentra en el perido actual hay que mayorizar.
        if (cal.get(Calendar.MONTH) == pc.getMes() && cal.get(Calendar.YEAR) == pc.getAño()) {
            actuCat.setMayorizar(true);
        } // end if

        try {
            debitos = Double.parseDouble(
                    Ut.quitarFormato(this.txtTotalDebitos.getText().trim()));
            balance = Double.parseDouble(
                    Ut.quitarFormato(this.txtBalance.getText().trim()));
        } catch (Exception ex) {
            Logger.getLogger(RegistroAsientos.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return;
        } // end try-catch

        if (balance != 0) {
            JOptionPane.showMessageDialog(null,
                    "El asiento está descuadrado.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if

        // Si el balance es cero y también los débitos significa que no hay
        // detalle en el asiento.
        if (balance == 0 && debitos == 0) {
            JOptionPane.showMessageDialog(null,
                    "El asiento no tiene detalle.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if
        // Fin de validaciones

        /*
         * Averiguar si es una modificación al asiento o si es nuevo.
         * Si es una modificación el campo old_comprob no estará vacío.
         * 
         * Para modificar una línea de detalle se usa el campo idReg como
         * llave ya que es único.  Si se agrega una línea al asiento o se
         * crea un asiento nuevo este campo estará en cero.
         */
        // Si ya existe el asiento y (old_comprob es diferente de no_comprob
        // o old_tipo es diferente de tipo) hay que correr el método rename() 
        // de la clase CoasientoE
        String no_comprob = this.txtNo_comprob.getText().trim();
        short tipo = 0;
        String descrip = cboDescrip.getSelectedItem().toString();

        for (String s : this.aTipo_comp) {
            if (s.contains(descrip)) {
                tipo = Short.parseShort(s.substring(0, Ut.getPosicion(s, ",")));
                break;
            } // end if
        } // end for

        try {
            // Iniciar la transacción
            CMD.transaction(conn, CMD.START_TRANSACTION);
        } catch (SQLException ex) {
            Logger.getLogger(RegistroAsientos.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showConfirmDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return;
        } // end try-catch

        if (!old_comprob.isEmpty() && (!old_comprob.trim().equals(no_comprob)
                || old_tipo != tipo)) {
            asientoE.rename(old_comprob, no_comprob, old_tipo, tipo);
            if (asientoE.isError()) {
                JOptionPane.showMessageDialog(null,
                        asientoE.getMensaje_error(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                try {
                    CMD.transaction(conn, CMD.ROLLBACK);
                } catch (SQLException ex) {
                    Logger.getLogger(RegistroAsientos.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showConfirmDialog(null,
                            ex.getMessage()
                            + "El sistema se cerrará para proteger la integridad de los datos.",
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                    b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
                    System.exit(0);
                } // end try-catch
                return;
            } // end if
        } // end if

        Timestamp fecha_comp = new Timestamp(this.datFecha_comp.getDate().getTime());
        short movtido = 0; // Tipo de movimiento para Contabilidad

        asientoE.setNo_comprob(no_comprob);
        asientoE.setTipo_comp(tipo);
        asientoE.setDescrip(this.txtDescrip.getText().trim());
        asientoE.setFecha_comp(fecha_comp);
        asientoE.setUsuario(Menu.USUARIOBD);

        // Si el asiento ya existe no se deben modificar estos campos
        if (old_comprob.isEmpty()) {
            asientoE.setModulo("CON"); // Contabilidad General
            asientoE.setDocumento("");
            asientoE.setMovtido(movtido);
            asientoE.setEnviado(false);
        } // end if

        // Si ocurrió algún error durante la inicialización de campos
        // entonces cancelo la transacción.
        if (asientoE.isError()) {
            JOptionPane.showMessageDialog(null,
                    asientoE.getMensaje_error(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            try {
                CMD.transaction(conn, CMD.ROLLBACK);
            } catch (SQLException ex) {
                Logger.getLogger(RegistroAsientos.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showConfirmDialog(null,
                        ex.getMessage()
                        + "El sistema se cerrará para proteger la integridad de los datos.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
                System.exit(0);
            } // end try-catch
            return;
        } // end if (asientoE.isError())

        // Si old_comprob está vacío es porque se trata de un asiento nuevo.
        if (old_comprob.isEmpty()) {
            // Inserta un registro en la tabla encabezado de asientos
            asientoE.insert();
        } else {
            // Actualiza los datos del encabezado del asiento
            asientoE.update();

            // Hay que actualizarCuentasMov antes de guardar el nuevo detalle
            if (actuCat.actualizarCuentasMov(fecha_comp, fecha_comp, no_comprob, tipo, "-") == false) {
                JOptionPane.showMessageDialog(null,
                        actuCat.getMensaje_err(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                try {
                    CMD.transaction(conn, CMD.ROLLBACK);
                } catch (SQLException ex) {
                    Logger.getLogger(RegistroAsientos.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showConfirmDialog(null,
                            ex.getMessage()
                            + "El sistema se cerrará para proteger la integridad de los datos.",
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                    b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
                    System.exit(0);
                } // end try-catch
                return;
            } // end if actuCat.actualizarCuentasMov...
        } // end if

        // Si ocurrió algún error durante la actualización del encabezado...
        if (asientoE.isError()) {
            JOptionPane.showMessageDialog(null,
                    asientoE.getMensaje_error(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            try {
                CMD.transaction(conn, CMD.ROLLBACK);
            } catch (SQLException ex) {
                Logger.getLogger(RegistroAsientos.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showConfirmDialog(null,
                        ex.getMessage()
                        + "El sistema se cerrará para proteger la integridad de los datos.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
                System.exit(0);
            } // end try-catch
            return;
        } // end if (asientoE.isError())

        // Si id del registro en la tabla es negativo se trata de un registro 
        // nuevo por lo que debe ejecutarse un insert; caso contrario será un update.
        asientoD.setNo_comprob(no_comprob);
        asientoD.setTipo_comp(tipo);
        asientoD.setCuenta(cta);

        // Si ocurrió algún error durante la inicialización del detalle...
        if (asientoD.isError()) {
            JOptionPane.showMessageDialog(null,
                    asientoD.getMensaje_error(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            try {
                CMD.transaction(conn, CMD.ROLLBACK);
            } catch (SQLException ex) {
                Logger.getLogger(RegistroAsientos.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showConfirmDialog(null,
                        ex.getMessage()
                        + "El sistema se cerrará para proteger la integridad de los datos.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
                System.exit(0);
            } // end try-catch
            return;
        } // end if (asientoD.isError())

        debitos = 0;
        creditos = 0;
        idReg = 0;
        for (int i = 0; i < this.tblDetalle.getModel().getRowCount(); i++) {
            if (this.tblDetalle.getValueAt(i, 0) == null) {
                continue;
            } // end if
            cta.setCuentaString(this.tblDetalle.getValueAt(i, 0).toString());
            asientoD.setDescrip(this.tblDetalle.getValueAt(i, 2).toString()); // Concepto
            try {
                debitos = Double.parseDouble(
                        Ut.quitarFormato(this.tblDetalle.getValueAt(i, 3).toString()));
                creditos = Double.parseDouble(
                        Ut.quitarFormato(this.tblDetalle.getValueAt(i, 4).toString()));
                idReg = Integer.parseInt(this.tblDetalle.getValueAt(i, 5).toString());
            } catch (Exception ex) {
                Logger.getLogger(RegistroAsientos.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null,
                        ex.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
                try {
                    CMD.transaction(conn, CMD.ROLLBACK);
                } catch (SQLException ex1) {
                    Logger.getLogger(RegistroAsientos.class.getName()).log(Level.SEVERE, null, ex1);
                    JOptionPane.showConfirmDialog(null,
                            ex.getMessage()
                            + "El sistema se cerrará para proteger la integridad de los datos.",
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                    b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
                    System.exit(0);
                    return;
                } // end try-catch interno
            } // end try-catch

            db_cr = (byte) (debitos > 0 ? 1 : 0);
            asientoD.setMonto(debitos + creditos);
            asientoD.setDb_cr(db_cr);

            if (idReg > 0) {
                asientoD.setIdReg(idReg);
                // Si tanto los débitos como los créditos están en cero es
                // porque se trata de una eliminación.
                if (debitos + creditos == 0) {
                    asientoD.delete();
                } else {
                    asientoD.update();
                } // end if-else
            } else {
                asientoD.insert();
            } // end if (idReg > 0) - else

            // Si ocurrió algún error durante la actualización del detalle...
            if (asientoD.isError()) {
                JOptionPane.showMessageDialog(null,
                        asientoD.getMensaje_error(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                try {
                    CMD.transaction(conn, CMD.ROLLBACK);
                } catch (SQLException ex) {
                    Logger.getLogger(RegistroAsientos.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showConfirmDialog(null,
                            ex.getMessage()
                            + "El sistema se cerrará para proteger la integridad de los datos.",
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                    b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
                    System.exit(0);
                } // end try-catch
                return;
            } // end if (asientoD.isError())
        } // end for

        // Ahora hay que correr el proceso de actualización del catálogo
        if (actuCat.actualizarCuentasMov(fecha_comp, fecha_comp, no_comprob, tipo, "+") == false) {
            JOptionPane.showMessageDialog(null,
                    actuCat.getMensaje_err(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            try {
                CMD.transaction(conn, CMD.ROLLBACK);
            } catch (SQLException ex) {
                Logger.getLogger(RegistroAsientos.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showConfirmDialog(null,
                        ex.getMessage()
                        + "El sistema se cerrará para proteger la integridad de los datos.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
                System.exit(0);
            } // end try-catch
            return;
        } // end if actuCat.actualizarCuentasMov...

        // Si todo está bien confirmo la transacción.
        try {
            CMD.transaction(conn, CMD.COMMIT);
        } catch (SQLException ex) {
            Logger.getLogger(RegistroAsientos.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showConfirmDialog(null,
                    ex.getMessage()
                    + "El sistema se cerrará para proteger la integridad de los datos.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            System.exit(0);
            return;
        } // end try-catch

        // Esto se hace al final del guardado.
        // Me aseguro de que los campos que indican que se trata de un asiento
        // modificado queden vacíos.
        old_tipo = 0;
        old_comprob = "";
        JOptionPane.showMessageDialog(null,
                "Asiento guardado satisfactoriamente.",
                "Mensaje",
                JOptionPane.INFORMATION_MESSAGE);
        this.btnNuevoActionPerformed(evt);
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void datFecha_compPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_datFecha_compPropertyChange
        // Verificar que el período no esté cerrado.

        // Si estas variables son true no se debe correr el proceso o en el caso
        // de conn tampoco porque esto significa que aún no se ha terminado de
        // inicializar el formulario
        if (this.inicio || this.fin || conn == null) {
            return;
        } // end if

        // Deshabilito el campo de la cuenta y solo se habilita si la fecha
        // es una fecha aceptable.
        this.datFecha_comp.setEnabled(false);
        if (this.validandoFecha) {
            return;
        } // end if

        this.validandoFecha = true;

        // Traer el período en proceso.
        String sqlSent
                = "Select mesactual,añoactual from configcuentas";
        short mesactual = 0, añoactual = 0;
        String mensajeError;
        PreparedStatement ps;
        ResultSet rs;
        try {
            ps = conn.prepareStatement(sqlSent,
                    ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs = CMD.select(ps);
            if (rs != null && rs.first()) {
                mesactual = rs.getShort("mesactual");
                añoactual = rs.getShort("añoactual");
            } // end if
            ps.close();
        } catch (SQLException ex) {
            Logger.getLogger(RegistroAsientos.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return;
        } // end try-catch

        // Si el sistema se encuentra en período de cierre anual no valido el
        // rango de fechas.
        // Aquí hay una potencial falla, el usuario podría ingresar cualquier
        // fecha lo cual no estaría bien.  Pero esto solo le causaría problemas
        // al mismo usuario ya que ese asiento solo puede ser mayorizado si se
        // encuentra en el rango de fechas correcto.  Es decir, si el usuario 
        // digita una fecha distinta del mes de cierre fiscal entonces no se le
        // actualizará. Bosco 10/11/2013.
        if (mesactual != 13) {
            sqlSent
                    = "Select cerrado from coperiodoco "
                    + "Where mes = ? and año = ?";
            try {
                ps = conn.prepareStatement(sqlSent,
                        ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                ps.setShort(1, mesactual);
                ps.setShort(2, añoactual);
                rs = CMD.select(ps);
                if (rs != null && rs.first()) {
                    mensajeError = rs.getBoolean("cerrado") ? "Esta fecha pertenece a un período cerrado" : "";
                } else {
                    mensajeError = "El período no ha sido definido para esta fecha";
                } // end if-else

                // No valido el rango de fechas para permitir que se puedan
                // ingresar asientos con fechas futuras.
                ps.close();
            } catch (SQLException ex) {
                Logger.getLogger(RegistroAsientos.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null,
                        ex.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                this.datFecha_comp.setEnabled(false);
                b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
                return;
            } // end try-catch

            this.datFecha_comp.setEnabled(true);
            // Si la variable del mensaje no está vacía despliego el error y
            // deshabilito el botón que agrega el detalle del asiento con el
            // fin de evitar que el usuario pueda guardar algo erróneo.
            if (!mensajeError.isEmpty()) {
                JOptionPane.showMessageDialog(null,
                        mensajeError,
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                this.datFecha_comp.setEnabled(false);
                return;
            } // end if

            // Formar la referencia (mes + tipo de asiento + año)
            String ref
                    = "" + (datFecha_comp.getCalendar().get(Calendar.MONTH) + 1)
                    + asientoE.getTipo_comp()
                    + datFecha_comp.getCalendar().get(Calendar.YEAR);
            this.txtNo_refer.setText(ref);

        } // end if (mesactual != 13)

        this.validandoFecha = false;
    }//GEN-LAST:event_datFecha_compPropertyChange
    /**
     * Este método pone en blanco todos los controles para que el usuario pueda
     * ingresar nuevos datos.
     *
     * @author Bosco Garita Azofeifa 16/11/2013
     * @param evt
     */
    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        this.txtDescrip.setText("");
        this.cboDescrip.setSelectedIndex(0);
        this.old_tipo = 0;
        this.txtNo_comprob.setText("");
        this.old_comprob = "";
        this.datFecha_comp.setDate(new Date());
        this.txtNo_refer.setText("0");
        this.txtCuenta.setText("");
        this.lblNom_cta.setText("");
        this.txtConcepto.setText("");
        this.txtMontoD.setText("0");
        this.txtMontoC.setText("0");
        Ut.clearJTable(tblDetalle);
        this.txtTotalDebitos.setText("0");
        this.txtTotalCreditos.setText("0");
        this.txtBalance.setText("0");
        this.lblAnulaA.setText("");
        this.lblAnuladoPor.setText("");

        // Habilito los campos del encabezado.
        // Estos cambpos se deshabilitan al momento de bajar los datos al JTable
        this.txtDescrip.setEditable(true);
        this.cboDescrip.setEnabled(true);
        this.txtNo_comprob.setEnabled(true);
        this.datFecha_comp.setEnabled(true);
        this.txtNo_refer.setEnabled(true);
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void txtDescripFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDescripFocusGained
        txtDescrip.selectAll();
        this.buscar = this.BUSCAR_ASIENTO;
    }//GEN-LAST:event_txtDescripFocusGained

    private void txtDescripKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDescripKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            txtDescrip.transferFocus();
        } // end if
    }//GEN-LAST:event_txtDescripKeyPressed

    private void txtNo_comprobKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNo_comprobKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            txtNo_comprob.transferFocus();
        } // end if
    }//GEN-LAST:event_txtNo_comprobKeyPressed

    private void datFecha_compKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_datFecha_compKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            datFecha_comp.transferFocus();
        } // end if
    }//GEN-LAST:event_datFecha_compKeyPressed

    private void txtNo_referKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNo_referKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            this.txtCuenta.requestFocusInWindow();
        } // end if
    }//GEN-LAST:event_txtNo_referKeyPressed

    private void txtConceptoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtConceptoKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            txtConcepto.transferFocus();
        } // end if
    }//GEN-LAST:event_txtConceptoKeyPressed

    private void txtMontoDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMontoDKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            txtMontoD.transferFocus();
        } // end if
    }//GEN-LAST:event_txtMontoDKeyPressed

    private void txtMontoCKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMontoCKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            txtMontoC.transferFocus();
        } // end if
    }//GEN-LAST:event_txtMontoCKeyPressed

    private void txtNo_referFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNo_referFocusGained
        txtNo_refer.selectAll();
        this.buscar = this.BUSCAR_ASIENTO;
    }//GEN-LAST:event_txtNo_referFocusGained

    private void txtConceptoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtConceptoFocusGained
        txtConcepto.selectAll();
        this.buscar = this.BUSCAR_CUENTA;
    }//GEN-LAST:event_txtConceptoFocusGained

    private void txtMontoDFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMontoDFocusGained
        txtMontoD.selectAll();
        this.buscar = this.BUSCAR_CUENTA;
    }//GEN-LAST:event_txtMontoDFocusGained

    private void txtMontoCFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMontoCFocusGained
        txtMontoC.selectAll();
        this.buscar = this.BUSCAR_CUENTA;
    }//GEN-LAST:event_txtMontoCFocusGained

    private void mnuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuGuardarActionPerformed
        //cmdGuardarActionPerformed(evt);
    }//GEN-LAST:event_mnuGuardarActionPerformed

    private void mnuSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSalirActionPerformed
        dispose();
    }//GEN-LAST:event_mnuSalirActionPerformed

    private void mnuAnularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAnularActionPerformed
//        String cuenta =
//        txtMayor.getText().trim() +
//        txtSub_cta.getText().trim() +
//        txtSub_sub.getText().trim() +
//        txtColect.getText().trim();
//
//        eliminarRegistro(cuenta);
    }//GEN-LAST:event_mnuAnularActionPerformed

    private void mnuBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuBuscarActionPerformed
        if (this.buscar == this.BUSCAR_CUENTA) {
            this.btnBuscarCuActionPerformed(evt);
        } else {
            this.btnBuscarAsActionPerformed(evt);
        } // end if-else
    }//GEN-LAST:event_mnuBuscarActionPerformed

    private void cboDescripFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cboDescripFocusGained
        this.buscar = this.BUSCAR_ASIENTO;
    }//GEN-LAST:event_cboDescripFocusGained

    private void btnBajarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBajarActionPerformed
        // Validaciones
        if (this.txtDescrip.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null,
                    "La descripción no debe quedar en blanco.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            this.txtDescrip.requestFocusInWindow();
            return;
        } // end if

        if (this.txtNo_comprob.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null,
                    "El número de asiento no puede quedar en blanco.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            this.txtNo_comprob.requestFocusInWindow();
            return;
        } // end if

        // Si el campo de cuenta está deshabilitado es porque una validación
        // de fecha no fue exitosa.
        if (!this.txtCuenta.isEnabled()) {
            JOptionPane.showMessageDialog(null,
                    "Hay un error con la fecha del asiento, verifique.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            this.datFecha_comp.requestFocusInWindow();
            return;
        } // end if

        if (this.txtCuenta.getText().trim().isEmpty()
                || this.lblNom_cta.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null,
                    "Debe dígitar una cuenta.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            this.txtCuenta.requestFocusInWindow();
            return;
        } // end if

        // Validar que haya algún monto en los débitos o créditos
        double debitos, creditos, balance;
        try {
            debitos = Double.parseDouble(
                    Ut.quitarFormato(this.txtMontoD.getText().trim()));
            creditos = Double.parseDouble(
                    Ut.quitarFormato(this.txtMontoC.getText().trim()));

            if (debitos < 0 || creditos < 0) {
                JOptionPane.showMessageDialog(null,
                        "No se permiten débitos o créditos negativos.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                this.txtMontoD.requestFocusInWindow();
                return;
            } // end if

            // Si evt viene nulo fue porque el método fue invocado desde
            // el botón borrar.  Esto se hace para que cuando se guarde el
            // asiento la clase AsientoD elimine de la base de datos todas
            // aquellas líneas que van en cero.
            if (debitos == 0 && creditos == 0 && evt != null) {
                JOptionPane.showMessageDialog(null,
                        "Esta línea no tiene débitos ni créditos.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                this.txtMontoD.requestFocusInWindow();
                return;
            } // end if
        } catch (Exception ex) {
            Logger.getLogger(RegistroAsientos.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return;
        } // end try-catch
        // Fin validaciones

        /*
         * La etiqueta lblidReg puede tener los siguientes valores:
         * 0   = Registro nuevo
         * > 0 = Registro existente en la base de datos
         * < 0 = Registro nuevo en este asiento pero ya en la tabla
         */
        int idReg = Integer.parseInt(lblidReg.getText().trim());
        int fila = 0;

        if (idReg == 0) {
            // Antes de trasladar el valor a la tabla hay que verificar si hay
            // espacio y si no, hay que ampliar la tabla.
            fila = Ut.seekNull(tblDetalle, 0);
            if (fila < 0) {
                Ut.resizeTable(tblDetalle, 1, "Filas");
                fila = Ut.seekNull(tblDetalle, 0);
            } // end if

            // Si el registro es nuevo hay que establecer el consecutivo.
            idReg = Ut.getMin(tblDetalle, 5);
            idReg--;
        } else if (Ut.seek(tblDetalle, idReg, 5)) {
            fila = tblDetalle.getSelectedRow();
        } else {
            JOptionPane.showMessageDialog(null,
                    "No fue posible ubicar el dato en la tabla.\n"
                    + "Borre la línea e intente nuevamente.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if

        tblDetalle.setValueAt(this.txtCuenta.getText(), fila, 0);
        tblDetalle.setValueAt(this.lblNom_cta.getText(), fila, 1);
        tblDetalle.setValueAt(this.txtConcepto.getText(), fila, 2);
        tblDetalle.setValueAt(this.txtMontoD.getText(), fila, 3);
        tblDetalle.setValueAt(this.txtMontoC.getText(), fila, 4);
        tblDetalle.setValueAt(idReg, fila, 5);

        try {
            // Totalizo los débitos y los créditos para calcular el balance
            debitos = (double) Ut.sum(tblDetalle, 3);
            creditos = (double) Ut.sum(tblDetalle, 4);
            balance = debitos - creditos;
            this.txtTotalDebitos.setText(Ut.setDecimalFormat(debitos + "", "#,##0.00"));
            this.txtTotalCreditos.setText(Ut.setDecimalFormat(creditos + "", "#,##0.00"));
            this.txtBalance.setText(Ut.setDecimalFormat(balance + "", "#,##0.00"));

            // Cambio los colores para dar una alerta visual al usuario cuando
            // el asiento está descuadrado.
            if (balance != 0) {
                this.txtBalance.setForeground(Color.red);
            } else {
                this.txtBalance.setForeground(Color.blue);
            } // end if

            // Limpiar los campos para digitar más cuentas.
            this.txtCuenta.setText("");
            this.lblNom_cta.setText("");
            this.txtConcepto.setText("");
            this.txtMontoD.setText("0.00");
            this.txtMontoC.setText("0.00");
            lblidReg.setText("0");
        } catch (Exception ex) {
            Logger.getLogger(RegistroAsientos.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return;
        } // end try-catch

        // Si todo salió bien, procedo a deshabilitar el encabezado para evitar
        // posibles incongruencias a la hora de guardar.
        // Este encabezado será habilitado nuevamente al guardar el asiento.
        this.txtDescrip.setEditable(false);
        this.cboDescrip.setEnabled(false);
        this.txtNo_comprob.setEnabled(false);
        this.datFecha_comp.setEnabled(false);
        this.txtNo_refer.setEnabled(false);

        // Pongo el foco en el campo de cuenta
        this.txtCuenta.requestFocusInWindow();
    }//GEN-LAST:event_btnBajarActionPerformed

    private void txtMontoCFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMontoCFocusLost
        this.btnBajar.requestFocusInWindow();
    }//GEN-LAST:event_txtMontoCFocusLost

    private void tblDetalleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDetalleMouseClicked
        if (this.tblDetalle.getSelectedRow() < 0) {
            return;
        } // end if

        this.txtCuenta.setText(this.tblDetalle.getValueAt(
                this.tblDetalle.getSelectedRow(), 0).toString());
        this.lblNom_cta.setText(this.tblDetalle.getValueAt(
                this.tblDetalle.getSelectedRow(), 1).toString());
        this.txtConcepto.setText(this.tblDetalle.getValueAt(
                this.tblDetalle.getSelectedRow(), 2).toString());
        this.txtMontoD.setText(this.tblDetalle.getValueAt(
                this.tblDetalle.getSelectedRow(), 3).toString());
        this.txtMontoC.setText(this.tblDetalle.getValueAt(
                this.tblDetalle.getSelectedRow(), 4).toString());
        this.lblidReg.setText(this.tblDetalle.getValueAt(
                this.tblDetalle.getSelectedRow(), 5).toString());
    }//GEN-LAST:event_tblDetalleMouseClicked

    private void tblDetalleMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDetalleMouseEntered
        Cursor c = new Cursor(Cursor.HAND_CURSOR);
        this.setCursor(c);
    }//GEN-LAST:event_tblDetalleMouseEntered

    private void tblDetalleMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDetalleMouseExited
        this.setCursor(null);
    }//GEN-LAST:event_tblDetalleMouseExited

    private void btnBorrarCuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarCuActionPerformed
        if (this.tblDetalle.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(null,
                    "Debe seleccionar una línea en la tabla de detalle.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if
        this.txtMontoC.setText("0.00");
        this.txtMontoD.setText("0.00");
        this.btnBajarActionPerformed(null);
    }//GEN-LAST:event_btnBorrarCuActionPerformed

    private void btnAnularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnularActionPerformed
        if (this.old_comprob.isEmpty()) {
            JOptionPane.showMessageDialog(null,
                    "Para anular un asiento debe cargarlo antes.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if

        int lnRespuesta
                = JOptionPane.showConfirmDialog(null,
                        "¿Seguro que quiere anular este asiento?",
                        "Confirme..",
                        JOptionPane.YES_NO_OPTION);
        if (lnRespuesta == JOptionPane.NO_OPTION) {
            return;
        } // end if

        asientoE.setNo_comprob(this.old_comprob);
        asientoE.setTipo_comp(this.old_tipo);

        try {
            CMD.transaction(conn, CMD.START_TRANSACTION);
            asientoE.anular();

            if (asientoE.isError()) {
                JOptionPane.showMessageDialog(null,
                        asientoE.getMensaje_error(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                CMD.transaction(conn, CMD.ROLLBACK);
                return;
            } // end if

            // Esta clase aplica o desaplica un asiento o rango de asientos (por fecha).
            CoactualizCat actuCat = new CoactualizCat(conn);

            Calendar cal = GregorianCalendar.getInstance();
            cal.setTime(this.datFecha_comp.getDate());

            // Si la fecha del asiento se encuentra en el perido actual hay que 
            // aplicar los movimientos y mayorizar.
            if (cal.get(Calendar.MONTH) == pc.getMes() && cal.get(Calendar.YEAR) == pc.getAño()) {
                actuCat.setMayorizar(true);
                boolean exito
                        = actuCat.actualizarCuentasMov(
                                cal.getTime(), cal.getTime(),
                                asientoE.getAsientodeanulacion(),
                                this.old_tipo, "+");
                if (!exito) {
                    JOptionPane.showMessageDialog(null,
                            actuCat.getMensaje_err(),
                            "Error",
                            JOptionPane.ERROR_MESSAGE);

                    CMD.transaction(conn, CMD.ROLLBACK);
                    return;
                } // end if

            } // end if

            CMD.transaction(conn, CMD.COMMIT);
        } catch (SQLException ex) {
            Logger.getLogger(RegistroAsientos.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            try {
                CMD.transaction(conn, CMD.ROLLBACK);
            } catch (SQLException ex1) {
                Logger.getLogger(RegistroAsientos.class.getName()).log(Level.SEVERE, null, ex1);
                /*
                 Si en este bloque se presenta un error es porque hubo un problema
                 a nivel de base de datos y por lo tanto el sistema no debe continuar.
                 */
                JOptionPane.showMessageDialog(null,
                        "Se presentó un error a nivel de base de datos.\n"
                        + "El sistema se cerrará para proteger la integridad.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
                System.exit(2);
                return;
            } // end try-catch
        } // end try-catch

        if (!asientoE.isError()) {
            JOptionPane.showMessageDialog(null,
                    "Asiento anulado satisfactoriamente",
                    "Mensaje",
                    JOptionPane.INFORMATION_MESSAGE);
            this.btnNuevoActionPerformed(evt);
        } // end if

    }//GEN-LAST:event_btnAnularActionPerformed

    /**
     * @param c
     */
    public static void main(final Connection c) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistroAsientos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistroAsientos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistroAsientos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistroAsientos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new RegistroAsientos(c).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnular;
    private javax.swing.JButton btnBajar;
    private javax.swing.JButton btnBorrarCu;
    private javax.swing.JButton btnBuscarAs;
    private javax.swing.JButton btnBuscarCu;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnSalir;
    private javax.swing.JComboBox cboDescrip;
    private com.toedter.calendar.JDateChooser datFecha_comp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAnulaA;
    private javax.swing.JLabel lblAnuladoPor;
    private javax.swing.JLabel lblNom_cta;
    private javax.swing.JLabel lblidReg;
    private javax.swing.JMenuItem mnuAnular;
    private javax.swing.JMenu mnuArchivo;
    private javax.swing.JMenuItem mnuBuscar;
    private javax.swing.JMenu mnuEdicion;
    private javax.swing.JMenuItem mnuGuardar;
    private javax.swing.JMenuItem mnuSalir;
    private javax.swing.JTable tblDetalle;
    private javax.swing.JFormattedTextField txtBalance;
    private javax.swing.JTextField txtConcepto;
    private javax.swing.JFormattedTextField txtCuenta;
    private javax.swing.JTextField txtDescrip;
    private javax.swing.JFormattedTextField txtMontoC;
    private javax.swing.JFormattedTextField txtMontoD;
    private javax.swing.JFormattedTextField txtNo_comprob;
    private javax.swing.JFormattedTextField txtNo_refer;
    private javax.swing.JFormattedTextField txtTotalCreditos;
    private javax.swing.JFormattedTextField txtTotalDebitos;
    // End of variables declaration//GEN-END:variables

    @SuppressWarnings("unchecked")
    private void cargarTipos() {
        String sqlSent
                = "Select tipo_comp, descrip "
                + "from cotipasient order by 2";
        PreparedStatement ps;
        try {
            ps = conn.prepareStatement(sqlSent,
                    ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet rs = CMD.select(ps);
            if (rs == null) {
                return;
            } // end if
            rs.last();
            aTipo_comp = new String[rs.getRow()];

            for (int i = 0; i < aTipo_comp.length; i++) {
                rs.absolute(i + 1);
                aTipo_comp[i] = rs.getString(1) + "," + rs.getString(2);
                cboDescrip.addItem(rs.getString(2));
            } // end while
            ps.close();
        } catch (SQLException ex) {
            Logger.getLogger(RegistroAsientos.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch

    } // end cargarTipos

    private void setThisPeriodDate() {
        this.datFecha_comp.setDate(pc.getFecha_in());
    } // end setThisPeriodDate
}
