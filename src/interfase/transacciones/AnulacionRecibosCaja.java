/*
 * AnulacionRecibosCaja.java
 *
 * Created on 18/07/2015, 04:23:04 PM
 */

package interfase.transacciones;

import Mail.Bitacora;
import accesoDatos.CMD;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import logica.Catransa;
import logica.utilitarios.Ut;

/**
 *
 * @author Bosco
 */
@SuppressWarnings("serial")
public class AnulacionRecibosCaja extends java.awt.Dialog {
    private final Connection conn;  // Conexión a la base de datos
    String recibo;         // Aquí estará el recibo pasado por parámetro
    private final Bitacora b = new Bitacora();

    public AnulacionRecibosCaja(
            java.awt.Frame parent,
            boolean modal,
            Connection c, 
            String recnume) {
        
        super(parent, modal);
        initComponents();

        this.setAlwaysOnTop(false);

        conn   = c;
        recibo = recnume.trim();

        clearObjects();
        
        

        // Si el número de recibo recibido es un cero entonces habilito
        // el campo para que el usuario pueda digitar un número.
        txtRecnume.setEnabled(Integer.parseInt(recibo) == 0);

        txtRecnume.setText(recibo);

        // Si el campo está habilitado le pongo el focus...
        if (txtRecnume.isEnabled())
            txtRecnume.requestFocusInWindow();
        else{ // ... caso contrario ejecuto el evento que busca el recibo
            txtRecnumeFocusLost(null);
            btnAnular.requestFocusInWindow();
        } // end if
        
    } // end constructor

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAnular = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        txtRecnume = new javax.swing.JFormattedTextField();
        lblNombre = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtFecha = new javax.swing.JTextField();
        txtMonto = new javax.swing.JTextField();
        lblTipoMov = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblModulo = new javax.swing.JLabel();

        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImage(null);
        setModalityType(java.awt.Dialog.ModalityType.DOCUMENT_MODAL);
        setTitle("Anular recibos de caja");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        btnAnular.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnAnular.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZUNDO.png"))); // NOI18N
        btnAnular.setText("Anular");
        btnAnular.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAnularMouseClicked(evt);
            }
        });
        btnAnular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnularActionPerformed(evt);
            }
        });

        btnSalir.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/control-power.png"))); // NOI18N
        btnSalir.setText("Cerrar");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        txtRecnume.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txtRecnume.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtRecnume.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRecnumeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtRecnumeFocusLost(evt);
            }
        });
        txtRecnume.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRecnumeActionPerformed(evt);
            }
        });

        lblNombre.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblNombre.setForeground(new java.awt.Color(0, 51, 255));
        lblNombre.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNombre.setText("  ");
        lblNombre.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Recibo #");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Fecha");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Monto");

        txtFecha.setEditable(false);
        txtFecha.setForeground(new java.awt.Color(204, 0, 204));

        txtMonto.setEditable(false);
        txtMonto.setForeground(new java.awt.Color(204, 0, 204));
        txtMonto.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        lblTipoMov.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        lblTipoMov.setText("jLabel4");

        jLabel4.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel4.setText("Origen");

        lblModulo.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        lblModulo.setForeground(new java.awt.Color(82, 148, 52));
        lblModulo.setText("jLabel5");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNombre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAnular)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSalir))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtRecnume, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTipoMov, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblModulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMonto, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAnular, btnSalir});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtRecnume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTipoMov))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblNombre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txtMonto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(lblModulo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(btnSalir)
                    .addComponent(btnAnular))
                .addGap(4, 4, 4))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnAnular, btnSalir});

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private void btnAnularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnularActionPerformed
        this.btnAnularMouseClicked(null);
    }//GEN-LAST:event_btnAnularActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        dispose();
    }//GEN-LAST:event_btnSalirActionPerformed
/**
 * Búsqueda del recibo y despliegue del cliente
 * @param evt
 */
    private void txtRecnumeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRecnumeFocusLost
        recibo = txtRecnume.getText().trim();

        // Permito que el número sea cero o blanco para que el usuario
        // pueda usar otras opciones.
        if (recibo.equals("") || recibo.equals("0")){
            clearObjects();
            return;
        } // end if
        
        // Consulto los datos del recibo.
        String sqlSelect =
                "Select " +
                "	If(tipomov = 'D','Depósito', 'Retiro') as tipomov, " +
                "	dtoc(fecha) as fecha, " +
                "       monto,  " +
                "	nombre, " +
                "	cajero, " +
                "	descripcion, " +
                "	modulo, " +
                "	tipodoc " +
                "from catransa  " +
                "Inner join caja on catransa.idcaja = caja.idcaja " +
                "Where recnume = ?";
        
        PreparedStatement ps;
        ResultSet rs;
        
        try {
            ps = conn.prepareStatement(
                    sqlSelect, ResultSet.TYPE_SCROLL_SENSITIVE, 
                    ResultSet.CONCUR_READ_ONLY);
            
            ps.setInt(1, Integer.parseInt(recibo));
            
            rs = CMD.select(ps);
        
            if (!Ut.goRecord(rs, Ut.FIRST)){
                this.clearObjects();
                JOptionPane.showMessageDialog(null,
                        "Recibo no encontrado." +
                        "\nPodría darse alguna de la siguientes " +
                        "situaciones:\n" +
                        "1. El recibo se encuentra en un período cerrado.\n" +
                        "2. El recibo no existe en la base de datos.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                ps.close();
                return;
            } // end if
            
            lblNombre.setText(rs.getString("nombre"));
            txtFecha.setText(rs.getString("Fecha"));
            lblTipoMov.setText(rs.getString("tipomov"));
            lblModulo.setText(rs.getString("modulo"));

            txtMonto.setText(
                        Ut.setDecimalFormat(
                        rs.getString("Monto"), "#,##0.00"));
            ps.close();
        } catch (Exception ex) {
            Logger.getLogger(AnulacionRecibosCaja.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        } // end try-catch 
    }//GEN-LAST:event_txtRecnumeFocusLost

    private void txtRecnumeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRecnumeActionPerformed
        // Esto provoca que se ejecute el FocusLost en txtRecnume
        txtRecnume.transferFocus();
    }//GEN-LAST:event_txtRecnumeActionPerformed

    private void txtRecnumeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRecnumeFocusGained
        txtRecnume.selectAll();
    }//GEN-LAST:event_txtRecnumeFocusGained

    private void btnAnularMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAnularMouseClicked
        if (!validarAccion()) {
            return;
        } // end if

        recibo = txtRecnume.getText().trim();

        // Confirmar la anulación
        int respuesta =
            JOptionPane.showConfirmDialog(null,
                    "¿Realmente desea anular este recibo?",
                    "Confirme..",
                    JOptionPane.YES_NO_OPTION);
        if (respuesta == JOptionPane.NO_OPTION){
            return;
        } // end if

        // Creo el objeto que se encargará de realizar la acción.
        // Esta clase no solo desaparece el registro sino que recalcula
        // los saldos de caja (y realiza sus propias valaidaciones).
        Catransa cat = new Catransa(conn);
        cat.anularRegistro(Integer.parseInt(recibo), true);
        
        if (cat.isError()){
            JOptionPane.showMessageDialog(null, 
                    cat.getMensaje_error(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if
        
        
        JOptionPane.showMessageDialog(null,
                    "Recibo anulado satisfactoriamente.",
                    "Mensaje",
                    JOptionPane.INFORMATION_MESSAGE);

        clearObjects();
        
        
    }//GEN-LAST:event_btnAnularMouseClicked

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnular;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lblModulo;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblTipoMov;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtMonto;
    private javax.swing.JFormattedTextField txtRecnume;
    // End of variables declaration//GEN-END:variables

    private boolean validarAccion(){
        boolean todoCorrecto = true;
        int recnume;
        String sqlSent, mensaje;
        
        // Validación 1
        //------------------------------------------------------------
        // Si la etiqueta que despliega el nombre del cliente está
        // vacía significa que el recibo digitado no es válido.
        if (this.lblNombre.getText().trim().equals("")){
            JOptionPane.showMessageDialog(null,
                    "Número de recibo no válido.",
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
            txtRecnume.requestFocusInWindow();
            return false;
        } // end if
        
        // Validación 2 (Facturas y recibos de CXC = Depósitos)
        //------------------------------------------------------------
        // Si existe una referencia a CXC no se puede anular desde esta pantalla,
        // tendrá que hacerse desde la pantalla de anulación que corresponda en CXC.
        sqlSent =
                "Select documento, tipodoc from catransa " +
                "Where recnume = ? and tipomov = 'D' " +
                "and tipodoc in ( 'REC', 'FAC' )";
        PreparedStatement ps;
        ResultSet rs;
        
        try {
            recnume = Integer.parseInt(txtRecnume.getText().trim());
            ps = conn.prepareStatement(sqlSent, 
                    ResultSet.TYPE_SCROLL_SENSITIVE, 
                    ResultSet.CONCUR_READ_ONLY);
            ps.setInt(1, recnume);
            rs = CMD.select(ps);
            if (rs != null && rs.first()){
                todoCorrecto = false;
                mensaje = 
                        "Este documento corresponde a " + 
                        (rs.getString("tipodoc").equals("REC") ? "un recibo " : "una factura ") + "en CXC. \n" +
                            "No puede anularlo desde esta pantalla, deberá\n" +
                            "hacerlo desde la pantalla de anulación de " +
                        (rs.getString("tipodoc").equals("REC") ? "recibos " : "facturas ") + "de CXC.";
                
                
                JOptionPane.showMessageDialog(null,
                        mensaje,
                        "Error", 
                        JOptionPane.ERROR_MESSAGE);
            } // end if
            ps.close();
        } catch (NumberFormatException | SQLException | HeadlessException ex) {
            Logger.getLogger(AnulacionRecibosCaja.class.getName()).log(Level.SEVERE, null, ex);
            todoCorrecto = false;
            JOptionPane.showMessageDialog(null,
                        ex.getMessage(),
                        "Error", 
                        JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        } // end try-catch

        if (!todoCorrecto){
            return false;
        }
        
        // Validación 3 (Facturas y recibos de CXP = Retiros)
        //------------------------------------------------------------
        // Si existe una referencia a CXP no se puede anular desde esta pantalla,
        // tendrá que hacerse desde la pantalla de anulación que corresponda en CXP.
        sqlSent =
                "Select documento, tipodoc from catransa " +
                "Where recnume = ? and tipomov = 'R' " +
                "and tipodoc in ( 'REC', 'FAC' )";
        
        try {
            recnume = Integer.parseInt(txtRecnume.getText().trim());
            ps = conn.prepareStatement(sqlSent, 
                    ResultSet.TYPE_SCROLL_SENSITIVE, 
                    ResultSet.CONCUR_READ_ONLY);
            ps.setInt(1, recnume);
            rs = CMD.select(ps);
            if (rs != null && rs.first()){
                todoCorrecto = false;
                mensaje = 
                        "Este documento corresponde a " + 
                        (rs.getString("tipodoc").equals("REC") ? "un recibo " : "una factura ") + "en CXP. \n" +
                            "No puede anularlo desde esta pantalla, deberá\n" +
                            "hacerlo desde la pantalla de anulación de " +
                        (rs.getString("tipodoc").equals("REC") ? "recibos " : "facturas ") + "de CXP.";
                
                
                JOptionPane.showMessageDialog(null,
                        mensaje,
                        "Error", 
                        JOptionPane.ERROR_MESSAGE);
            } // end if
            ps.close();
        } catch (NumberFormatException | SQLException | HeadlessException ex) {
            Logger.getLogger(AnulacionRecibosCaja.class.getName()).log(Level.SEVERE, null, ex);
            todoCorrecto = false;
            JOptionPane.showMessageDialog(null,
                        ex.getMessage(),
                        "Error", 
                        JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        } // end try-catch

        if (!todoCorrecto){
            return false;
        }
        
        // Validación 4 (Notas de crédito de CXC = Retiros)
        //------------------------------------------------------------
        // Si existe una referencia a CXC no se puede anular desde esta pantalla,
        // tendrá que hacerse desde la pantalla de anulación que corresponda en CXC.
        sqlSent =
                "Select documento, tipodoc from catransa " +
                "Where recnume = ? and tipomov = 'R' " +
                "and tipodoc in ( 'NDC' )";
        
        try {
            recnume = Integer.parseInt(txtRecnume.getText().trim());
            ps = conn.prepareStatement(sqlSent, 
                    ResultSet.TYPE_SCROLL_SENSITIVE, 
                    ResultSet.CONCUR_READ_ONLY);
            ps.setInt(1, recnume);
            rs = CMD.select(ps);
            if (rs != null && rs.first()){
                todoCorrecto = false;
                mensaje = 
                        "Este documento corresponde a una nota de crédito en CXC. \n" +
                        "No puede anularlo desde esta pantalla, deberá\n" +
                        "hacerlo desde la pantalla de anulación de notas de crédito de CXC.";
                
                
                JOptionPane.showMessageDialog(null,
                        mensaje,
                        "Error", 
                        JOptionPane.ERROR_MESSAGE);
            } // end if
            ps.close();
        } catch (NumberFormatException | SQLException | HeadlessException ex) {
            Logger.getLogger(AnulacionRecibosCaja.class.getName()).log(Level.SEVERE, null, ex);
            todoCorrecto = false;
            JOptionPane.showMessageDialog(null,
                        ex.getMessage(),
                        "Error", 
                        JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        } // end try-catch

        if (!todoCorrecto){
            return false;
        }
        
        // Validación 4 (Notas de débito de CXP = Depósitos)
        //------------------------------------------------------------
        // Si existe una referencia a CXP no se puede anular desde esta pantalla,
        // tendrá que hacerse desde la pantalla de anulación que corresponda en CXP.
        sqlSent =
                "Select documento, tipodoc from catransa " +
                "Where recnume = ? and tipomov = 'D' " +
                "and tipodoc in ( 'NDD' )";
        
        try {
            recnume = Integer.parseInt(txtRecnume.getText().trim());
            ps = conn.prepareStatement(sqlSent, 
                    ResultSet.TYPE_SCROLL_SENSITIVE, 
                    ResultSet.CONCUR_READ_ONLY);
            ps.setInt(1, recnume);
            rs = CMD.select(ps);
            if (rs != null && rs.first()){
                todoCorrecto = false;
                mensaje = 
                        "Este documento corresponde a una nota de débito en CXP. \n" +
                        "No puede anularlo desde esta pantalla, deberá\n" +
                        "hacerlo desde la pantalla de anulación de notas de débito de CXP.";
                
                
                JOptionPane.showMessageDialog(null,
                        mensaje,
                        "Error", 
                        JOptionPane.ERROR_MESSAGE);
            } // end if
            ps.close();
        } catch (NumberFormatException | SQLException | HeadlessException ex) {
            Logger.getLogger(AnulacionRecibosCaja.class.getName()).log(Level.SEVERE, null, ex);
            todoCorrecto = false;
            JOptionPane.showMessageDialog(null,
                        ex.getMessage(),
                        "Error", 
                        JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        } // end try-catch

        if (!todoCorrecto){
            return false;
        }
        
        return todoCorrecto;
    } // end validarAccion

    
    private void clearObjects() {
        lblNombre.setText("");
        txtFecha.setText("");
        txtMonto.setText("0.00");
        lblTipoMov.setText("");
        lblModulo.setText("");
    } // end clearObjects
}
