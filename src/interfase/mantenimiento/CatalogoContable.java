/* 
 * CatalogoContable.java 
 *
 * Created on 15/09/2013, 07:34:00 AM
 */
package interfase.mantenimiento;

import Exceptions.EmptyDataSourceException;
import Mail.Bitacora;
import accesoDatos.CMD;
import accesoDatos.UtilBD;
import interfase.otros.Buscador;
import interfase.otros.Navegador;
import interfase.reportes.RepMovimCta;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import logica.contabilidad.Cocatalogo;
import logica.contabilidad.Cuenta;
import logica.utilitarios.SQLInjectionException;
import logica.utilitarios.Ut;

/**
 *
 * @author Bosco Garita
 */
@SuppressWarnings("serial")
public class CatalogoContable extends JFrame {

    private Connection conn = null;
    private Navegador nav = null;
    private Buscador bd = null;
    private String vista = "vistacocatalogo";
    private Bitacora b = new Bitacora();

    private final Cocatalogo catalogo;

    /**
     * Creates new form CatalogoContable
     *
     * @param c
     * @throws java.sql.SQLException
     * @throws logica.utilitarios.SQLInjectionException
     * @throws Exceptions.EmptyDataSourceException
     * @throws java.text.ParseException
     */
    @SuppressWarnings({"unchecked"})
    public CatalogoContable(Connection c)
            throws Exception {
        initComponents();

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                mnuSalirActionPerformed(null);
            } // end windowClosing
        } // end class
        ); // end Listener

        nav = new Navegador();

        conn = c;

        nav.setConexion(conn);
        catalogo = new Cocatalogo(conn);
        
        logica.contabilidad.PeriodoContable per = new logica.contabilidad.PeriodoContable(conn);
        this.lblPeriodo.setText(per.getMesLetras() + " " + per.getAño());

        try (ResultSet rs
                = nav.cargarRegistro(
                        Navegador.PRIMERO, "", vista, "cuenta")) {
                    if (rs == null || !rs.first()) {
                        return;
                    } // end if

                    catalogo.setCuentaString(rs.getString("cuenta")); // Esta clase carga todos los campos
                    rs.close();
                    if (catalogo.isError()) {
                        JOptionPane.showMessageDialog(null,
                                catalogo.getMensaje_error(),
                                "Error",
                                JOptionPane.ERROR_MESSAGE);
                        return;
                    } // end if

                    this.cargarRegistro();
                } // end try with resources

    } // end constructor

    public void setConexion(Connection c) {
        conn = c;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtMayor = new javax.swing.JFormattedTextField();
        txtNom_cta = new javax.swing.JFormattedTextField();
        cmdPrimero = new javax.swing.JButton();
        cmdAnterior = new javax.swing.JButton();
        cmdSiguiente = new javax.swing.JButton();
        cmdUltimo = new javax.swing.JButton();
        cmdGuardar = new javax.swing.JButton();
        cmdBorrar = new javax.swing.JButton();
        txtSub_cta = new javax.swing.JFormattedTextField();
        txtSub_sub = new javax.swing.JFormattedTextField();
        txtColect = new javax.swing.JFormattedTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblAno_anter = new javax.swing.JLabel();
        lblDb_fecha = new javax.swing.JLabel();
        lblCr_fecha = new javax.swing.JLabel();
        lblSaldoMesAnterior = new javax.swing.JLabel();
        lblDb_mes = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblCr_mes = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lblSaldoActual = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        lblDb_mes_pend = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        lblCr_mes_pend = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        lblSaldoPend = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblFecha_c = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        cboTipo_cta = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        chkActiva = new javax.swing.JCheckBox();
        chkMovimientos = new javax.swing.JCheckBox();
        chkNombre = new javax.swing.JCheckBox();
        chkAsigaraER = new javax.swing.JCheckBox();
        jLabel11 = new javax.swing.JLabel();
        lblFecha_upd = new javax.swing.JLabel();
        lblPeriodo = new javax.swing.JLabel();
        btnMovGeneral = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuArchivo = new javax.swing.JMenu();
        mnuValidCat = new javax.swing.JMenuItem();
        mnuGuardar = new javax.swing.JMenuItem();
        mnuSalir = new javax.swing.JMenuItem();
        mnuEdicion = new javax.swing.JMenu();
        mnuBorrar = new javax.swing.JMenuItem();
        mnuBuscar = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Mantenimiento de cuentas");

        txtMayor.setColumns(3);
        try {
            txtMayor.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtMayor.setToolTipText("Mayor");
        txtMayor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtMayorFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMayorFocusLost(evt);
            }
        });
        txtMayor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMayorActionPerformed(evt);
            }
        });

        txtNom_cta.setColumns(40);
        try {
            txtNom_cta.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("****************************************")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtNom_cta.setToolTipText("Descripción");
        txtNom_cta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNom_ctaActionPerformed(evt);
            }
        });
        txtNom_cta.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNom_ctaFocusGained(evt);
            }
        });

        cmdPrimero.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZTOP.png"))); // NOI18N
        cmdPrimero.setToolTipText("Ir al primer registro");
        cmdPrimero.setFocusCycleRoot(true);
        cmdPrimero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrimeroActionPerformed(evt);
            }
        });

        cmdAnterior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZBACK.png"))); // NOI18N
        cmdAnterior.setToolTipText("Ir al registro anterior");
        cmdAnterior.setFocusCycleRoot(true);
        cmdAnterior.setMaximumSize(new java.awt.Dimension(93, 29));
        cmdAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAnteriorActionPerformed(evt);
            }
        });

        cmdSiguiente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZNEXT.png"))); // NOI18N
        cmdSiguiente.setToolTipText("Ir al siguiente registro");
        cmdSiguiente.setMaximumSize(new java.awt.Dimension(93, 29));
        cmdSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSiguienteActionPerformed(evt);
            }
        });

        cmdUltimo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZEND.png"))); // NOI18N
        cmdUltimo.setToolTipText("Ir al último registro");
        cmdUltimo.setFocusCycleRoot(true);
        cmdUltimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUltimoActionPerformed(evt);
            }
        });

        cmdGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZSAVE.png"))); // NOI18N
        cmdGuardar.setToolTipText("Guardar registro");
        cmdGuardar.setMaximumSize(new java.awt.Dimension(93, 29));
        cmdGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGuardarActionPerformed(evt);
            }
        });

        cmdBorrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZDELETE.png"))); // NOI18N
        cmdBorrar.setToolTipText("Borrar registro");
        cmdBorrar.setMaximumSize(new java.awt.Dimension(93, 29));
        cmdBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBorrarActionPerformed(evt);
            }
        });

        txtSub_cta.setColumns(3);
        try {
            txtSub_cta.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtSub_cta.setToolTipText("Sub cuenta");
        txtSub_cta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSub_ctaActionPerformed(evt);
            }
        });
        txtSub_cta.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSub_ctaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSub_ctaFocusLost(evt);
            }
        });

        txtSub_sub.setColumns(3);
        try {
            txtSub_sub.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtSub_sub.setToolTipText("Sub - Subcuenta");
        txtSub_sub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSub_subActionPerformed(evt);
            }
        });
        txtSub_sub.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSub_subFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSub_subFocusLost(evt);
            }
        });

        txtColect.setColumns(3);
        try {
            txtColect.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtColect.setToolTipText("Colectivo");
        txtColect.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtColectFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtColectFocusLost(evt);
            }
        });
        txtColect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtColectActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 102, 0));
        jLabel1.setText("Saldo año anterior");

        jLabel3.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel3.setText("Débitos fecha");

        jLabel4.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel4.setText("Créditos fecha");

        jLabel5.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 0, 255));
        jLabel5.setText("Saldo mes anterior");

        lblAno_anter.setFont(new java.awt.Font("Ubuntu", 0, 15)); // NOI18N
        lblAno_anter.setForeground(new java.awt.Color(204, 102, 0));
        lblAno_anter.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAno_anter.setText("lblAno_anter");
        lblAno_anter.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblDb_fecha.setFont(new java.awt.Font("Ubuntu", 0, 15)); // NOI18N
        lblDb_fecha.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDb_fecha.setText("lblDB_fecha");
        lblDb_fecha.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblCr_fecha.setFont(new java.awt.Font("Ubuntu", 0, 15)); // NOI18N
        lblCr_fecha.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCr_fecha.setText("lblCr_fecfha");
        lblCr_fecha.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblSaldoMesAnterior.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        lblSaldoMesAnterior.setForeground(new java.awt.Color(255, 0, 255));
        lblSaldoMesAnterior.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSaldoMesAnterior.setText("lblSaldoMesAnterior");
        lblSaldoMesAnterior.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblDb_mes.setFont(new java.awt.Font("Ubuntu", 0, 15)); // NOI18N
        lblDb_mes.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDb_mes.setText("lblDB_mes");
        lblDb_mes.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel7.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel7.setText("Débitos del mes");

        lblCr_mes.setFont(new java.awt.Font("Ubuntu", 0, 15)); // NOI18N
        lblCr_mes.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCr_mes.setText("lblCr_mes");
        lblCr_mes.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel8.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel8.setText("Créditos del mes");

        jLabel9.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 153, 51));
        jLabel9.setText("Saldo actual");

        lblSaldoActual.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        lblSaldoActual.setForeground(new java.awt.Color(0, 153, 51));
        lblSaldoActual.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSaldoActual.setText("lblSaldoMesActual");
        lblSaldoActual.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel12.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel12.setText("Débitos pendientes");

        lblDb_mes_pend.setFont(new java.awt.Font("Ubuntu", 0, 15)); // NOI18N
        lblDb_mes_pend.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDb_mes_pend.setText("débitos_pendientes");
        lblDb_mes_pend.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel13.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel13.setText("Créditos pendientes");

        lblCr_mes_pend.setFont(new java.awt.Font("Ubuntu", 0, 15)); // NOI18N
        lblCr_mes_pend.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCr_mes_pend.setText("créditos_pendientes");
        lblCr_mes_pend.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel14.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel14.setForeground(java.awt.Color.blue);
        jLabel14.setText("Saldo pendiente");

        lblSaldoPend.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        lblSaldoPend.setForeground(java.awt.Color.blue);
        lblSaldoPend.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSaldoPend.setText("saldo_pendiente");
        lblSaldoPend.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblSaldoActual, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblCr_mes, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblDb_mes, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblSaldoMesAnterior, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblCr_fecha, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblDb_fecha, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblAno_anter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblSaldoPend, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCr_mes_pend, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDb_mes_pend, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblAno_anter, lblCr_fecha, lblCr_mes, lblDb_fecha, lblDb_mes, lblSaldoActual, lblSaldoMesAnterior});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(lblAno_anter))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel3)
                    .addComponent(lblDb_fecha))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lblCr_fecha)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lblSaldoMesAnterior)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDb_mes)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCr_mes)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSaldoActual)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDb_mes_pend)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCr_mes_pend)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSaldoPend)
                    .addComponent(jLabel14))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel2.setText("Cuenta");

        jLabel6.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel6.setText("Fecha de creación");

        lblFecha_c.setFont(new java.awt.Font("Ubuntu", 0, 15)); // NOI18N
        lblFecha_c.setForeground(java.awt.Color.magenta);
        lblFecha_c.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblFecha_c.setText("lblFecha_c");
        lblFecha_c.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel10.setText("Tipo");

        cboTipo_cta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Activo", "Pasivo", "Capital", "Ingresos", "Gastos" }));

        chkActiva.setSelected(true);
        chkActiva.setText("Activa");

        chkMovimientos.setSelected(true);
        chkMovimientos.setText("Movimientos");
        chkMovimientos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chkMovimientosMouseClicked(evt);
            }
        });

        chkNombre.setText("Formato de nombre");
        chkNombre.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chkNombreMouseClicked(evt);
            }
        });

        chkAsigaraER.setText("Asignar a ER...");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkActiva)
                    .addComponent(chkMovimientos)
                    .addComponent(chkNombre)
                    .addComponent(chkAsigaraER))
                .addGap(0, 15, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(chkActiva)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkMovimientos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkNombre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkAsigaraER)
                .addGap(8, 8, 8))
        );

        jLabel11.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel11.setText("Mayorización");

        lblFecha_upd.setFont(new java.awt.Font("Ubuntu", 0, 15)); // NOI18N
        lblFecha_upd.setForeground(new java.awt.Color(255, 122, 0));
        lblFecha_upd.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblFecha_upd.setText("lblFecha_upd");
        lblFecha_upd.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblPeriodo.setForeground(java.awt.Color.red);
        lblPeriodo.setText("jLabel12");
        lblPeriodo.setToolTipText("Periodo en proceso");

        btnMovGeneral.setText("Ver movimientos");
        btnMovGeneral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMovGeneralActionPerformed(evt);
            }
        });

        mnuArchivo.setText("Archivo");

        mnuValidCat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/valid.png"))); // NOI18N
        mnuValidCat.setText("Validar catálogo");
        mnuValidCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuValidCatActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuValidCat);

        mnuGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        mnuGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/disk.png"))); // NOI18N
        mnuGuardar.setText("Guardar");
        mnuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuGuardarActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuGuardar);

        mnuSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.CTRL_MASK));
        mnuSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/control-power.png"))); // NOI18N
        mnuSalir.setText("Salir");
        mnuSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSalirActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuSalir);

        jMenuBar1.add(mnuArchivo);

        mnuEdicion.setText("Edición");

        mnuBorrar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, java.awt.event.InputEvent.CTRL_MASK));
        mnuBorrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/cross.png"))); // NOI18N
        mnuBorrar.setText("Borrar");
        mnuBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuBorrarActionPerformed(evt);
            }
        });
        mnuEdicion.add(mnuBorrar);

        mnuBuscar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        mnuBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/binocular.png"))); // NOI18N
        mnuBuscar.setText("Buscar");
        mnuBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuBuscarActionPerformed(evt);
            }
        });
        mnuEdicion.add(mnuBuscar);

        jMenuBar1.add(mnuEdicion);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMayor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(txtSub_cta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(txtSub_sub, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(txtColect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNom_cta, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblPeriodo, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmdPrimero, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdSiguiente, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdUltimo, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblFecha_c, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cboTipo_cta, 0, 168, Short.MAX_VALUE)
                                    .addComponent(lblFecha_upd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnMovGeneral)
                                .addGap(42, 42, 42)))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cmdAnterior, cmdBorrar, cmdGuardar, cmdPrimero, cmdSiguiente, cmdUltimo});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtMayor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtNom_cta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtSub_cta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtSub_sub, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtColect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmdPrimero)
                                    .addComponent(cmdAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmdSiguiente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmdUltimo, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmdGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmdBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(8, 8, 8))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblPeriodo)
                                .addGap(19, 19, 19))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(lblFecha_c))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(lblFecha_upd))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(cboTipo_cta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(btnMovGeneral)
                        .addGap(120, 120, 120))))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cmdAnterior, cmdBorrar, cmdGuardar, cmdPrimero, cmdSiguiente, cmdUltimo});

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void mnuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuGuardarActionPerformed
        cmdGuardarActionPerformed(evt);
}//GEN-LAST:event_mnuGuardarActionPerformed

    private void mnuSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSalirActionPerformed
        try {
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
        dispose();
}//GEN-LAST:event_mnuSalirActionPerformed

    private void mnuBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuBorrarActionPerformed
        String cuenta
                = txtMayor.getText().trim()
                + txtSub_cta.getText().trim()
                + txtSub_sub.getText().trim()
                + txtColect.getText().trim();

        eliminarRegistro(cuenta);
}//GEN-LAST:event_mnuBorrarActionPerformed

    private void mnuBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuBuscarActionPerformed
        JTextField field = new JTextField("");
        bd = new Buscador(new java.awt.Frame(), true,
                "vistacocatalogo",
                "cuenta,nom_cta",
                "nom_cta",
                field,
                conn);
        bd.setTitle("Buscar cuentas");
        bd.lblBuscar.setText("Nombre de la cuenta");
        bd.setVisible(true);

        catalogo.setCuentaString(field.getText().trim());

        if (catalogo.isError()) {
            JOptionPane.showMessageDialog(null,
                    catalogo.getMensaje_error(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if

        try {
            this.cargarRegistro();
        } catch (Exception ex) {
            Logger.getLogger(CatalogoContable.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
        //this.txtColectFocusLost(null);

}//GEN-LAST:event_mnuBuscarActionPerformed

    private void txtMayorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMayorActionPerformed
        txtMayor.transferFocus();
}//GEN-LAST:event_txtMayorActionPerformed

    private void cmdPrimeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrimeroActionPerformed
        ResultSet rs;

        try {
            rs = nav.cargarRegistro(
                    Navegador.PRIMERO, "", vista, "cuenta");
            if (rs == null) {
                return;
            } // end if

            rs.first();

            catalogo.setCuentaString(rs.getString("cuenta")); // Esta clase carga todos los campos
            rs.close();
            if (catalogo.isError()) {
                JOptionPane.showMessageDialog(null,
                        catalogo.getMensaje_error(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            } // end if

            this.cargarRegistro();

        } catch (Exception ex) {
            Logger.getLogger(CatalogoContable.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
}//GEN-LAST:event_cmdPrimeroActionPerformed

    private void cmdAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAnteriorActionPerformed
        String cuenta;
        ResultSet rs;

        cuenta = txtMayor.getText().trim().isEmpty() ? "000" : txtMayor.getText().trim();
        cuenta += txtSub_cta.getText().trim().isEmpty() ? "000" : txtSub_cta.getText().trim();
        cuenta += txtSub_sub.getText().trim().isEmpty() ? "000" : txtSub_sub.getText().trim();
        cuenta += txtColect.getText().trim().isEmpty() ? "000" : txtColect.getText().trim();

        try {
            rs = nav.cargarRegistro(
                    Navegador.ANTERIOR, cuenta, vista, "cuenta");
            if (rs == null) {
                return;
            } // end if

            rs.first();

            catalogo.setCuentaString(rs.getString("cuenta")); // Esta clase carga todos los campos
            rs.close();
            if (catalogo.isError()) {
                JOptionPane.showMessageDialog(null,
                        catalogo.getMensaje_error(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            } // end if

            this.cargarRegistro();
        } catch (Exception ex) {
            Logger.getLogger(CatalogoContable.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
}//GEN-LAST:event_cmdAnteriorActionPerformed

    private void cmdSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSiguienteActionPerformed
        String cuenta;
        ResultSet rs;

        cuenta = txtMayor.getText().trim().isEmpty() ? "000" : txtMayor.getText().trim();
        cuenta += txtSub_cta.getText().trim().isEmpty() ? "000" : txtSub_cta.getText().trim();
        cuenta += txtSub_sub.getText().trim().isEmpty() ? "000" : txtSub_sub.getText().trim();
        cuenta += txtColect.getText().trim().isEmpty() ? "000" : txtColect.getText().trim();

        try {
            rs = nav.cargarRegistro(
                    Navegador.SIGUIENTE, cuenta, vista, "cuenta");
            if (rs == null) {
                return;
            } // end if

            rs.first();

            catalogo.setCuentaString(rs.getString("cuenta")); // Esta clase carga todos los campos
            rs.close();
            if (catalogo.isError()) {
                JOptionPane.showMessageDialog(null,
                        catalogo.getMensaje_error(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            } // end if

            this.cargarRegistro();
        } catch (Exception ex) {
            Logger.getLogger(CatalogoContable.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
}//GEN-LAST:event_cmdSiguienteActionPerformed

    private void cmdUltimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdUltimoActionPerformed
        ResultSet rs;

        try {
            rs = nav.cargarRegistro(
                    Navegador.ULTIMO, "", vista, "cuenta");
            if (rs == null) {
                return;
            } // end if

            rs.first();

            catalogo.setCuentaString(rs.getString("cuenta")); // Esta clase carga todos los campos
            rs.close();
            if (catalogo.isError()) {
                JOptionPane.showMessageDialog(null,
                        catalogo.getMensaje_error(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            } // end if

            this.cargarRegistro();

        } catch (Exception ex) {
            Logger.getLogger(CatalogoContable.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
}//GEN-LAST:event_cmdUltimoActionPerformed

    private void cmdGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGuardarActionPerformed
        try {
            CMD.transaction(conn, CMD.START_TRANSACTION);
            guardarRegistro();
            if (catalogo.isError()) {
                CMD.transaction(conn, CMD.ROLLBACK);
            } else {
                CMD.transaction(conn, CMD.COMMIT);
            }
        } catch (SQLException | SQLInjectionException | EmptyDataSourceException ex) {
            Logger.getLogger(CatalogoContable.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
}//GEN-LAST:event_cmdGuardarActionPerformed

    private void cmdBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBorrarActionPerformed
        String cuenta;
        cuenta = txtMayor.getText().trim();
        cuenta += txtSub_cta.getText().trim();
        cuenta += txtSub_sub.getText().trim();
        cuenta += txtColect.getText().trim();

        eliminarRegistro(cuenta);
}//GEN-LAST:event_cmdBorrarActionPerformed

    private void txtMayorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMayorFocusLost
        String cuenta = txtMayor.getText().trim();
        if (cuenta.isEmpty()) {
            return;
        } // end if

        // Solo debe correr si el segundo nivel está vacío
        if (txtSub_cta.getText().trim().isEmpty()) {
            findAccount(cuenta);
        } // end if
    }//GEN-LAST:event_txtMayorFocusLost

    private void txtMayorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMayorFocusGained
        txtMayor.selectAll();
    }//GEN-LAST:event_txtMayorFocusGained

    private void txtSub_ctaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSub_ctaActionPerformed
        txtSub_cta.transferFocus();
    }//GEN-LAST:event_txtSub_ctaActionPerformed

    private void txtSub_ctaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSub_ctaFocusGained
        txtSub_cta.selectAll();
    }//GEN-LAST:event_txtSub_ctaFocusGained

    private void txtSub_ctaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSub_ctaFocusLost
        String cuenta = txtMayor.getText().trim();
        if (cuenta.isEmpty()) {
            return;
        } // end if
        cuenta += txtSub_cta.getText().trim();

        // Solo debe correr si el tercer nivel está vacío
        if (txtSub_sub.getText().trim().isEmpty()) {
            findAccount(cuenta);
        } // end if
    }//GEN-LAST:event_txtSub_ctaFocusLost

    private void txtSub_subActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSub_subActionPerformed
        txtSub_sub.transferFocus();
    }//GEN-LAST:event_txtSub_subActionPerformed

    private void txtSub_subFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSub_subFocusGained
        txtSub_sub.selectAll();
    }//GEN-LAST:event_txtSub_subFocusGained

    private void txtSub_subFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSub_subFocusLost
        String cuenta = txtMayor.getText().trim();
        if (cuenta.isEmpty() || txtSub_cta.getText().trim().isEmpty()) {
            return;
        } // end if

        cuenta += txtSub_cta.getText().trim();
        cuenta += txtSub_cta.getText().trim();

        // Solo debe correr si el cuarto nivel está vacío
        if (txtColect.getText().trim().isEmpty()) {
            findAccount(cuenta);
        } // end if
    }//GEN-LAST:event_txtSub_subFocusLost

    private void txtColectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtColectActionPerformed
        txtColect.transferFocus();
    }//GEN-LAST:event_txtColectActionPerformed

    private void txtColectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtColectFocusGained
        txtColect.selectAll();
    }//GEN-LAST:event_txtColectFocusGained

    private void txtColectFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtColectFocusLost
        String cuenta = txtMayor.getText().trim();
        if (cuenta.isEmpty() || txtSub_cta.getText().trim().isEmpty()
                || txtColect.getText().trim().isEmpty()) {
            return;
        } // end if
        cuenta += txtSub_cta.getText().trim();
        cuenta += txtSub_sub.getText().trim();
        cuenta += txtColect.getText().trim();

        findAccount(cuenta);
    }//GEN-LAST:event_txtColectFocusLost

    private void txtNom_ctaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNom_ctaFocusGained
        txtNom_cta.selectAll();
    }//GEN-LAST:event_txtNom_ctaFocusGained

    private void txtNom_ctaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNom_ctaActionPerformed
        txtNom_cta.transferFocus();
    }//GEN-LAST:event_txtNom_ctaActionPerformed

    private void chkNombreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chkNombreMouseClicked
        if (catalogo.getNom_cta().trim().isEmpty()) {
            catalogo.setNom_cta(txtNom_cta.getText());
        } // end if
        catalogo.setNombre((short) (this.chkNombre.isSelected() ? 1 : 0));
        this.txtNom_cta.setText(catalogo.getNom_cta());
    }//GEN-LAST:event_chkNombreMouseClicked

    private void chkMovimientosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chkMovimientosMouseClicked
        // Falta depurar esta parte.
        // También hay que revisar porqué se produce un error a la hora de guardar
        // depués de hacer un cambio en el nivel (este nivel).

        boolean selected = this.chkMovimientos.isSelected();
        catalogo.setNivel((short) (this.chkMovimientos.isSelected() ? 1 : 0));

        if (catalogo.isError()) {
            JOptionPane.showMessageDialog(null,
                    catalogo.getMensaje_error(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            this.chkMovimientos.setSelected(!selected);
            return;
        } // end if

        this.txtNom_cta.setText(catalogo.getNom_cta());
    }//GEN-LAST:event_chkMovimientosMouseClicked

    private void btnMovGeneralActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMovGeneralActionPerformed
        if (!this.chkMovimientos.isSelected()){
            JOptionPane.showMessageDialog(null,
                    "Sólo se pueden consultar las cuentas de movimientos.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if
        
        try {
            String cuenta 
                    = this.txtMayor.getText().trim()
                    + this.txtSub_cta.getText().trim()
                    + this.txtSub_sub.getText().trim()
                    + this.txtColect.getText().trim();
            RepMovimCta mov = new RepMovimCta(this.conn);
            mov.setCuenta(cuenta);
            mov.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
    }//GEN-LAST:event_btnMovGeneralActionPerformed

    private void mnuValidCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuValidCatActionPerformed
        String sqlSent = "Select cuenta from vistacocatalogo Where nivel = 1";
        PreparedStatement ps;
        ResultSet rs;
        String[] result;
        boolean error = false;

        try {
            ps = conn.prepareStatement(sqlSent,
                    ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs = CMD.select(ps);
            rs.beforeFirst();
            while (rs.next()) {
                result = UtilBD.validarEstructuraLogica(conn, rs.getString(1));
                if (result[0].equals("S")) {
                    error = true;
                    JOptionPane.showMessageDialog(null,
                            result[1],
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                    break;
                } // end if
            } // end while
            ps.close();
        } catch (SQLException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            error = true;
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch

        if (!error) {
            JOptionPane.showMessageDialog(null,
                    "La estructura lógica del catálogo es correcta.",
                    "Validación",
                    JOptionPane.INFORMATION_MESSAGE);
        } // end if
    }//GEN-LAST:event_mnuValidCatActionPerformed

    /**
     * Este método elimina una cuenta contable. Recibe la cuenta a eliminar por
     * parámetro.
     *
     * @param cuenta String número de cuenta a eliminar
     */
    public void eliminarRegistro(String cuenta) {
        if (cuenta == null || cuenta.isEmpty()) {
            return;
        } // end if

        if (cuenta.length() < 12) {
            JOptionPane.showMessageDialog(null,
                    "La cuenta no está completa.\n"
                    + "Debe digitar los cuatro niveles de la cuenta.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if

        if (JOptionPane.showConfirmDialog(
                null,
                "¿Realmente desea eliminar este registro?")
                != JOptionPane.YES_OPTION) {
            return;
        } // end if

        boolean transaccion;

        try {
            transaccion = CMD.transaction(conn, CMD.START_TRANSACTION);
        } catch (SQLException ex) {
            Logger.getLogger(CatalogoContable.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return;
        } // end try-catch

        catalogo.setCuentaString(cuenta);

        int sqlResult = catalogo.delete();

        if (catalogo.isError()) {
            JOptionPane.showMessageDialog(
                    null,
                    catalogo.getMensaje_error(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            if (transaccion) {
                try {
                    CMD.transaction(conn, CMD.ROLLBACK);
                } catch (SQLException ex) {
                    Logger.getLogger(CatalogoContable.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(
                            null,
                            ex.getMessage(),
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                    b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
                } // end try-catch
            } // end if transaccion
            return;
        } // end if (catalogo.isError())

        // Solo puede llegar aquí si no ocurrió un error
        try {
            CMD.transaction(conn, CMD.COMMIT);
        } catch (SQLException ex) {
            Logger.getLogger(CatalogoContable.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return;
        } // end try-catch

        txtMayor.setText("");
        txtSub_cta.setText("");
        txtSub_sub.setText("");
        txtColect.setText("");
        txtNom_cta.setText("");
        lblAno_anter.setText("0.00");
        lblCr_fecha.setText("0.00");
        lblDb_fecha.setText("0.00");
        lblSaldoMesAnterior.setText("0.00");
        lblCr_mes.setText("0.00");
        lblDb_mes.setText("0.00");
        lblSaldoActual.setText("0.00");
        lblFecha_c.setText("");
        lblFecha_upd.setText("");
        cboTipo_cta.setSelectedIndex(0);
        chkActiva.setSelected(false);
        chkMovimientos.setSelected(true);
        chkNombre.setSelected(false);

        JOptionPane.showMessageDialog(
                null,
                sqlResult + " registros eliminados.",
                "Error",
                JOptionPane.INFORMATION_MESSAGE);
    } // end eliminar

    /**
     * @param c
     */
    public static void main(Connection c) {
        try {
            CatalogoContable run = new CatalogoContable(c);
            run.setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMovGeneral;
    private javax.swing.JComboBox<String> cboTipo_cta;
    private javax.swing.JCheckBox chkActiva;
    private javax.swing.JCheckBox chkAsigaraER;
    private javax.swing.JCheckBox chkMovimientos;
    private javax.swing.JCheckBox chkNombre;
    private javax.swing.JButton cmdAnterior;
    private javax.swing.JButton cmdBorrar;
    private javax.swing.JButton cmdGuardar;
    private javax.swing.JButton cmdPrimero;
    private javax.swing.JButton cmdSiguiente;
    private javax.swing.JButton cmdUltimo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lblAno_anter;
    private javax.swing.JLabel lblCr_fecha;
    private javax.swing.JLabel lblCr_mes;
    private javax.swing.JLabel lblCr_mes_pend;
    private javax.swing.JLabel lblDb_fecha;
    private javax.swing.JLabel lblDb_mes;
    private javax.swing.JLabel lblDb_mes_pend;
    private javax.swing.JLabel lblFecha_c;
    private javax.swing.JLabel lblFecha_upd;
    private javax.swing.JLabel lblPeriodo;
    private javax.swing.JLabel lblSaldoActual;
    private javax.swing.JLabel lblSaldoMesAnterior;
    private javax.swing.JLabel lblSaldoPend;
    private javax.swing.JMenu mnuArchivo;
    private javax.swing.JMenuItem mnuBorrar;
    private javax.swing.JMenuItem mnuBuscar;
    private javax.swing.JMenu mnuEdicion;
    private javax.swing.JMenuItem mnuGuardar;
    private javax.swing.JMenuItem mnuSalir;
    private javax.swing.JMenuItem mnuValidCat;
    private javax.swing.JFormattedTextField txtColect;
    private javax.swing.JFormattedTextField txtMayor;
    private javax.swing.JFormattedTextField txtNom_cta;
    private javax.swing.JFormattedTextField txtSub_cta;
    private javax.swing.JFormattedTextField txtSub_sub;
    // End of variables declaration//GEN-END:variables

    /**
     * Este método controla la acción para el botón guardar. Si el registro
     * existe le modifica algunas características sino lo inserta. Hace una
     * llamada al método consultarRegistro() para determinar si existe. Para
     * insertar el registro hace una llamada insert() de la clase Cocatalogo.
     *
     * @throws java.sql.SQLException
     */
    @SuppressWarnings("unchecked")
    private void guardarRegistro()
            throws SQLException, SQLInjectionException, EmptyDataSourceException {
        String cuenta;
        cuenta = txtMayor.getText().trim();
        cuenta += txtSub_cta.getText().trim();
        cuenta += txtSub_sub.getText().trim();
        cuenta += txtColect.getText().trim();

        if (cuenta.length() < 12) {
            JOptionPane.showMessageDialog(null,
                    "La cuenta digitada no está completa.\n"
                    + "Debe asegurarse de llenar los tres niveles.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            txtMayor.requestFocusInWindow();
            return;
        } // end if
        if (txtNom_cta.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null,
                    "La descripción no puede quedar en blanco.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            txtNom_cta.requestFocusInWindow();
            return;
        } // end if

        // Si la cuenta es de movimientos valido la estructura lógica
        if (this.chkMovimientos.isSelected()) {
            String[] result = UtilBD.validarEstructuraLogica(conn, cuenta);
            if (result[0].equals("S")) {
                JOptionPane.showMessageDialog(null,
                        result[1],
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            } // end if
        } // end if

        // Este método carga todos los datos de la cuenta si existe.
        catalogo.setCuentaString(cuenta);
        if (catalogo.isError()) {
            JOptionPane.showMessageDialog(null,
                    catalogo.getMensaje_error(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if

        // Esta clase realiza validaciones adicionales y calcula el nivel de la cuenta
        Cuenta account = new Cuenta(cuenta, conn);
        if (account.isError()) {
            JOptionPane.showMessageDialog(null,
                    account.getMensaje_error(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if

        catalogo.setNom_cta(txtNom_cta.getText().trim());
        catalogo.setTipo_cta((short) (this.cboTipo_cta.getSelectedIndex() + 1));
        catalogo.setActiva((short) (this.chkActiva.isSelected() ? 1 : 0));
        catalogo.setNivel((short) (this.chkMovimientos.isSelected() ? 1 : 0));
        catalogo.setNombre((short) (this.chkNombre.isSelected() ? 1 : 0));
        catalogo.setNivelc(account.getAccountLevel()); // Bosco 26/12/2016

        /* 
         * NOTA IMPORTANTE:
         * Los montos no se tocan aquí.
         * Si fuera una inserción el método que lo hace en la clase Cocatalogo
         * se encarga de poner todo en cero.
         * En el caso de las fechas tampoco son modificables desde esta clase.
         * 
         * Aún no se ha definido la funcionalidad del chkAsignaraER (Bosco 20/09/2013)
         */
        boolean registroActualizado;

        if (!consultarRegistro(cuenta)) {
            registroActualizado = catalogo.insert();
        } else {
            registroActualizado = catalogo.update() > 0;
        } // end if

        if (!registroActualizado) {
            JOptionPane.showMessageDialog(null,
                    catalogo.getMensaje_error(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if

        JOptionPane.showMessageDialog(
                null,
                "Registro guardado satisfatoriamente",
                "Mensaje",
                JOptionPane.INFORMATION_MESSAGE);

    } // end guardar

    /**
     * Este método verifica si un registro existe o no.
     *
     * @param cuenta String cuenta contable
     * @return (true = existe, false = no existe)
     */
    public boolean consultarRegistro(String cuenta) {
        boolean existe = false;
        Cuenta c = new Cuenta(conn);
        c.setCuentaString(cuenta);
        try {
            existe = catalogo.existeEnBaseDatos(c);
        } catch (SQLException ex) {
            Logger.getLogger(CatalogoContable.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
        return existe;
    } // end consultarRegistro

    private void cargarRegistro() throws Exception {
        txtMayor.setText(catalogo.getMayor());
        txtSub_cta.setText(catalogo.getSub_cta());
        txtSub_sub.setText(catalogo.getSub_sub());
        txtColect.setText(catalogo.getColect());
        txtNom_cta.setText(catalogo.getNom_cta());
        
        lblAno_anter.setText(Ut.setDecimalFormat(catalogo.getAno_anter() + "", "#,##0.00"));
        
        lblCr_fecha.setText(Ut.setDecimalFormat(catalogo.getCr_fecha() + "", "#,##0.00"));
        lblDb_fecha.setText(Ut.setDecimalFormat(catalogo.getDb_fecha() + "", "#,##0.00"));
        lblSaldoMesAnterior.setText(Ut.setDecimalFormat(catalogo.getSaldoMesAnterior() + "", "#,##0.00"));
        
        lblCr_mes.setText(Ut.setDecimalFormat(catalogo.getCr_mes() + "", "#,##0.00"));
        lblDb_mes.setText(Ut.setDecimalFormat(catalogo.getDb_mes() + "", "#,##0.00"));
        lblSaldoActual.setText(Ut.setDecimalFormat(catalogo.getSaldoActual() + "", "#,##0.00"));
        
        lblDb_mes_pend.setText(Ut.setDecimalFormat(catalogo.getDb_pend() + "", "#,##0.00"));
        lblCr_mes_pend.setText(Ut.setDecimalFormat(catalogo.getCr_pend() + "", "#,##0.00"));
        lblSaldoPend.setText(Ut.setDecimalFormat(
                (catalogo.getSaldoActual() + catalogo.getDb_pend() - catalogo.getCr_pend()) + "", "#,##0.00"));
        
        lblFecha_c.setText(Ut.dtoc(catalogo.getFecha_c()));
        lblFecha_upd.setText(Ut.ttoc(catalogo.getFecha_upd().getTime()));

        cboTipo_cta.setSelectedIndex(catalogo.getTipo_cta() - 1);
        chkActiva.setSelected(catalogo.getActiva() == 1);
        chkMovimientos.setSelected(catalogo.getNivel() == 1);
        chkNombre.setSelected(catalogo.getNombre() == 1);

        //<p>
        // La funcionalidad del chkAsigaraER (Asignar a Estado de Resultados)
        // queda pendiente.
        //</p>
    } // end cargarRegistro

    /**
     * Buscar una cuenta partiendo de los digitos recibidos por parámetro.
     * Funciona con un mínimo de tres dígitos que representan los 3 primeros
     * dígitos de la cuenta. Si los otros nueve (o menos) son omitidos el método
     * los asumirá como ceros.
     *
     * @param cuenta
     */
    private void findAccount(String cuenta) {
        catalogo.setCuentaString(cuenta); // Esta clase carga todos los campos
        if (catalogo.isError()) {
            JOptionPane.showMessageDialog(null,
                    catalogo.getMensaje_error(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if
        try {
            this.cargarRegistro();
        } catch (Exception ex) {
            Logger.getLogger(CatalogoContable.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
    } // end findAccount
} // end class
