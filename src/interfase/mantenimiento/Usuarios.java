/*
 * Usuarios.java 
 *
 * Created  on 14/09/2010, 02:22:56 PM
 * Modified on 16/04/2015, 09:09 PM agrego el mantenimiento de cajeros
 */
package interfase.mantenimiento;

import accesoDatos.CMD;
import accesoDatos.UtilBD;
import interfase.otros.Buscador;
import interfase.otros.Navegador;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import logica.IMantenimiento;
import Exceptions.NotUniqueValueException;
import Mail.Bitacora;
import logica.utilitarios.SQLInjectionException;
import logica.utilitarios.Ut;

/**
 *
 * @author Bosco Garita
 */
public class Usuarios extends javax.swing.JFrame implements IMantenimiento {

    private static final long serialVersionUID = 201L;
    private Buscador bd;
    private final Connection conn;
    private Navegador nav = null;
    private Statement stat;
    private ResultSet rs = null;
    private final String tabla;
    private final String BASEDATOS;
    private ResultSet rsPermisosSQL = null;

    public Usuarios(Connection c, String BASEDATOS) {
        initComponents();
        conn = c;
        this.BASEDATOS = BASEDATOS;
        tabla = "usuario a"; // Nombre de la tabla con alias
        nav = new Navegador();
        nav.setConexion(conn);
        try {
            stat = conn.createStatement();
            rs = nav.cargarRegistroJoin(
                    Navegador.PRIMERO, // Registro
                    " ",        // Llave (valor)
                    tabla,      // Nombre de la tabla con alias
                    "Inner join saisystem.usuario b on a.user = b.user ",
                    "a.user");
            if (rs == null || !rs.first()) {
                return;
            } // end if

            if (rs.getRow() < 1) {
                return;
            } // end if
            
            // Nombre del campo llave
            cargarObjetos();
        } catch (SQLException | SQLInjectionException ex) {
            Logger.getLogger(Usuarios.class.getName()).log(Level.SEVERE, null, ex);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }

    } // end constructor

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        txtUser = new javax.swing.JFormattedTextField();
        jPanel1 = new javax.swing.JPanel();
        chkFacturas = new javax.swing.JCheckBox();
        chkN5 = new javax.swing.JCheckBox();
        chkPrecios = new javax.swing.JCheckBox();
        chkDevoluciones = new javax.swing.JCheckBox();
        chkDescuentos = new javax.swing.JCheckBox();
        chkFirmas = new javax.swing.JCheckBox();
        spnMaxDesc = new javax.swing.JSpinner();
        radActivo = new javax.swing.JRadioButton();
        radInactivo = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        datFecha = new com.toedter.calendar.JDateChooser();
        jPanel2 = new javax.swing.JPanel();
        chkSelect = new javax.swing.JCheckBox();
        chkInsert = new javax.swing.JCheckBox();
        chkUpdate = new javax.swing.JCheckBox();
        chkDelete = new javax.swing.JCheckBox();
        chkExecute = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        chkNotifcompra = new javax.swing.JCheckBox();
        chknotifFactcxc = new javax.swing.JCheckBox();
        chknotifFactcxp = new javax.swing.JCheckBox();
        chknotifxmlfe = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        spnIntervalo1 = new javax.swing.JSpinner();
        spnIntervalo2 = new javax.swing.JSpinner();
        spnIntervalo3 = new javax.swing.JSpinner();
        spnIntervalo4 = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        btnPrimero = new javax.swing.JButton();
        btnAnterior = new javax.swing.JButton();
        btnSiguiente = new javax.swing.JButton();
        btnUltimo = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnBorrar = new javax.swing.JButton();
        chkEsCajero = new javax.swing.JCheckBox();
        chkCajeroActivo = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuArchivo = new javax.swing.JMenu();
        mnuGuardar = new javax.swing.JMenuItem();
        mnuSalir = new javax.swing.JMenuItem();
        mnuEdicion = new javax.swing.JMenu();
        mnuBorrar = new javax.swing.JMenuItem();
        mnuBuscar = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Mantenimiento de usuarios");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Usuario");

        try {
            txtUser.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("****************")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtUser.setToolTipText("Código de usuario");
        txtUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUserActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Permisos especiales", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(51, 51, 255))); // NOI18N

        chkFacturas.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        chkFacturas.setText("Puede autorizar facturas");

        chkN5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        chkN5.setText("Puede modificar art. de inventario");

        chkPrecios.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        chkPrecios.setText("Puede cambiar precios");

        chkDevoluciones.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        chkDevoluciones.setText("Puede recibir devoluciones");

        chkDescuentos.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        chkDescuentos.setText("Puede aplicar descuentos");

        chkFirmas.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        chkFirmas.setText("Puede registrar firmas");

        spnMaxDesc.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        spnMaxDesc.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 99.0d, 0.5d));
        spnMaxDesc.setToolTipText("Máximo descuento a aplicar");
        spnMaxDesc.setEditor(new javax.swing.JSpinner.NumberEditor(spnMaxDesc, "0.00"));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkN5)
                    .addComponent(chkFirmas)
                    .addComponent(chkPrecios))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkDescuentos)
                    .addComponent(chkFacturas)
                    .addComponent(chkDevoluciones))
                .addGap(4, 4, 4)
                .addComponent(spnMaxDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkN5)
                    .addComponent(chkDevoluciones))
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkFirmas)
                    .addComponent(chkFacturas))
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkPrecios)
                    .addComponent(chkDescuentos)
                    .addComponent(spnMaxDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        buttonGroup1.add(radActivo);
        radActivo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        radActivo.setForeground(new java.awt.Color(51, 153, 0));
        radActivo.setText("Activo");

        buttonGroup1.add(radInactivo);
        radInactivo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        radInactivo.setForeground(java.awt.Color.red);
        radInactivo.setText("Inactivo");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Última contraseña:");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Permisos de Base de Datos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(204, 0, 204))); // NOI18N

        chkSelect.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        chkSelect.setText("SELECT");

        chkInsert.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        chkInsert.setText("INSERT");

        chkUpdate.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        chkUpdate.setText("UPDATE");

        chkDelete.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        chkDelete.setText("DELETE");

        chkExecute.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        chkExecute.setText("EXECUTE");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(chkSelect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkInsert)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkUpdate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkDelete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkExecute)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkSelect)
                    .addComponent(chkInsert)
                    .addComponent(chkUpdate)
                    .addComponent(chkDelete)
                    .addComponent(chkExecute))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Notificaciones", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), javax.swing.UIManager.getDefaults().getColor("PasswordField.selectionBackground"))); // NOI18N

        chkNotifcompra.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        chkNotifcompra.setText("Notificar sobre mínimos");

        chknotifFactcxc.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        chknotifFactcxc.setText("Notificar sobre vencimientos (CXC)");

        chknotifFactcxp.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        chknotifFactcxp.setText("Notificar sobre vencimientos (CXP)");

        chknotifxmlfe.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        chknotifxmlfe.setText("Notificar sobre estado XMLs");
        chknotifxmlfe.setToolTipText("Notificar sobre el estado de los documentos enviados al Ministerio de Hacienda");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Cada");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Cada");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Cada");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("Cada");

        spnIntervalo1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        spnIntervalo1.setModel(new javax.swing.SpinnerNumberModel((short)60, (short)1, null, (short)1));
        spnIntervalo1.setToolTipText("");
        spnIntervalo1.setEditor(new javax.swing.JSpinner.NumberEditor(spnIntervalo1, "0"));

        spnIntervalo2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        spnIntervalo2.setModel(new javax.swing.SpinnerNumberModel((short)60, (short)1, null, (short)1));
        spnIntervalo2.setToolTipText("");
        spnIntervalo2.setEditor(new javax.swing.JSpinner.NumberEditor(spnIntervalo2, "0"));

        spnIntervalo3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        spnIntervalo3.setModel(new javax.swing.SpinnerNumberModel((short)60, (short)1, null, (short)1));
        spnIntervalo3.setToolTipText("");
        spnIntervalo3.setEditor(new javax.swing.JSpinner.NumberEditor(spnIntervalo3, "0"));

        spnIntervalo4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        spnIntervalo4.setModel(new javax.swing.SpinnerNumberModel((short)2, (short)1, null, (short)1));
        spnIntervalo4.setToolTipText("");
        spnIntervalo4.setEditor(new javax.swing.JSpinner.NumberEditor(spnIntervalo4, "0"));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("minutos");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("minutos");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("minutos");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("minutos");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkNotifcompra)
                    .addComponent(chknotifFactcxc)
                    .addComponent(chknotifFactcxp)
                    .addComponent(chknotifxmlfe))
                .addGap(24, 24, 24)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spnIntervalo4, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spnIntervalo3, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spnIntervalo2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spnIntervalo1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {spnIntervalo1, spnIntervalo2, spnIntervalo3, spnIntervalo4});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkNotifcompra)
                    .addComponent(jLabel3)
                    .addComponent(spnIntervalo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(8, 8, 8)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chknotifFactcxc)
                    .addComponent(jLabel5)
                    .addComponent(spnIntervalo2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(8, 8, 8)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chknotifFactcxp)
                    .addComponent(jLabel7)
                    .addComponent(spnIntervalo3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(8, 8, 8)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chknotifxmlfe)
                    .addComponent(jLabel9)
                    .addComponent(spnIntervalo4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {spnIntervalo1, spnIntervalo2, spnIntervalo3, spnIntervalo4});

        btnPrimero.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZTOP.png"))); // NOI18N
        btnPrimero.setToolTipText("Ir al primer registro");
        btnPrimero.setFocusCycleRoot(true);
        btnPrimero.setPreferredSize(new java.awt.Dimension(28, 31));
        btnPrimero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrimeroActionPerformed(evt);
            }
        });

        btnAnterior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZBACK.png"))); // NOI18N
        btnAnterior.setToolTipText("Ir al registro anterior");
        btnAnterior.setFocusCycleRoot(true);
        btnAnterior.setMaximumSize(new java.awt.Dimension(93, 29));
        btnAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnteriorActionPerformed(evt);
            }
        });

        btnSiguiente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZNEXT.png"))); // NOI18N
        btnSiguiente.setToolTipText("Ir al siguiente registro");
        btnSiguiente.setMaximumSize(new java.awt.Dimension(93, 29));
        btnSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSiguienteActionPerformed(evt);
            }
        });

        btnUltimo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZEND.png"))); // NOI18N
        btnUltimo.setToolTipText("Ir al último registro");
        btnUltimo.setFocusCycleRoot(true);
        btnUltimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUltimoActionPerformed(evt);
            }
        });

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZSAVE.png"))); // NOI18N
        btnGuardar.setToolTipText("Guardar registro");
        btnGuardar.setMaximumSize(new java.awt.Dimension(93, 29));
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnBorrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZDELETE.png"))); // NOI18N
        btnBorrar.setToolTipText("Borrar registro");
        btnBorrar.setMaximumSize(new java.awt.Dimension(93, 29));
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(btnPrimero, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAnterior, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                .addGap(6, 6, 6)
                .addComponent(btnSiguiente, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUltimo, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBorrar, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                .addGap(42, 42, 42))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnPrimero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSiguiente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUltimo)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2))
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnAnterior, btnBorrar, btnGuardar, btnPrimero, btnSiguiente, btnUltimo});

        chkEsCajero.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        chkEsCajero.setText("Es cajero");

        chkCajeroActivo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        chkCajeroActivo.setText("Cajero activo");

        mnuArchivo.setText("Archivo");

        mnuGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        mnuGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/disk.png"))); // NOI18N
        mnuGuardar.setText("Guardar");
        mnuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuGuardarActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuGuardar);

        mnuSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.CTRL_MASK));
        mnuSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/control-power.png"))); // NOI18N
        mnuSalir.setText("Salir");
        mnuSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSalirActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuSalir);

        jMenuBar1.add(mnuArchivo);

        mnuEdicion.setText("Edición");

        mnuBorrar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, java.awt.event.InputEvent.CTRL_MASK));
        mnuBorrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/cross.png"))); // NOI18N
        mnuBorrar.setText("Borrar");
        mnuBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuBorrarActionPerformed(evt);
            }
        });
        mnuEdicion.add(mnuBorrar);

        mnuBuscar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        mnuBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/binocular.png"))); // NOI18N
        mnuBuscar.setText("Buscar");
        mnuBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuBuscarActionPerformed(evt);
            }
        });
        mnuEdicion.add(mnuBuscar);

        jMenuBar1.add(mnuEdicion);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(4, 4, 4)
                        .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(radActivo)
                        .addGap(8, 8, 8)
                        .addComponent(radInactivo)
                        .addGap(8, 8, 8)
                        .addComponent(jLabel2)
                        .addGap(6, 6, 6)
                        .addComponent(datFecha, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(16, 16, 16))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(chkEsCajero)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkCajeroActivo)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(radActivo)
                    .addComponent(radInactivo)
                    .addComponent(jLabel2)
                    .addComponent(datFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(6, 6, 6)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkEsCajero)
                    .addComponent(chkCajeroActivo))
                .addGap(18, 18, 18)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnPrimeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrimeroActionPerformed
        try {
            rs = nav.cargarRegistroJoin(
                    Navegador.PRIMERO, // Registro
                    txtUser.getText().trim(), // Llave (valor)
                    tabla, // Nombre de la tabla con alias
                    "Inner join saisystem.usuario b on a.user = b.user ",
                    "a.user");         // Nombre del campo llave

            cargarObjetos();

        } // try
        catch (SQLException | SQLInjectionException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
}//GEN-LAST:event_btnPrimeroActionPerformed

    private void btnAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnteriorActionPerformed
        try {
            rs = nav.cargarRegistroJoin(
                    Navegador.ANTERIOR,
                    txtUser.getText().trim(), // Llave (valor)
                    tabla, // Nombre de la tabla con alias
                    "Inner join saisystem.usuario b on a.user = b.user ",
                    "a.user");         // Nombre del campo llave

            cargarObjetos();

        } catch (SQLException | SQLInjectionException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
}//GEN-LAST:event_btnAnteriorActionPerformed

    private void btnSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSiguienteActionPerformed
        try {
            rs = nav.cargarRegistroJoin(
                    Navegador.SIGUIENTE,
                    txtUser.getText().trim(), // Llave (valor)
                    tabla, // Nombre de la tabla con alias
                    "Inner join saisystem.usuario b on a.user = b.user ",
                    "a.user");         // Nombre del campo llave

            cargarObjetos();

        } catch (SQLException | SQLInjectionException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
}//GEN-LAST:event_btnSiguienteActionPerformed

    private void btnUltimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUltimoActionPerformed

        try {
            rs = nav.cargarRegistroJoin(
                    Navegador.ULTIMO,
                    txtUser.getText().trim(), // Llave (valor)
                    tabla, // Nombre de la tabla con alias
                    "Inner join saisystem.usuario b on a.user = b.user ",
                    "a.user");         // Nombre del campo llave

            if (rs == null) {
                return;
            } // end if

            cargarObjetos();

        } catch (SQLException | SQLInjectionException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
}//GEN-LAST:event_btnUltimoActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        guardarRegistro();
}//GEN-LAST:event_btnGuardarActionPerformed

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        eliminarRegistro(txtUser.getText().trim());
}//GEN-LAST:event_btnBorrarActionPerformed

    private void txtUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUserActionPerformed
        refrescarObjetos();
        txtUser.transferFocus();
    }//GEN-LAST:event_txtUserActionPerformed

    private void mnuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuGuardarActionPerformed
        btnGuardarActionPerformed(evt);
}//GEN-LAST:event_mnuGuardarActionPerformed

    private void mnuSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSalirActionPerformed
        dispose();
}//GEN-LAST:event_mnuSalirActionPerformed

    private void mnuBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuBorrarActionPerformed

        eliminarRegistro(txtUser.getText().trim());
}//GEN-LAST:event_mnuBorrarActionPerformed

    private void mnuBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuBuscarActionPerformed
        bd = new Buscador(
                new java.awt.Frame(),
                true,
                "vistausuarios", "user,user", "user",
                txtUser, conn);
        bd.setTitle("Buscar usuarios");
        bd.lblBuscar.setText("Usuario:");
        bd.setVisible(true);
        txtUserActionPerformed(null);
        bd.dispose();
}//GEN-LAST:event_mnuBuscarActionPerformed

    /**
     * @param c
     * @param BD
     */
    public static void main(final Connection c, final String BD) {
        try {
            // Bosco agregado 23/07/2011
            // Integración del segundo nivel de seguridad.
            if (!UtilBD.tienePermiso(c, "Usuarios")) {
                JOptionPane.showMessageDialog(null,
                        "Usted no está autorizado para ejecutar este proceso",
                        "Error - Permisos",
                        JOptionPane.ERROR_MESSAGE);
                return;
            } // Fin Bosco agregado 23/07/2011
            // Fin Bosco agregado 23/07/2011
        } catch (Exception ex) {
            Logger.getLogger(Usuarios.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Usuarios(c, BD).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnterior;
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnPrimero;
    private javax.swing.JButton btnSiguiente;
    private javax.swing.JButton btnUltimo;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkCajeroActivo;
    private javax.swing.JCheckBox chkDelete;
    private javax.swing.JCheckBox chkDescuentos;
    private javax.swing.JCheckBox chkDevoluciones;
    private javax.swing.JCheckBox chkEsCajero;
    private javax.swing.JCheckBox chkExecute;
    private javax.swing.JCheckBox chkFacturas;
    private javax.swing.JCheckBox chkFirmas;
    private javax.swing.JCheckBox chkInsert;
    private javax.swing.JCheckBox chkN5;
    private javax.swing.JCheckBox chkNotifcompra;
    private javax.swing.JCheckBox chkPrecios;
    private javax.swing.JCheckBox chkSelect;
    private javax.swing.JCheckBox chkUpdate;
    private javax.swing.JCheckBox chknotifFactcxc;
    private javax.swing.JCheckBox chknotifFactcxp;
    private javax.swing.JCheckBox chknotifxmlfe;
    private com.toedter.calendar.JDateChooser datFecha;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JMenu mnuArchivo;
    private javax.swing.JMenuItem mnuBorrar;
    private javax.swing.JMenuItem mnuBuscar;
    private javax.swing.JMenu mnuEdicion;
    private javax.swing.JMenuItem mnuGuardar;
    private javax.swing.JMenuItem mnuSalir;
    private javax.swing.JRadioButton radActivo;
    private javax.swing.JRadioButton radInactivo;
    private javax.swing.JSpinner spnIntervalo1;
    private javax.swing.JSpinner spnIntervalo2;
    private javax.swing.JSpinner spnIntervalo3;
    private javax.swing.JSpinner spnIntervalo4;
    private javax.swing.JSpinner spnMaxDesc;
    private javax.swing.JFormattedTextField txtUser;
    // End of variables declaration//GEN-END:variables

    @Override
    public final void cargarObjetos() {
        String user, userSQL;
        // Bosco agregado 26/11/2011
        limpiarPemisosSQL();
        limpiarCampos();

        try {
            if (rs == null || !rs.first()) {
                return;
            } // end if

            // Localizar el usuario SQL
            user = rs.getString("user").trim().toUpperCase();
            try {
                userSQL = UtilBD.getDBString(
                        conn, "mysql.user", "UPPER(user) = '" + user + "'", "distinct user");
            } catch (NotUniqueValueException ex) {
                Logger.getLogger(Usuarios.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(
                        null,
                        ex.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            } // end try-catch

            if (userSQL != null && !userSQL.isEmpty()) {
                //Cargar los permisos de usuario para la base de datos actual
                cargarPermisosSQL(user);
            } // end if
            // Fin Bosco agregado 26/11/2011

            txtUser.setText(rs.getString("user").trim());
            chkFacturas.setSelected(rs.getBoolean("facturas"));
            chkN5.setSelected(rs.getBoolean("n5"));
            chkPrecios.setSelected(rs.getBoolean("precios"));
            chkDevoluciones.setSelected(rs.getBoolean("devoluciones"));
            chkNotifcompra.setSelected(rs.getBoolean("Notifcompra"));
            chkFirmas.setSelected(rs.getBoolean("firmas"));
            chkDescuentos.setSelected(rs.getBoolean("descuentos"));
            spnMaxDesc.setValue(rs.getObject("maxdesc"));

            // Bosco agregado 06/11/2011.
            /*
             Si este valor viene null es porque no existe en saisystem
             lo cual significa lo mismo que estar inactivo.
             */
            if (rs.getString("Activo") == null) {
                radInactivo.setSelected(true);
            } else {
                radActivo.setSelected(
                        rs.getString("Activo").equalsIgnoreCase("S"));
            } // end if

            this.datFecha.setDate(null);
            if (rs.getDate("ultimaClave") != null) {
                this.datFecha.setDate(rs.getDate("ultimaClave"));
            } // end if
            // Fin Bosco agregado 06/11/2011.

            // Bosco agregado 27/07/2013
            chknotifFactcxc.setSelected(rs.getBoolean("notifFactcxc"));
            chknotifFactcxp.setSelected(rs.getBoolean("notifFactcxp"));
            spnIntervalo1.setValue(rs.getObject("intervalo1"));
            spnIntervalo2.setValue(rs.getObject("intervalo2"));
            spnIntervalo3.setValue(rs.getObject("intervalo3"));
            // Fin Bosco agregado 27/07/2013

            // Bosco agregado 23/12/2018
            chknotifxmlfe.setSelected(rs.getBoolean("notifxmlfe"));
            spnIntervalo4.setValue(rs.getObject("intervalo4"));
            // Fin Bosco agregado 23/12/2018

            // Bosco agregado 16/04/2015
            // Determinar si el usuario es cajero y si está activo
            String sqlSent = "Select * from cajero Where user = ?";
            PreparedStatement ps = conn.prepareStatement(sqlSent,
                    ResultSet.TYPE_SCROLL_SENSITIVE,
                    ResultSet.CONCUR_READ_ONLY);
            ps.setString(1, user);
            ResultSet rsc = CMD.select(ps);
            if (rsc != null && rsc.first()) {
                chkEsCajero.setSelected(true);
                chkCajeroActivo.setSelected(rsc.getString("activo").equals("S"));
            } // end if
            ps.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
    } // end cargarObjetos

    @Override
    public void guardarRegistro() {
        if (!validarDatos()) {
            return;
        } // end if

        // Bosco agregado 27/11/2011
        // Verificar si el usuario SQL existe o no.
        String user = txtUser.getText().trim();
        String userSQL;
        try {
            // Bosco modificado 28/07/2013
            // Agrego distinct al tercer parámetor para evitar que
            // se produzca el error de valor no único ya que puede
            // haber más de un registro para cada usuario (por el esquema
            // - localhost y %)
            userSQL = UtilBD.getDBString(conn, 
                    "mysql.user", "UPPER(user) = '"
                    + user.toUpperCase() + "'", "distinct user");
        } catch (NotUniqueValueException | SQLException ex) {
            Logger.getLogger(Usuarios.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return;
        } // end try-catch

        if (userSQL == null || userSQL.isEmpty()) {
            // Crear el usuario SQL con clave igual al ID
            String sqlSent
                    = "Create user " + user + " identified by ?";
            try {
                PreparedStatement ps;
                ps = conn.prepareStatement(sqlSent);
                ps.setString(1, user);
                CMD.update(ps);
                ps.close();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,
                        ex.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
                return;
            } // end try-catch
        } // end if

        // Revisar cuáles permisos se agregan y cuáles se quitan.
        // En rsPermisosSQL se encuentra los permisos registrados en la BD
        String SQLGrant = "GRANT ";
        String SQLRevoke = "REVOKE ";
        
        // Bosco modificado 18/07/2019
        // En mysql server 8.0 estas dos tablas cambian.
        // Este permiso es requerido para que el usuario pueda ejecutar SPs.
        //String SQLGrantOnMySQL = "GRANT SELECT ON mysql.proc to " + user;
        //String SQLRevokeOnMySQL = "REVOKE SELECT ON mysql.proc from " + user;
        // Fin Bosco modificado 18/07/2019

        SQLGrant += chkSelect.isSelected() ? "SELECT," : "";
        SQLRevoke += chkSelect.isSelected() ? "" : "SELECT,";
        SQLGrant += chkInsert.isSelected() ? "INSERT," : "";
        SQLRevoke += chkInsert.isSelected() ? "" : "INSERT,";
        SQLGrant += chkUpdate.isSelected() ? "UPDATE," : "";
        SQLRevoke += chkUpdate.isSelected() ? "" : "UPDATE,";
        SQLGrant += chkDelete.isSelected() ? "DELETE," : "";
        SQLRevoke += chkDelete.isSelected() ? "" : "DELETE,";
        SQLGrant += chkExecute.isSelected() ? "EXECUTE" : "";
        SQLRevoke += chkExecute.isSelected() ? "" : "EXECUTE";
        if (SQLGrant.endsWith(",")) {
            SQLGrant = SQLGrant.substring(0, SQLGrant.lastIndexOf(","));
        } // end if
        if (SQLRevoke.endsWith(",")) {
            SQLRevoke = SQLRevoke.substring(0, SQLRevoke.lastIndexOf(","));
        } // end if

        // Si no hay permisos para agregar dejo vacía la cadena
        if (SQLGrant.trim().equals("GRANT")) {
            SQLGrant = "";
        } else {
            SQLGrant += " ON " + BASEDATOS + ".* TO   " + user;
        } // end if

        // Si no hay permisos que revocar dejo vacía la cadena
        if (SQLRevoke.trim().equals("REVOKE")) {
            SQLRevoke = "";
        } else {
            SQLRevoke += " ON " + BASEDATOS + ".* FROM " + user;
        } // end if

        try {
            if (!SQLGrant.isEmpty()) {
                stat.execute(SQLGrant);
            } // end if
            if (!SQLRevoke.isEmpty()) {
                stat.execute(SQLRevoke);
            } // end if

            // Esto ya no aplica en mysql server 8.0
            /*
            // Permiso o revocación de permiso para ejecutar SPs
            stat.execute(SQLGrantOnMySQL);
            if (!chkExecute.isSelected()) {
                stat.execute(SQLRevokeOnMySQL);
            } // end if
            */
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return;
        } // end try-catch
        // Fin Bosco agregado 27/11/2011

        int sqlresult = 0;
        boolean registroCargado;
        String User,
                Nivel,
                N1,
                N2,
                N3,
                Facturas,
                N5,
                N6,
                N7,
                N8,
                N9,
                Precios,
                Devoluciones,
                Descuentos,
                MaxDesc,
                NotifCompra,
                // Bosco agregado 28/07/2013
                intervalo1,
                notifFactcxc,
                intervalo2,
                notifFactcxp,
                intervalo3,
                notifxmlfe, // Bosco agregado 23/12/2018
                intervalo4, // Bosco agregado 23/12/2018
                // Fin Bosco agregado 28/07/2013
                Firmas,
                // Bosco agregado 06/11/2011
                activo,
                ultimaClave;
        // Fin Bosco agregado 06/11/2011

        User = txtUser.getText().trim();
        Nivel = "0";
        N1 = "0";
        N2 = "0";
        N3 = "0";
        Facturas = chkFacturas.isSelected() ? "1" : "0";
        N5 = chkN5.isSelected() ? "1" : "0";
        N6 = "0";
        N7 = "0";
        N8 = "0";
        N9 = "0";
        Precios = chkPrecios.isSelected() ? "1" : "0";
        Devoluciones = chkDevoluciones.isSelected() ? "1" : "0";
        Descuentos = chkDescuentos.isSelected() ? "1" : "0";
        MaxDesc = spnMaxDesc.getValue().toString();
        NotifCompra = chkNotifcompra.isSelected() ? "1" : "0";
        // Bosco agregado 28/07/2013
        intervalo1 = spnIntervalo1.getValue().toString();
        notifFactcxc = chknotifFactcxc.isSelected() ? "1" : "0";
        intervalo2 = spnIntervalo2.getValue().toString();
        notifFactcxp = chknotifFactcxp.isSelected() ? "1" : "0";
        intervalo3 = spnIntervalo3.getValue().toString();
        notifxmlfe = chknotifxmlfe.isSelected() ? "1" : "0";    // Bosco agregado 23/12/2018
        intervalo4 = spnIntervalo4.getValue().toString();       // Bosco agregado 23/12/2018
        // Fin Bosco agregado 28/07/2013
        Firmas = chkFirmas.isSelected() ? "1" : "0";

        // Bosco agregado 06/11/2011
        activo = this.radActivo.isSelected() ? "S" : "N";
        ultimaClave = Ut.fechaSQL(this.datFecha.getDate());
        // Fin Bosco agregado 06/11/2011

        String UpdateSql;

        if (!consultarRegistro(User)) {
            // Este SP también agrega el usuario en saisystem
            UpdateSql
                    = "CALL InsertarUsuario('"
                    + User + "'" + ","
                    + Nivel + ","
                    + N1 + ","
                    + N2 + ","
                    + N3 + ","
                    + Facturas + ","
                    + N5 + ","
                    + N6 + ","
                    + N7 + ","
                    + N8 + ","
                    + N9 + ","
                    + Precios + ","
                    + Devoluciones + ","
                    + Descuentos + ","
                    + MaxDesc + ","
                    + NotifCompra + ","
                    + // Bosco agregado 28/07/2013
                    intervalo1 + ","
                    + notifFactcxc + ","
                    + intervalo2 + ","
                    + notifFactcxp + ","
                    + intervalo3 + ","
                    + notifxmlfe + "," // Bosco agregado 23/12/2018
                    + intervalo4 + "," // Bosco agregado 23/12/2018
                    + // Fin Bosco agregado 28/07/2013
                    // Bosco agregado 06/11/2011.
                    "'" + activo + "'" + ","
                    + ultimaClave + ","
                    + // Fin Bosco agregado 06/11/2011.
                    Firmas + ")";
        } else {
            UpdateSql
                    = "Update usuario Set "
                    + "  Nivel = " + Nivel + ","
                    + "  N1    = " + N1 + ","
                    + "  N2    = " + N2 + ","
                    + "  N3    = " + N3 + ","
                    + "  Facturas = " + Facturas + ","
                    + "  N5    = " + N5 + ","
                    + "  N6    = " + N6 + ","
                    + "  N7    = " + N7 + ","
                    + "  N8    = " + N8 + ","
                    + "  N9    = " + N9 + ","
                    + "  Precios = " + Precios + ","
                    + "  Devoluciones = " + Devoluciones + ","
                    + "  Descuentos   = " + Descuentos + ","
                    + "  MaxDesc      = " + MaxDesc + ","
                    + "  NotifCompra  = " + NotifCompra + ","
                    + // Bosco agregado 28/07/2013
                    "  intervalo1   = " + intervalo1 + ","
                    + "  notifFactcxc = " + notifFactcxc + ","
                    + "  intervalo2   = " + intervalo2 + ","
                    + "  notifFactcxp = " + notifFactcxp + ","
                    + "  intervalo3   = " + intervalo3 + ","
                    + "  notifxmlfe = " + notifxmlfe + ","
                    + "  intervalo4   = " + intervalo4 + ","
                    + // Fin Bosco agregado 28/07/2013"
                    "  Firmas       = " + Firmas + " "
                    + "Where user = " + "'" + User + "'";
        } // end if

        try {
            sqlresult = stat.executeUpdate(UpdateSql);
            UpdateSql
                    = "Update saisystem.usuario Set "
                    + "  activo = " + "'" + activo + "'" + ","
                    + "  ultimaClave = " + ultimaClave + " "
                    + "Where user = " + "'" + User + "'";
            sqlresult = stat.executeUpdate(UpdateSql);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch

        // Bosco agregado 19/04/2015 (Cajero)
        if (sqlresult > 0) {
            // Activar / descactivar cajeros
            sqlresult = activarCajero(this.chkCajeroActivo.isSelected());
        } // end if
        // Fin Bosco agregado 19/04/2015

        if (sqlresult <= 0) {
            JOptionPane.showMessageDialog(null,
                    "El registro no se pudo guardar.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if

        try {
            // end if
            rs = nav.cargarRegistro(
                    Navegador.ESPECIFICO,
                    User, tabla, "user");
        } catch (SQLException | SQLInjectionException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        }
        registroCargado = (rs != null);

        if (!registroCargado) {
            JOptionPane.showMessageDialog(null,
                    "El registro no se pudo guardar",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if

        JOptionPane.showMessageDialog(null,
                "Registro guardado satisfatoriamente",
                "Mensaje",
                JOptionPane.INFORMATION_MESSAGE);
    } // end guardar

    @Override
    public boolean validarDatos() {
        // Valido que la descripción no esté vacía
        String user = txtUser.getText().trim();
        if (user.equals("")) {
            JOptionPane.showMessageDialog(null,
                    "El usuario no puede quedar en blanco",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            txtUser.requestFocusInWindow();
            return false;
        } // end if

        return true;
    } // end validarDatos

    @Override
    public boolean consultarRegistro(String llave) {
        boolean existe = false;
        PreparedStatement ps;
        try {
            String sqlSent
                    = "SELECT user from usuario "
                    + "Where user = ?";
            ps = conn.prepareStatement(sqlSent);
            ps.setString(1, llave);
            existe = UtilBD.existeRegistro(ps);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
        return existe;
    } // end consultarRegistro

    @Override
    public void habilitarObjetos(boolean todos) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    /**
     * Elimina los rgistros de las tablas usuario, saisystem.usuario y cajero
     * siempre y cuando no haya transacciones relacionadas.
     *
     * @param pUser
     */
    public void eliminarRegistro(String pUser) {
        if (pUser == null) {
            return;
        } // end if

        if (JOptionPane.showConfirmDialog(null,
                "¿Está seguro de querer eliminar ese usuario?")
                != JOptionPane.YES_OPTION) {
            return;
        } // end if

        String sqlDelete = "CALL EliminarUsuario('" + pUser + "')";
        int sqlResult;
        try {
            sqlResult = stat.executeUpdate(sqlDelete);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(btnBorrar,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return;
        } // end try-catch

        // Bosco agregado 27/11/2011.
        // Eliminar el usuario SQL. Si no se revocan todos los permisos antes
        // de eliminar el usuario entonces se produce un error.  Aquí queda,
        // por ahora, una pequeña debilidad; si el usuario que se está eliminando
        // está asignado a otras bases de datos entonces este proceso no lo eliminará
        // por completo ya que faltaría revocar los permisos de esas otras BD.
        // Aquí se produciría un error pero en realidad así debe ser.  Sólo se
        // eliminará por completo cuando ya no existan permisos en ningún lado.
        String SQLRevoke
                = "REVOKE ALL ON " + BASEDATOS + ".* FROM " + txtUser.getText().trim();
        String SQLDrop = "DROP USER " + txtUser.getText().trim();
        try {
            stat.execute(SQLRevoke);
            stat.execute(SQLDrop);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(btnBorrar,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return;
        } // end try-catch
        // Fin Bosco agregado 27/11/2011.

        JOptionPane.showMessageDialog(btnBorrar,
                String.valueOf(sqlResult)
                + " registros eliminados",
                "Mensaje",
                JOptionPane.INFORMATION_MESSAGE);
        txtUser.setText(" ");
    } // end eliminarRegistro

    public void refrescarObjetos() {
        if (txtUser.getText().trim().equals("")) {
            return;
        } // end if

        try {
            rs = nav.cargarRegistroJoin(
                    Navegador.ESPECIFICO, // Registro
                    txtUser.getText().trim(), // Llave (valor)
                    tabla, // Nombre de la tabla con alias
                    "Inner join saisystem.usuario b on a.user = b.user ",
                    "a.user");         // Nombre del campo llave
            cargarObjetos();

        } catch (SQLException | SQLInjectionException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
    } // end refrescarObjetos

    private void limpiarPemisosSQL() {
        this.chkSelect.setSelected(false);
        this.chkInsert.setSelected(false);
        this.chkUpdate.setSelected(false);
        this.chkDelete.setSelected(false);
        this.chkExecute.setSelected(false);
    } // end limpiarPemisosSQL

    private void cargarPermisosSQL(String user) throws SQLException {
        if (rsPermisosSQL != null) {
            rsPermisosSQL.close();
        } // end if

        String selectSQL
                = "Select * from mysql.db Where upper(db) = ? "
                + "and upper(user) = ? and host = '%'";
        PreparedStatement ps
                = conn.prepareStatement(selectSQL,
                        ResultSet.TYPE_SCROLL_SENSITIVE,
                        ResultSet.CONCUR_READ_ONLY);
        ps.setString(1, BASEDATOS.toUpperCase());
        ps.setString(2, user.toUpperCase());
        rsPermisosSQL = CMD.select(ps);

        if (rsPermisosSQL == null || !rsPermisosSQL.first()) {
            this.limpiarPemisosSQL();
            return;
        } // end if

        // Cargar los checkboxes
        this.chkSelect.setSelected(
                rsPermisosSQL.getString("Select_priv").trim().equals("Y"));
        this.chkInsert.setSelected(
                rsPermisosSQL.getString("Insert_priv").trim().equals("Y"));
        this.chkUpdate.setSelected(
                rsPermisosSQL.getString("Update_priv").trim().equals("Y"));
        this.chkDelete.setSelected(
                rsPermisosSQL.getString("Delete_priv").trim().equals("Y"));
        this.chkExecute.setSelected(
                rsPermisosSQL.getString("Execute_priv").trim().equals("Y"));
    } // end cargarPermisosSQL

    private void limpiarCampos() {
        chkFacturas.setSelected(false);
        chkN5.setSelected(false);
        chkDescuentos.setSelected(false);
        chkDevoluciones.setSelected(false);
        chkFirmas.setSelected(false);
        chkNotifcompra.setSelected(false);
        chkPrecios.setSelected(false);
        spnMaxDesc.setValue(0.00);
        radActivo.setSelected(true);
        datFecha.setDate(null);
        chkEsCajero.setSelected(false);     // Bosco agregado 16/04/2015
        chkCajeroActivo.setSelected(false); // Bosco agregado 16/04/2015
    } // end limpiarCampos

    /**
     * Este metodo crea y activa o desactiva cajeros en la taba cajero. Si el
     * cajero existe solo se puede desactivar, no se elimina.
     *
     * @param activar
     * @return int número de registros afectados
     */
    private int activarCajero(boolean activar) {
        int registrosAfectados = 0;
        String cajero = this.txtUser.getText().trim();
        String activo = (activar ? "S" : "N");

        // Si el parámetro activar viene en true hay que verificar si el cajero
        // ya existe en cuyo caso solo se debe afectar el campo activo.
        String sqlSent = "Select * from cajero Where user = ?";
        try {
            PreparedStatement ps = conn.prepareStatement(sqlSent);
            ps.setString(1, cajero);
            if (UtilBD.existeRegistro(ps)) { // Esta función cierra el ps
                sqlSent = "Update cajero Set activo = ? Where user = ?";
                ps = conn.prepareStatement(sqlSent);
                ps.setString(1, activo);
                ps.setString(2, cajero);
                registrosAfectados = CMD.update(ps);
            } else {
                sqlSent
                        = "Insert into cajero("
                        + "user, activo) "
                        + "Values(?,?)";
                ps = conn.prepareStatement(sqlSent);
                ps.setString(1, cajero);
                ps.setString(2, activo);
                registrosAfectados = CMD.update(ps);
            } // end if-else
            ps.close();
        } catch (SQLException ex) {
            Logger.getLogger(Usuarios.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            new Bitacora().writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
        return registrosAfectados;
    } // end

} // end Inproved
