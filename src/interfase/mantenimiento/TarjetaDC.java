/* 
 * TarjetaDC.java 
 * Tarjetas de débito y crédito
 *
 * Created on 06/06/2015, 11:24:28 AM
 */
package interfase.mantenimiento;

import Exceptions.EmptyDataSourceException;
import Mail.Bitacora;
import accesoDatos.CMD;
import accesoDatos.UtilBD;
import interfase.otros.Buscador;
import interfase.otros.Navegador;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import logica.Tarjeta;
import logica.utilitarios.SQLInjectionException;
import logica.utilitarios.Ut;

/**
 *
 * @author Bosco Garita
 */
@SuppressWarnings("serial")
public class TarjetaDC extends JFrame {

    public ResultSet rs, rs3;
    private final String tabla;
    private Connection conn = null;
    private Navegador nav = null;
    private Buscador bd = null;

    private JTextField codigo, numero;

    private final Tarjeta tarjeta;
    private final Bitacora b = new Bitacora();

    /**
     * Creates new form TarjetaDC
     *
     * @param c
     * @param codigo
     * @param numero
     * @throws java.sql.SQLException
     * @throws logica.utilitarios.SQLInjectionException
     * @throws Exceptions.EmptyDataSourceException
     */
    @SuppressWarnings({"unchecked"})
    public TarjetaDC(Connection c, JTextField codigo, JTextField numero)
            throws SQLException, SQLInjectionException, EmptyDataSourceException {
        initComponents();
        btnBuscar.setVisible(false);
        tabla = "tarjeta";
        nav = new Navegador();

        conn = c;

        nav.setConexion(conn);
        tarjeta = new Tarjeta(conn);

        rs = nav.cargarRegistro(Navegador.TODOS, 0, tabla, "idtarjeta");

        if (rs == null || !rs.first()) {
            return;
        } // end if

        txtIdtarjeta.setText(rs.getString("idtarjeta"));
        txtDescrip.setText(rs.getString("descrip"));
        tarjeta.setIdtarjeta(rs.getShort("idtarjeta")); // Esta clase carga todos los campos

        // Cargo el tercer ResultSet y de ahí el combo
        rs3 = nav.cargarRegistro(Navegador.TODOS, 0, tabla, "idtarjeta");
        rs3.beforeFirst();
        Ut.fillComboBox(cboSeleccionar, rs3, 2, true);

        sincronizarCombo();

        this.numero = numero;
        this.codigo = codigo;

        // Si el campo para el número de tarjeta viene nulo significa que esta
        // pantalla fue invocada únicamente para mantenimiento de tarjetas.
        // Caso contrario significa que fue invocada para pedir el dato desde
        // alguna pantalla transaccional como facturación o cajas.
        if (this.numero == null) {
            this.lblNumero.setVisible(false);
            this.txtReferencia.setVisible(false);
        } // end if

    } // end constructor

    public void setConexion(Connection c) {
        conn = c;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        btnBuscar = new javax.swing.JButton();
        lblFamilia = new javax.swing.JLabel();
        txtIdtarjeta = new javax.swing.JFormattedTextField();
        txtDescrip = new javax.swing.JFormattedTextField();
        cboSeleccionar = new javax.swing.JComboBox<String>();
        btnPrimero = new javax.swing.JButton();
        btnAnterior = new javax.swing.JButton();
        btnSiguiente = new javax.swing.JButton();
        btnUltimo = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnBorrar = new javax.swing.JButton();
        radDebito = new javax.swing.JRadioButton();
        radCredito = new javax.swing.JRadioButton();
        lblNumero = new javax.swing.JLabel();
        txtReferencia = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuArchivo = new javax.swing.JMenu();
        mnuGuardar = new javax.swing.JMenuItem();
        mnuSalir = new javax.swing.JMenuItem();
        mnuEdicion = new javax.swing.JMenu();
        mnuBorrar = new javax.swing.JMenuItem();
        mnuBuscar = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Mantenimiento de tarjetas");

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        lblFamilia.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        lblFamilia.setText("Tarjeta");

        txtIdtarjeta.setColumns(3);
        try {
            txtIdtarjeta.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("**")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtIdtarjeta.setToolTipText("Código");
        txtIdtarjeta.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtIdtarjetaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtIdtarjetaFocusLost(evt);
            }
        });
        txtIdtarjeta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdtarjetaActionPerformed(evt);
            }
        });

        txtDescrip.setColumns(40);
        try {
            txtDescrip.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("******************************")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtDescrip.setToolTipText("Descripción");

        cboSeleccionar.setToolTipText("Elija un tipo de asiento");
        cboSeleccionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboSeleccionarActionPerformed(evt);
            }
        });

        btnPrimero.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZTOP.png"))); // NOI18N
        btnPrimero.setToolTipText("Ir al primer registro");
        btnPrimero.setFocusCycleRoot(true);
        btnPrimero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrimeroActionPerformed(evt);
            }
        });

        btnAnterior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZBACK.png"))); // NOI18N
        btnAnterior.setToolTipText("Ir al registro anterior");
        btnAnterior.setFocusCycleRoot(true);
        btnAnterior.setMaximumSize(new java.awt.Dimension(93, 29));
        btnAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnteriorActionPerformed(evt);
            }
        });

        btnSiguiente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZNEXT.png"))); // NOI18N
        btnSiguiente.setToolTipText("Ir al siguiente registro");
        btnSiguiente.setMaximumSize(new java.awt.Dimension(93, 29));
        btnSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSiguienteActionPerformed(evt);
            }
        });

        btnUltimo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZEND.png"))); // NOI18N
        btnUltimo.setToolTipText("Ir al último registro");
        btnUltimo.setFocusCycleRoot(true);
        btnUltimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUltimoActionPerformed(evt);
            }
        });

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZSAVE.png"))); // NOI18N
        btnGuardar.setToolTipText("Guardar registro");
        btnGuardar.setMaximumSize(new java.awt.Dimension(93, 29));
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnBorrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZDELETE.png"))); // NOI18N
        btnBorrar.setToolTipText("Borrar registro");
        btnBorrar.setMaximumSize(new java.awt.Dimension(93, 29));
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        buttonGroup1.add(radDebito);
        radDebito.setText("Débito");

        buttonGroup1.add(radCredito);
        radCredito.setSelected(true);
        radCredito.setText("Crédito");

        lblNumero.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        lblNumero.setText("Número de autoriz:");

        mnuArchivo.setText("Archivo");

        mnuGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        mnuGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/disk.png"))); // NOI18N
        mnuGuardar.setText("Guardar");
        mnuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuGuardarActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuGuardar);

        mnuSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.CTRL_MASK));
        mnuSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/control-power.png"))); // NOI18N
        mnuSalir.setText("Salir");
        mnuSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSalirActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuSalir);

        jMenuBar1.add(mnuArchivo);

        mnuEdicion.setText("Edición");

        mnuBorrar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, java.awt.event.InputEvent.CTRL_MASK));
        mnuBorrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/cross.png"))); // NOI18N
        mnuBorrar.setText("Borrar");
        mnuBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuBorrarActionPerformed(evt);
            }
        });
        mnuEdicion.add(mnuBorrar);

        mnuBuscar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        mnuBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/binocular.png"))); // NOI18N
        mnuBuscar.setText("Buscar");
        mnuBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuBuscarActionPerformed(evt);
            }
        });
        mnuEdicion.add(mnuBuscar);

        jMenuBar1.add(mnuEdicion);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblFamilia)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtIdtarjeta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(radDebito))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cboSeleccionar, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtDescrip, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBuscar)
                        .addGap(47, 47, 47))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblNumero)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtReferencia))
                            .addComponent(radCredito)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnPrimero, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSiguiente, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUltimo, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAnterior, btnBorrar, btnGuardar, btnPrimero, btnSiguiente, btnUltimo});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lblFamilia)
                    .addComponent(txtIdtarjeta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDescrip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboSeleccionar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(radDebito))
                .addGap(1, 1, 1)
                .addComponent(radCredito)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNumero)
                    .addComponent(txtReferencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnPrimero)
                    .addComponent(btnAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSiguiente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUltimo, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnAnterior, btnBorrar, btnGuardar, btnPrimero, btnSiguiente, btnUltimo});

        setSize(new java.awt.Dimension(507, 243));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void mnuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuGuardarActionPerformed
        btnGuardarActionPerformed(evt);
}//GEN-LAST:event_mnuGuardarActionPerformed

    private void mnuSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSalirActionPerformed
        dispose();
}//GEN-LAST:event_mnuSalirActionPerformed

    private void mnuBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuBorrarActionPerformed

        eliminarRegistro(txtIdtarjeta.getText().trim());
}//GEN-LAST:event_mnuBorrarActionPerformed

    private void mnuBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuBuscarActionPerformed
        btnBuscarActionPerformed(evt);
}//GEN-LAST:event_mnuBuscarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        bd = new Buscador(new java.awt.Frame(), true,
                tabla, "idtarjeta,descrip", "descrip", txtIdtarjeta, conn);
        bd.setTitle("Buscar tarjetas");
        bd.lblBuscar.setText("Tarjeta");
        bd.setVisible(true);
        this.txtIdtarjetaFocusLost(null);
}//GEN-LAST:event_btnBuscarActionPerformed

    private void txtIdtarjetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdtarjetaActionPerformed
        txtIdtarjeta.transferFocus();
}//GEN-LAST:event_txtIdtarjetaActionPerformed

    private void cboSeleccionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboSeleccionarActionPerformed
        try {
            // Localizo en ResultSet el registro que corresponde
            // al item seleccionado
            if (!rs3.first()) {
                return;
            } // end if

            if (cboSeleccionar.getItemCount() == 0) {
                return;
            } // end if

            // Hay que controlar la acción de convertir un valor nulo a string
            if (cboSeleccionar.getSelectedItem() == null) {
                return;
            } // end if

            Ut.seek(rs3, cboSeleccionar.getSelectedItem().toString(), "descrip");

            if (rs3.getRow() > 0) {
                txtIdtarjeta.setText(rs3.getString("idtarjeta"));
                txtIdtarjetaFocusLost(null);
            } // end if
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        }
}//GEN-LAST:event_cboSeleccionarActionPerformed

    private void btnPrimeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrimeroActionPerformed
        int idtarjeta = 0;
        if (!txtIdtarjeta.getText().trim().isEmpty()) {
            idtarjeta = Integer.parseInt(txtIdtarjeta.getText().trim());
        }
        try {
            rs = nav.cargarRegistro(
                    Navegador.PRIMERO,
                    idtarjeta, tabla, "idtarjeta");
            if (rs == null) {
                return;
            } // end if

            rs.first();
            txtIdtarjeta.setText(rs.getShort("idtarjeta") + "");
            showData();

        } catch (SQLException | SQLInjectionException ex) {
            Logger.getLogger(TarjetaDC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        }
}//GEN-LAST:event_btnPrimeroActionPerformed

    private void btnAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnteriorActionPerformed
        int idtarjeta = 0;
        if (!txtIdtarjeta.getText().trim().isEmpty()) {
            idtarjeta = Integer.parseInt(txtIdtarjeta.getText().trim());
        }
        try {
            rs = nav.cargarRegistro(
                    Navegador.ANTERIOR,
                    idtarjeta, tabla, "idtarjeta");
            if (rs == null) {
                return;
            } // end if

            rs.first();
            txtIdtarjeta.setText(rs.getShort("idtarjeta") + "");
            showData();

        } catch (SQLException | SQLInjectionException ex) {
            Logger.getLogger(TarjetaDC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        }
}//GEN-LAST:event_btnAnteriorActionPerformed

    private void btnSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSiguienteActionPerformed
        int idtarjeta = 0;
        if (!txtIdtarjeta.getText().trim().isEmpty()) {
            idtarjeta = Integer.parseInt(txtIdtarjeta.getText().trim());
        }
        try {
            rs = nav.cargarRegistro(
                    Navegador.SIGUIENTE,
                    idtarjeta, tabla, "idtarjeta");
            if (rs == null) {
                return;
            } // end if
            rs.first();
            txtIdtarjeta.setText(rs.getShort("idtarjeta") + "");
            showData();

        } catch (SQLException | SQLInjectionException ex) {
            Logger.getLogger(TarjetaDC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        }
}//GEN-LAST:event_btnSiguienteActionPerformed

    private void btnUltimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUltimoActionPerformed
        int idtarjeta = 0;
        if (!txtIdtarjeta.getText().trim().isEmpty()) {
            idtarjeta = Integer.parseInt(txtIdtarjeta.getText().trim());
        }
        try {
            rs = nav.cargarRegistro(
                    Navegador.ULTIMO,
                    idtarjeta, tabla, "idtarjeta");
            if (rs == null) {
                return;
            } // end if

            rs.first();
            txtIdtarjeta.setText(rs.getShort("idtarjeta") + "");
            showData();
        } catch (SQLException | SQLInjectionException ex) {
            Logger.getLogger(TarjetaDC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        }
}//GEN-LAST:event_btnUltimoActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        /*
         Si la pantalla fue invocada desde una pantalla transaccional es necesario
         verificar que el campo de referencia (número de tarjeta) no esté vacío.
         */
        if (this.codigo != null) {
            if (this.txtReferencia.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(null,
                        "El número de tarjeta no puede quedar en blanco",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                this.txtReferencia.requestFocusInWindow();
                return;
            } // end if

            // Asigno los valores correspondientes a los parámetros recibidos
            this.codigo.setText(this.txtIdtarjeta.getText());
            this.numero.setText(this.txtReferencia.getText());
        } // end if

        try {
            CMD.transaction(conn, CMD.START_TRANSACTION);
            guardarRegistro();
            if (tarjeta.isError()) {
                CMD.transaction(conn, CMD.ROLLBACK);
            } else {
                CMD.transaction(conn, CMD.COMMIT);
            }
        } catch (SQLException | SQLInjectionException | EmptyDataSourceException ex) {
            Logger.getLogger(TarjetaDC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        }
}//GEN-LAST:event_btnGuardarActionPerformed

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        eliminarRegistro(txtIdtarjeta.getText().trim());
}//GEN-LAST:event_btnBorrarActionPerformed

    private void txtIdtarjetaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIdtarjetaFocusLost
        showData();
    }//GEN-LAST:event_txtIdtarjetaFocusLost

    private void txtIdtarjetaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIdtarjetaFocusGained
        txtIdtarjeta.selectAll();
    }//GEN-LAST:event_txtIdtarjetaFocusGained

    /**
     * Este método elimina un registro de la base de datos.
     *
     * @param idtarjeta
     */
    public void eliminarRegistro(String idtarjeta) {
        if (idtarjeta == null) {
            return;
        } // end if

        if (JOptionPane.showConfirmDialog(
                null,
                "¿Está seguro de querer eliminar ese registro?")
                != JOptionPane.YES_OPTION) {
            return;
        } // end if

        boolean transaccion;

        try {
            transaccion = CMD.transaction(conn, CMD.START_TRANSACTION);
        } catch (SQLException ex) {
            Logger.getLogger(TarjetaDC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Mensaje",
                    JOptionPane.INFORMATION_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
            return;
        }

        tarjeta.setIdtarjeta(Integer.parseInt(txtIdtarjeta.getText().trim()));
        int sqlResult = tarjeta.delete();

        if (sqlResult > 0) {

            try {

                JOptionPane.showMessageDialog(
                        null,
                        sqlResult + " registros eliminados",
                        "Mensaje",
                        JOptionPane.INFORMATION_MESSAGE);
                cboSeleccionar.removeItem(txtDescrip.getText());
                transaccion = CMD.transaction(conn, CMD.COMMIT);
                txtIdtarjeta.setText(" ");
                txtDescrip.setText(" ");
                if (rs3 != null) {
                    rs3.close();
                }

                rs3 = nav.cargarRegistro(Navegador.TODOS, 0, tabla, "tipo_comp");
            } catch (HeadlessException | SQLException | SQLInjectionException ex) {
                Logger.getLogger(TarjetaDC.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(
                        null,
                        ex.getMessage(),
                        "Mensaje",
                        JOptionPane.INFORMATION_MESSAGE);
                b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
                return;
            } // end try-catch
        } // end if

        if (tarjeta.isError()) {
            JOptionPane.showMessageDialog(
                    null,
                    tarjeta.getMensaje_error(),
                    "Error",
                    JOptionPane.INFORMATION_MESSAGE);
            if (transaccion) {
                try {
                    CMD.transaction(conn, CMD.ROLLBACK);
                } catch (SQLException ex) {
                    Logger.getLogger(TarjetaDC.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(
                            null,
                            ex.getMessage(),
                            "Mensaje",
                            JOptionPane.INFORMATION_MESSAGE);
                    b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
                } // end try-catch
            } // end if transaccion
        } // end if
    } // end eliminar

    /**
     * @param c
     * @param codigo
     * @param numero
     */
    public static void main(Connection c, JTextField codigo, JTextField numero) {
        try {
            if (!UtilBD.tienePermiso(c, "Tarjetas")) {
                JOptionPane.showMessageDialog(null,
                        "Usted no está autorizado para ejecutar este proceso",
                        "Error - Permisos",
                        JOptionPane.ERROR_MESSAGE);
                return;
            } // end if
        } catch (Exception ex) {
            Logger.getLogger(TarjetaDC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            TarjetaDC run = new TarjetaDC(c, codigo, numero);
            run.setVisible(true);
        } catch (SQLException | SQLInjectionException | EmptyDataSourceException ex) {
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnterior;
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnPrimero;
    private javax.swing.JButton btnSiguiente;
    private javax.swing.JButton btnUltimo;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cboSeleccionar;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel lblFamilia;
    private javax.swing.JLabel lblNumero;
    private javax.swing.JMenu mnuArchivo;
    private javax.swing.JMenuItem mnuBorrar;
    private javax.swing.JMenuItem mnuBuscar;
    private javax.swing.JMenu mnuEdicion;
    private javax.swing.JMenuItem mnuGuardar;
    private javax.swing.JMenuItem mnuSalir;
    private javax.swing.JRadioButton radCredito;
    private javax.swing.JRadioButton radDebito;
    private javax.swing.JFormattedTextField txtDescrip;
    private javax.swing.JFormattedTextField txtIdtarjeta;
    private javax.swing.JTextField txtReferencia;
    // End of variables declaration//GEN-END:variables

    /**
     * Este método controla la acción para el botón guardar. Si el registro
     * existe le modifica la descripción y el tipo sino lo inserta. Hace una
     * llamada al método consultarRegistro para determinar si existe o no. Para
     * insertar el registro hace una llamada insert() de la clase Tarjeta.java.
     *
     * @throws java.sql.SQLException
     */
    @SuppressWarnings("unchecked")
    private void guardarRegistro()
            throws SQLException, SQLInjectionException, EmptyDataSourceException {
        if (txtIdtarjeta.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null,
                    "Debe digitar un código válido",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            txtIdtarjeta.requestFocusInWindow();
            return;
        }
        if (txtDescrip.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null,
                    "La descripción no puede quedar en blanco.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            txtDescrip.requestFocusInWindow();
            return;
        }

        boolean registroActualizado;
        int idtarjeta = Integer.parseInt(txtIdtarjeta.getText().trim());
        String descrip = txtDescrip.getText().trim();

        tarjeta.setIdtarjeta(idtarjeta);
        tarjeta.setDescrip(descrip);
        tarjeta.setTipo(this.radDebito.isSelected() ? "D" : "C");

        if (!consultarRegistro(idtarjeta)) {
            registroActualizado = tarjeta.insert();
            cboSeleccionar.addItem(descrip);
        } else {
            registroActualizado = tarjeta.update() > 0;
            // Elimino la descripción anterior y agrego la nueva
            cboSeleccionar.removeItemAt(cboSeleccionar.getSelectedIndex());
            cboSeleccionar.addItem(descrip);
        } // end if

        if (rs3 != null) {
            rs3.close();
        }

        rs3 = nav.cargarRegistro(Navegador.TODOS, 0, tabla, "idtarjeta");

        if (rs != null) {
            rs.close();
        } // end if

        if (!registroActualizado) {
            JOptionPane.showMessageDialog(null,
                    "El registro no se pudo guardar",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } // end if

        sincronizarCombo();

        /*
         Si esta pantalla fue invocada desde una pantalla transaccional debe
         cerrarse en el momento de terminar de guardar y sin mostrar ningún
         mensaje de éxito.
         */
        if (this.numero != null) {
            dispose();
            return;
        } // end if

        JOptionPane.showMessageDialog(
                null,
                "Registro guardado satisfatoriamente",
                "Mensaje",
                JOptionPane.INFORMATION_MESSAGE);

    } // end guardar

    public void showData() {
        if (txtIdtarjeta.getText().trim().equals("")) {
            return;
        } // end if

        tarjeta.setIdtarjeta(Short.parseShort(txtIdtarjeta.getText().trim()));
        txtDescrip.setText(tarjeta.getDescrip());
        if (tarjeta.getTipo().equals("D")) {
            this.radDebito.setSelected(true);
        } else {
            this.radCredito.setSelected(true);
        } // end if

        try {
            sincronizarCombo();
        } catch (SQLException ex) {
            Logger.getLogger(TarjetaDC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        } // end try-catch
    } // end showData

    private void sincronizarCombo() throws SQLException {
        for (int i = 0; i < this.cboSeleccionar.getItemCount(); i++) {
            if (cboSeleccionar.getItemAt(i).toString().trim().equals(txtDescrip.getText().trim())) {
                cboSeleccionar.setSelectedIndex(i);
                break;
            } // end if
        } // end for
    } // end sincronizarCombo

    /**
     * Este método verifica si un registro existe o no.
     *
     * @param idtarjeta int (código de tarjeta)
     * @return (true = existe, false = no existe)
     */
    public boolean consultarRegistro(int idtarjeta) {
        boolean existe = false;
        try {
            existe = tarjeta.existeEnBaseDatos(idtarjeta);
        } catch (SQLException ex) {
            Logger.getLogger(TarjetaDC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        } // end try-catch
        return existe;
    } // end consultarRegistro
} // end class
