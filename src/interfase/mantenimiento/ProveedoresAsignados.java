/* 
 * ProveedoresAsignados.java
 *
 * Created on 04/05/2009, 08:42:38 AM
 */

package interfase.mantenimiento;

import Mail.Bitacora;
import accesoDatos.UtilBD;
import interfase.otros.Buscador;
import interfase.otros.Navegador;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import logica.IMantenimiento;
import Exceptions.SQLInjectionException;
import logica.utilitarios.Ut;

/**
 *
 * @author Bosco Garita
 */
@SuppressWarnings("serial")
public class ProveedoresAsignados extends javax.swing.JFrame implements IMantenimiento {

    private final Connection conn;
    private Statement  stat;
    private final Navegador   nav;
    private ResultSet    rs;
    private final String  artcode;
    private final Bitacora b = new Bitacora();


    /** Creates new form ProveedoresAsignados
     * @param c
     * @param codigo
     * @param descripcion
     * @throws java.sql.SQLException
     * @throws Exceptions.SQLInjectionException */
    public ProveedoresAsignados(Connection c, String codigo, String descripcion) throws SQLException, SQLInjectionException {
        initComponents();

        conn = c;
        artcode = codigo;
        lblArtdesc.setText(descripcion);

        nav = new Navegador();
        nav.setConexion(c);

        this.fillTable();
    } // end constructor

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblArtdesc = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtProcode = new javax.swing.JFormattedTextField();
        lblProdesc = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProveedores = new javax.swing.JTable();
        btnAgregar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        Menu = new javax.swing.JMenu();
        mnuSalir = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        mnuBorrar = new javax.swing.JMenuItem();
        mnuBuscar = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Proveedores por artículo");

        lblArtdesc.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblArtdesc.setForeground(java.awt.Color.red);
        lblArtdesc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblArtdesc.setText("jLabel1");
        lblArtdesc.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Proveedor");

        txtProcode.setColumns(15);
        try {
            txtProcode.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("***************")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtProcode.setToolTipText("Código del proveedor a asignar");
        txtProcode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProcodeActionPerformed(evt);
            }
        });

        lblProdesc.setForeground(java.awt.Color.blue);
        lblProdesc.setText(" ");
        lblProdesc.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        tblProveedores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Código", "Nombre - Descripción"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblProveedores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProveedoresMouseClicked(evt);
            }
        });
        tblProveedores.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblProveedoresKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblProveedores);

        btnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/arrow-turn-270-left.png"))); // NOI18N
        btnAgregar.setText("Agregar");
        btnAgregar.setEnabled(false);
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/cross.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.setEnabled(false);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/control-power.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        Menu.setText("Archivo");
        Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuActionPerformed(evt);
            }
        });

        mnuSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.CTRL_MASK));
        mnuSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/control-power.png"))); // NOI18N
        mnuSalir.setText("Salir");
        mnuSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSalirActionPerformed(evt);
            }
        });
        Menu.add(mnuSalir);

        jMenuBar1.add(Menu);

        jMenu2.setText("Edición");

        mnuBorrar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, java.awt.event.InputEvent.CTRL_MASK));
        mnuBorrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/cross.png"))); // NOI18N
        mnuBorrar.setText("Borrar");
        mnuBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuBorrarActionPerformed(evt);
            }
        });
        jMenu2.add(mnuBorrar);

        mnuBuscar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        mnuBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/binocular.png"))); // NOI18N
        mnuBuscar.setText("Buscar");
        mnuBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuBuscarActionPerformed(evt);
            }
        });
        jMenu2.add(mnuBuscar);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblArtdesc, javax.swing.GroupLayout.DEFAULT_SIZE, 594, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtProcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblProdesc, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(195, 195, 195)
                        .addComponent(btnAgregar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSalir)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblArtdesc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtProcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblProdesc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregar)
                    .addComponent(btnEliminar)
                    .addComponent(btnSalir))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(622, 363));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Funciones de este método:
     * 1. Verificar si existe el proveedor.
     * 2. Asignar el valor a la etiqueta de despliegue del proveedor.
     * 3. Habilitar o deshabilitar los botones Agregar y eliminar según corresponda.
     * @param evt
     */
    private void txtProcodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProcodeActionPerformed
        if (this.txtProcode.getText().trim().isEmpty()){
            return;
        } // end if
        
        lblProdesc.setText("");
        btnAgregar.setEnabled(false);
        btnEliminar.setEnabled(false);
        
        // Verifico si existe o no el proveedor.
        String sqlSent =
                "SELECT ConsultarProveedor('" +
                txtProcode.getText().trim() + "')";
        try {
            rs = nav.ejecutarQuery(sqlSent);
            if (rs == null || rs.getString(1) == null) {
                JTextField tmp = new JTextField();
                tmp.setText(txtProcode.getText());
                
                // Ejecuto el buscador automático
                Buscador bd;
                bd = new Buscador(
                            new java.awt.Frame(),
                            true,
                            "inproved",
                            "procode,prodesc",
                            "prodesc",
                            tmp,
                            conn,
                            2,
                            new String[] {"Código","Descripción"}
                            );
                bd.setTitle("Buscar proveedores");
                bd.lblBuscar.setText("Nombre:");
                bd.buscar(txtProcode.getText().trim());
                bd.setVisible(true);
                
                txtProcode.setText(tmp.getText());

                sqlSent =
                    "SELECT ConsultarProveedor('" +
                    txtProcode.getText().trim() + "')";
                
                rs = nav.ejecutarQuery(sqlSent);
                
                if (rs == null || rs.getString(1) == null) {
                    JOptionPane.showMessageDialog(null,
                            "Proveedor no existe", 
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                } // end if
            } // end if
            lblProdesc.setText(rs.getString(1));
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(), 
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
            return;
        } // end try-catch
        
        btnAgregar.setEnabled(true);
        btnEliminar.setEnabled(true);
        
        // Al llegar a este punto ya se verificó que el proveedor es válido.
        // Ahora debo verificar si el proveedor existe o no en el grid para
        // saber si se puede agregar o no.  Esto, al mismo tiempo, me permite
        // determinar si se habilita o no el botón eliminar
        habilitarObjetos(false);
}//GEN-LAST:event_txtProcodeActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    /**
     * La función de este método es trasladar el contenido de la fila
     * celeccionada en el grid hacia el campo de edición para que el
     * usuario pueda eliminarla si lo desea.
     * @param evt
     */
    private void tblProveedoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProveedoresMouseClicked
        // Obtengo la fila y columna seleccionada
        int fila = tblProveedores.getSelectedRow();        
        
        fila = (fila < 0 ? 0:fila); // Si no hay fila seleccionada este número será -1

        // Verifico si el grid está vacío o si la celda celeccionada está vacía
        // para evitar un null pointer exception.
        if (tblProveedores.getValueAt(fila, 0) == null) {
            return;
        } // end if
        
        txtProcode.setText(tblProveedores.getValueAt(fila, 0).toString());
        lblProdesc.setText(tblProveedores.getValueAt(fila, 1).toString());

        // Corro el proceso de validación del objeto txtProcode para que se
        // encargue de habilitar y deshabilitar los botones de Agregar y Eliminar.
        habilitarObjetos(false);
    }//GEN-LAST:event_tblProveedoresMouseClicked

    /**
     * Agregar un proveedor al grid.
     * @param evt
     */
    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        int fila = 0;
        // Localizo la primera celda con valor null
        while (tblProveedores.getValueAt(fila, 0) != null) {
            fila++;
        } // end while
        tblProveedores.setValueAt(txtProcode.getText(), fila, 0);
        tblProveedores.setValueAt(lblProdesc.getText(), fila, 1);

        // Habilitar y desabilitar los botones
        habilitarObjetos(false);

        // Agregar el registro a la base de datos
        String sqlSent =
                "Insert into artprov " + 
                "(artcode, procode)  " +
                "Values"               +
                "('" + artcode + "'," +
                "'"  + txtProcode.getText().trim() + "')";
        try {
            stat = conn.createStatement();
            stat.executeUpdate(sqlSent);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void tblProveedoresKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblProveedoresKeyPressed
        tblProveedoresMouseClicked(null);
    }//GEN-LAST:event_tblProveedoresKeyPressed

    private void mnuSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSalirActionPerformed
        dispose();
}//GEN-LAST:event_mnuSalirActionPerformed

    private void mnuBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuBorrarActionPerformed
        if (this.btnEliminar.isEnabled()) {
            this.btnEliminarActionPerformed(evt);
        }
}//GEN-LAST:event_mnuBorrarActionPerformed

    private void mnuBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuBuscarActionPerformed
        Buscador bd = new Buscador(new java.awt.Frame(), true,
                    "inproved","procode,prodesc","prodesc",txtProcode,conn);
        bd.setVisible(true);
        txtProcodeActionPerformed(null);
        bd.dispose();
}//GEN-LAST:event_mnuBuscarActionPerformed

    private void MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuActionPerformed
        this.btnSalirActionPerformed(evt);
}//GEN-LAST:event_MenuActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        this.eliminarRegistro(artcode, txtProcode.getText().trim());
        try {
            this.fillTable();
        } catch (SQLInjectionException | SQLException ex) {
            Logger.getLogger(ProveedoresAsignados.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        } // end try-catch
    }//GEN-LAST:event_btnEliminarActionPerformed

    /**
     * @param c
     * @param pArtcode
     * @param pArtdesc
    */
    public static void main(
            final Connection c, final String pArtcode, final String pArtdesc) {
        try {
            // Bosco agregado 23/07/2011
            // Integración del segundo nivel de seguridad.
            if (!UtilBD.tienePermiso(c,"ProveedoresAsignados")){
                JOptionPane.showMessageDialog(null,
                        "Usted no está autorizado para ejecutar este proceso",
                        "Error - Permisos",
                        JOptionPane.ERROR_MESSAGE);
                return;
            } // end if
        } catch (Exception ex) {
            Logger.getLogger(ProveedoresAsignados.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Fin Bosco agregado 23/07/2011
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new ProveedoresAsignados(c, pArtcode, pArtdesc).setVisible(true);
                } catch (SQLException | SQLInjectionException ex) {
                    JOptionPane.showMessageDialog(null,
                            ex.getMessage(),
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Menu;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblArtdesc;
    private javax.swing.JLabel lblProdesc;
    private javax.swing.JMenuItem mnuBorrar;
    private javax.swing.JMenuItem mnuBuscar;
    private javax.swing.JMenuItem mnuSalir;
    private javax.swing.JTable tblProveedores;
    private javax.swing.JFormattedTextField txtProcode;
    // End of variables declaration//GEN-END:variables

    @Override
    public void cargarObjetos() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public boolean consultarRegistro(String llave) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void guardarRegistro() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public boolean validarDatos() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void habilitarObjetos(boolean todos) {
        int fila = 0;
        String procode1, procode2;
        while (tblProveedores.getValueAt(fila, 0) != null){
            procode1 = tblProveedores.getValueAt(fila, 0).toString().trim();
            procode2 = txtProcode.getText().trim();
            if (procode1.equals(procode2)){
                btnAgregar.setEnabled(false);
                btnEliminar.setEnabled(true);
                break;
            } else {
                btnAgregar.setEnabled(true);
                btnEliminar.setEnabled(false);
            }
            fila++;
        } // end while
    } // end habilitarObjetos

    private void dimensionarTabla(int filas){
        // El número de filas del grid nunca será menor a 10.
        filas = (filas < 10 ? 10:filas);

        Object[][] dim = new Object [filas][];

        String[] enc = new String [] {"Código", "Nombre - Descripción"};

        tblProveedores.setModel(new DefaultTableModel(dim, enc) {
            private static final long serialVersionUID = 0x1L;
            boolean[] canEdit = new boolean [] {false, false};

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });       
        
    } // end dimensionarTabla

    public void eliminarRegistro(String pArtcode, String pProcode) {
        if (pArtcode == null || pProcode == null){
            return;
        } // end if

        if(JOptionPane.showConfirmDialog(null,
                "¿Realmente desea eliminar ese registro?")
                != JOptionPane.YES_OPTION){
            return;
        } // end if

        String sqlDelete = "CALL EliminarArtprov('" +
                pArtcode + "','" + pProcode + "')";
        int sqlResult = 0;
        try {
            stat = conn.createStatement();
            sqlResult = stat.executeUpdate(sqlDelete);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage(), Bitacora.ERROR);
        } // end try-catch

        if (sqlResult > 0){
            JOptionPane.showMessageDialog(btnEliminar,
                    String.valueOf(sqlResult) +
                    " registros eliminados",
                    "Mensaje", 
                    JOptionPane.INFORMATION_MESSAGE);
            
            this.habilitarObjetos(true);
        } // end if

    } // end eliminar
    
    private void fillTable() throws SQLInjectionException, SQLException{
        Ut.clearJTable(tblProveedores);
        String sqlSent =
                "Select           " +
                "artprov.procode, " +
                "inproved.prodesc " +
                "from artprov     " +
                "Inner Join inproved on artprov.procode = inproved.procode " +
                "Where artcode = " + "'" + artcode + "'";
        
        
        if (Ut.isSQLInjection(sqlSent)){
            return;
        } // end if
        
        rs = nav.ejecutarQuery(sqlSent);
        
        if (rs == null || !rs.first()) {
            return;
        } // endif  

        // Posiciono el puntero en la última fila del cursor para
        // determinar el número de registros y enviar ese número como
        // parámetro al método que redimensiona la tabla.  Con esto
        // me aseguro que todos los proveedores serán desplegados.
        rs.last();

        Ut.resizeTable(tblProveedores, rs.getRow() - tblProveedores.getModel().getRowCount(), "Filas");
        //dimensionarTabla(rs.getRow());

        rs.first();

        int fila = 0;
        tblProveedores.setValueAt(rs.getObject(1), fila, 0);
        tblProveedores.setValueAt(rs.getObject(2), fila, 1);
        while (rs.next()){
            fila++;
            tblProveedores.setValueAt(rs.getObject(1), fila, 0);
            tblProveedores.setValueAt(rs.getObject(2), fila, 1);            
        } // end while
    } // end fillTable
} // end class