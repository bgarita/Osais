/* 
 * PeriodoContable.java 
 *
 * Created on 04/11/2013, 08:39:28 PM
 */

package interfase.mantenimiento;

import Exceptions.EmptyDataSourceException;
import Mail.Bitacora;
import accesoDatos.CMD;
import accesoDatos.UtilBD;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import logica.contabilidad.Coperiodoco;
import logica.utilitarios.SQLInjectionException;

/**
 *
 * @author Bosco Garita
 */
@SuppressWarnings("serial")
public class PeriodoContable extends JFrame {

    public ResultSet rs,rs3;
    private Connection conn = null;
    
    private final Coperiodoco periodo;
    private final Bitacora b = new Bitacora();

    /** Creates new form PeriodoContable
     * @param c
     * @throws java.sql.SQLException
     * @throws logica.utilitarios.SQLInjectionException
     * @throws Exceptions.EmptyDataSourceException */
    @SuppressWarnings({"unchecked"})
    public PeriodoContable(Connection c) 
            throws SQLException, SQLInjectionException, EmptyDataSourceException {
        initComponents();
                
        conn = c;

        periodo = new Coperiodoco(conn);
        periodo.cargarUltimo();
        
        this.datMes.setMonth(periodo.getMes());
        this.datAño.setYear(periodo.getAño() == 0 ? 2013:periodo.getAño());
        
        this.txtDescrip.setText(periodo.getDescrip());
        this.datfecha_in.setDate(periodo.getFecha_in());
        this.datfecha_fi.setDate(periodo.getFecha_fi());
        
    } // end constructor

    public void setConexion(Connection c){ conn = c; }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtDescrip = new javax.swing.JFormattedTextField();
        cmdGuardar = new javax.swing.JButton();
        cmdBorrar = new javax.swing.JButton();
        datMes = new com.toedter.calendar.JMonthChooser();
        datAño = new com.toedter.calendar.JYearChooser();
        datfecha_in = new com.toedter.calendar.JDateChooser();
        datfecha_fi = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        chkcerrado = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuArchivo = new javax.swing.JMenu();
        mnuGuardar = new javax.swing.JMenuItem();
        mnuSalir = new javax.swing.JMenuItem();
        mnuEdicion = new javax.swing.JMenu();
        mnuBorrar = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Mantenimiento de períodos contables");

        txtDescrip.setEditable(false);
        txtDescrip.setColumns(45);
        try {
            txtDescrip.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("******************************")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtDescrip.setToolTipText("Descripción");
        txtDescrip.setDisabledTextColor(java.awt.Color.blue);

        cmdGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZSAVE.png"))); // NOI18N
        cmdGuardar.setToolTipText("Guardar registro");
        cmdGuardar.setMaximumSize(new java.awt.Dimension(93, 29));
        cmdGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGuardarActionPerformed(evt);
            }
        });

        cmdBorrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/WZDELETE.png"))); // NOI18N
        cmdBorrar.setToolTipText("Borrar registro");
        cmdBorrar.setMaximumSize(new java.awt.Dimension(93, 29));
        cmdBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBorrarActionPerformed(evt);
            }
        });

        datMes.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                datMesPropertyChange(evt);
            }
        });

        datAño.setStartYear(2000);
        datAño.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                datAñoPropertyChange(evt);
            }
        });

        jLabel1.setText("Fecha inicial");

        jLabel2.setText("Fecha final");

        chkcerrado.setText("Cerrado");
        chkcerrado.setEnabled(false);

        mnuArchivo.setText("Archivo");

        mnuGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        mnuGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/disk.png"))); // NOI18N
        mnuGuardar.setText("Guardar");
        mnuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuGuardarActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuGuardar);

        mnuSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.CTRL_MASK));
        mnuSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/control-power.png"))); // NOI18N
        mnuSalir.setText("Salir");
        mnuSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSalirActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuSalir);

        jMenuBar1.add(mnuArchivo);

        mnuEdicion.setText("Edición");

        mnuBorrar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, java.awt.event.InputEvent.CTRL_MASK));
        mnuBorrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/cross.png"))); // NOI18N
        mnuBorrar.setText("Borrar");
        mnuBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuBorrarActionPerformed(evt);
            }
        });
        mnuEdicion.add(mnuBorrar);

        jMenuBar1.add(mnuEdicion);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(cmdGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtDescrip, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(datMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(datAño, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addComponent(chkcerrado))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(4, 4, 4)
                                .addComponent(datfecha_in, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addGap(4, 4, 4)
                                .addComponent(datfecha_fi, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 8, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cmdBorrar, cmdGuardar});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {datfecha_fi, datfecha_in});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(datMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(datAño, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(chkcerrado))
                .addGap(8, 8, 8)
                .addComponent(txtDescrip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(datfecha_in, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(datfecha_fi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmdGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cmdBorrar, cmdGuardar});

        setSize(new java.awt.Dimension(506, 245));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void mnuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuGuardarActionPerformed
        cmdGuardarActionPerformed(evt);
}//GEN-LAST:event_mnuGuardarActionPerformed

    private void mnuSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSalirActionPerformed
        dispose();
}//GEN-LAST:event_mnuSalirActionPerformed

    private void mnuBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuBorrarActionPerformed
        
        periodo.delete();
}//GEN-LAST:event_mnuBorrarActionPerformed

    private void cmdGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGuardarActionPerformed
        if (datfecha_in == null || datfecha_in.getDate() == null){
            JOptionPane.showMessageDialog(null, 
                    "Debe digitar o elegir la fecha inicial",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            datfecha_in.requestFocusInWindow();
            return;
        } // end if
        
        if (datfecha_fi == null || datfecha_fi.getDate() == null){
            JOptionPane.showMessageDialog(null, 
                    "Debe digitar o elegir la fecha final",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            datfecha_fi.requestFocusInWindow();
            return;
        } // end if
        
        int mes = datMes.getMonth();
        int año = datAño.getValue();
        String descrip = txtDescrip.getText().trim();

        periodo.setMes(mes);
        periodo.setAño(año);
        periodo.setDescrip(descrip);
        periodo.setCerrado(false);
        java.sql.Date d = new java.sql.Date(datfecha_in.getDate().getTime());
        periodo.setFecha_in(d);
        d = new java.sql.Date(datfecha_fi.getDate().getTime());
        periodo.setFecha_fi(d);
        
        try {
            CMD.transaction(conn, CMD.START_TRANSACTION);
            if (!periodo.existeEnBaseDatos(mes+1, año)){
                periodo.insert();
            }else{
                periodo.update();
            } // end if

            if (periodo.isError()){
                CMD.transaction(conn, CMD.ROLLBACK);
                JOptionPane.showMessageDialog(null,
                        periodo.getMensaje_error(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                CMD.transaction(conn, CMD.COMMIT);
                JOptionPane.showMessageDialog(
                        null,
                        "Registro guardado satisfatoriamente",
                        "Mensaje",
                        JOptionPane.INFORMATION_MESSAGE );
            } // end if
        } catch (SQLException | HeadlessException ex) {
            Logger.getLogger(PeriodoContable.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
        } // end try-catch
}//GEN-LAST:event_cmdGuardarActionPerformed

    private void cmdBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBorrarActionPerformed
        eliminarRegistro();       
}//GEN-LAST:event_cmdBorrarActionPerformed

    private void datMesPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_datMesPropertyChange
        txtDescrip.setText(periodo.toString(datMes.getMonth(), datAño.getValue()));
        int mes = datMes.getMonth();
        int año = datAño.getValue();
        periodo.setMes(mes);
        periodo.setAño(año);
        datfecha_in.setDate(periodo.getFecha_in());
        datfecha_fi.setDate(periodo.getFecha_fi());
    }//GEN-LAST:event_datMesPropertyChange

    private void datAñoPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_datAñoPropertyChange
        datMesPropertyChange(evt);
    }//GEN-LAST:event_datAñoPropertyChange

    /**
     * Este método elimina un registro de la base de datos para la tabla
     * coperiodoco.
     */
    public void eliminarRegistro() {
        if (datfecha_in == null || datfecha_in.getDate() == null){
            JOptionPane.showMessageDialog(null, 
                    "Debe digitar o elegir la fecha inicial",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            datfecha_in.requestFocusInWindow();
            return;
        } // end if
        
        if (datfecha_fi == null || datfecha_fi.getDate() == null){
            JOptionPane.showMessageDialog(null, 
                    "Debe digitar o elegir la fecha final",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            datfecha_fi.requestFocusInWindow();
            return;
        } // end if
        
        int mes = datMes.getMonth();
        int año = datAño.getValue();

        periodo.setMes(mes);
        periodo.setAño(año);
        try {
            if (!periodo.existeEnBaseDatos(mes, año)){
                JOptionPane.showMessageDialog(null, 
                        "No puede eliminar un periodo que aún no ha sido creado",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            } // end if
        } catch (SQLException ex) {
            Logger.getLogger(PeriodoContable.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                        ex.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return;
        } // end try-catch
        
        if(JOptionPane.showConfirmDialog(
                null,
                "¿Está seguro de querer eliminar ese registro?")
                != JOptionPane.YES_OPTION){
            return;
        } // end if
            
        try {
            CMD.transaction(conn, CMD.START_TRANSACTION);
        } catch (SQLException ex) {
            Logger.getLogger(PeriodoContable.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Mensaje",
                    JOptionPane.INFORMATION_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            return;
        } // end try-catch

        int sqlResult = periodo.delete();

        if (periodo.isError()){
            JOptionPane.showMessageDialog(
                    null,
                    periodo.getMensaje_error(),
                    "Error",
                    JOptionPane.INFORMATION_MESSAGE);
            try {
                CMD.transaction(conn, CMD.ROLLBACK);
            } catch (SQLException ex) {
                Logger.getLogger(PeriodoContable.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(
                        null,
                        ex.getMessage(),
                        "Mensaje",
                        JOptionPane.ERROR_MESSAGE);
                b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
                // Cierro el sistema para proteger la integridad
                System.exit(0);
            } // end try-catch
            return;
        } // end if
        
        try {
            CMD.transaction(conn, CMD.COMMIT);
            JOptionPane.showMessageDialog(
                    null,
                    sqlResult + " registros eliminados",
                    "Mensaje",
                    JOptionPane.INFORMATION_MESSAGE);

            datfecha_in.setDate(null);
            datfecha_fi.setDate(null);
            txtDescrip.setText(" ");
        } catch (SQLException | HeadlessException ex) {
            Logger.getLogger(PeriodoContable.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Mensaje",
                    JOptionPane.INFORMATION_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            // Cierro el sistema para proteger la integridad
            System.exit(0);
        } // end try-catch
        
    } // end eliminar
    
    

    /**        "Mensaje",
                    JOptionPane.INFORMATION_MESSAGE);
            b.writeToLog(this.getClass().getName() + "--> " + ex.getMessage());
            // Cierro el sistema para proteger la integridad
            System.exit(0);
        } // end try-catch
        
    } // end eliminar
    
    

    /**
     * @param c
    */
    public static void main(Connection c) {
        try {
            if (!UtilBD.tienePermiso(c,"PeriodosContables")){
                JOptionPane.showMessageDialog(null,
                        "Usted no está autorizado para ejecutar este proceso",
                        "Error - Permisos",
                        JOptionPane.ERROR_MESSAGE);
                return;
            } // end if
        } catch (Exception ex) {
            Logger.getLogger(PeriodoContable.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, 
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try {
            PeriodoContable run = new PeriodoContable(c);
            run.setVisible(true);
        } catch (SQLException | SQLInjectionException | EmptyDataSourceException ex) {
            JOptionPane.showMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkcerrado;
    private javax.swing.JButton cmdBorrar;
    private javax.swing.JButton cmdGuardar;
    private com.toedter.calendar.JYearChooser datAño;
    private com.toedter.calendar.JMonthChooser datMes;
    private com.toedter.calendar.JDateChooser datfecha_fi;
    private com.toedter.calendar.JDateChooser datfecha_in;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu mnuArchivo;
    private javax.swing.JMenuItem mnuBorrar;
    private javax.swing.JMenu mnuEdicion;
    private javax.swing.JMenuItem mnuGuardar;
    private javax.swing.JMenuItem mnuSalir;
    private javax.swing.JFormattedTextField txtDescrip;
    // End of variables declaration//GEN-END:variables

} // end class